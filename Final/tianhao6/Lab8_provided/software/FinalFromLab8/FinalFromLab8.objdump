
FinalFromLab8.elf:     file format elf32-littlenios2
FinalFromLab8.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00012478 memsz 0x00012478 flags r-x
    LOAD off    0x00013498 vaddr 0x02012498 paddr 0x02013f84 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a70 vaddr 0x02015a70 paddr 0x02015a70 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117ec  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a7c  02011a1c  02011a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  02012498  02013f84  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  02015a70  02015a70  00015a70  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f84  2**0
                  CONTENTS
  7 .sdram        00000000  02015bd4  02015bd4  00014f84  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f84  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023743  00000000  00000000  00015ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  00039603  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b8a2  00000000  00000000  000426cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004df70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a1d  00000000  00000000  000502f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b580  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00070236  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00070239  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070245  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00070246  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00070247  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007024b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007024f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00070253  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007025e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00070269  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00070274  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  0007027c  2**0
                  CONTENTS, READONLY
 30 .jdi          0000518d  00000000  00000000  000702ae  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072306  00000000  00000000  0007543b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
02011a1c l    d  .rodata	00000000 .rodata
02012498 l    d  .rwdata	00000000 .rwdata
02015a70 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
02015bd4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalFromLab8_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
02015a70 l     O .bss	00000002 ctl_reg.3589
02015a72 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
020121de l     O .rodata	00000010 zeroes.4404
0200478c l     F .text	000000bc __sbprintf
020121ee l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200499c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
020064f4 l     F .text	00000008 __fp_unlock
02006508 l     F .text	0000019c __sinit.part.1
020066a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02012498 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
020128dc l     O .rwdata	00000020 lc_ctype_charset
020128bc l     O .rwdata	00000020 lc_message_charset
020128fc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02012220 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02009b78 l     F .text	000000fc __sprint_r.part.0
02012344 l     O .rodata	00000010 zeroes.4349
0200b1b4 l     F .text	000000bc __sbprintf
02012354 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200f1fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200f310 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200f33c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200f430 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200f518 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200f604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0200f7e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02013f74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200fa84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200fbc0 l     F .text	00000034 alt_dev_reg
02012ee4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200fe9c l     F .text	0000020c altera_avalon_jtag_uart_irq
020100a8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02010984 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02010de4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02010f44 l     F .text	0000003c alt_get_errno
02010f80 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02015aa8 g     O .bss	00000004 alt_instruction_exception_handler
020091bc g     F .text	00000074 _mprec_log10
020092a8 g     F .text	0000008c __any_on
0200b768 g     F .text	00000054 _isatty_r
0201222c g     O .rodata	00000028 __mprec_tinytens
0200f71c g     F .text	0000007c alt_main
02002328 g     F .text	000000c0 _puts_r
02015ad4 g     O .bss	00000100 alt_irq
0200b7bc g     F .text	00000060 _lseek_r
02013f84 g       *ABS*	00000000 __flash_rwdata_start
0200dbd4 g     F .text	00000088 .hidden __eqdf2
02015bd4 g       *ABS*	00000000 __alt_heap_start
020022ec g     F .text	0000003c printf
0200b9d4 g     F .text	0000009c _wcrtomb_r
02009a38 g     F .text	0000005c __sseek
02006854 g     F .text	00000010 __sinit
0200b87c g     F .text	00000140 __swbuf_r
02007328 g     F .text	0000007c _setlocale_r
020066ac g     F .text	00000078 __sfmoreglue
0200f7bc g     F .text	00000024 __malloc_unlock
020021bc g     F .text	00000080 UsbGetRetryCnt
02007ff8 g     F .text	0000015c memmove
0200026c g     F .text	00000088 IO_init
0200683c g     F .text	00000018 _cleanup
0200827c g     F .text	000000a8 _Balloc
0200dc5c g     F .text	000000dc .hidden __gtdf2
0201136c g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
0200b70c g     F .text	0000005c _fstat_r
02015a8c g     O .bss	00000004 errno
020099b4 g     F .text	00000008 __seofread
02015a94 g     O .bss	00000004 alt_argv
0201bf44 g       *ABS*	00000000 _gp
0200fa54 g     F .text	00000030 usleep
02012d64 g     O .rwdata	00000180 alt_fd_list
02011390 g     F .text	00000090 alt_find_dev
02007eb0 g     F .text	00000148 memcpy
020064fc g     F .text	0000000c _cleanup_r
0200f014 g     F .text	000000dc .hidden __floatsidf
02010ec8 g     F .text	0000007c alt_io_redirect
0200dd38 g     F .text	000000f4 .hidden __ltdf2
02011a1c g       *ABS*	00000000 __DTOR_END__
020023e8 g     F .text	00000014 puts
020115ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
02009898 g     F .text	00000074 __fpclassifyd
02009118 g     F .text	000000a4 __ratio
0200b198 g     F .text	0000001c __vfiprintf_internal
020102a0 g     F .text	0000021c altera_avalon_jtag_uart_read
020022bc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0200c874 g     F .text	00000064 .hidden __udivsi3
0200f46c g     F .text	000000ac isatty
0201227c g     O .rodata	000000c8 __mprec_tens
020073a4 g     F .text	0000000c __locale_charset
02015a88 g     O .bss	00000004 __malloc_top_pad
02001848 g     F .text	00000268 UsbGetConfigDesc2
02013f4c g     O .rwdata	00000004 __mb_cur_max
020073d4 g     F .text	0000000c _localeconv_r
020086b0 g     F .text	0000003c __i2b
02006cd8 g     F .text	000004c8 __sfvwrite_r
0200990c g     F .text	00000054 _sbrk_r
0200b81c g     F .text	00000060 _read_r
02013f6c g     O .rwdata	00000004 alt_max_fd
0200b400 g     F .text	000000f0 _fclose_r
020064c4 g     F .text	00000030 fflush
02015a84 g     O .bss	00000004 __malloc_max_sbrked_mem
0200c958 g     F .text	000008ac .hidden __adddf3
02008ec0 g     F .text	0000010c __b2d
0200c1b8 g     F .text	000005c4 .hidden __umoddi3
0200f640 g     F .text	000000dc lseek
02013f44 g     O .rwdata	00000004 _global_impure_ptr
02009334 g     F .text	00000564 _realloc_r
02015bd4 g       *ABS*	00000000 __bss_end
02010cf4 g     F .text	000000f0 alt_iic_isr_register
02011264 g     F .text	00000108 alt_tick
0200bbbc g     F .text	000005fc .hidden __udivdi3
0200b668 g     F .text	00000024 _fputwc_r
02012254 g     O .rodata	00000028 __mprec_bigtens
02008494 g     F .text	00000104 __s2b
0200f0f0 g     F .text	000000a8 .hidden __floatunsidf
02008c00 g     F .text	00000060 __mcmp
02001298 g     F .text	00000100 UsbSetAddress
02006874 g     F .text	00000018 __fp_lock_all
02010ca8 g     F .text	0000004c alt_ic_irq_enabled
020111c8 g     F .text	0000009c alt_alarm_stop
02015a9c g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d4 alt_irq_handler
02012d3c g     O .rwdata	00000028 alt_dev_null
02010964 g     F .text	00000020 alt_dcache_flush_all
02008598 g     F .text	00000068 __hi0bits
02000364 g     F .text	00000068 IO_read
0200ef94 g     F .text	00000080 .hidden __fixdfsi
02013f84 g       *ABS*	00000000 __ram_rwdata_end
02013f64 g     O .rwdata	00000008 alt_dev_list
0200fac0 g     F .text	00000100 write
02012498 g       *ABS*	00000000 __ram_rodata_end
0200f378 g     F .text	000000b8 fstat
0200dd38 g     F .text	000000f4 .hidden __ledf2
0200223c g     F .text	00000080 UsbPrintMem
02008978 g     F .text	00000140 __pow5mult
02009c8c g     F .text	0000150c ___vfiprintf_internal_r
02015a7c g     O .bss	00000004 __nlocale_changed
0200c8d8 g     F .text	00000058 .hidden __umodsi3
02015bd4 g       *ABS*	00000000 end
0200fddc g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
02011a1c g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
0200f198 g     F .text	00000064 .hidden __clzsi2
020104bc g     F .text	00000224 altera_avalon_jtag_uart_write
02006864 g     F .text	00000004 __sfp_lock_acquire
02007dcc g     F .text	000000e4 memchr
02002494 g     F .text	000022dc ___vfprintf_internal_r
02001bb0 g     F .text	00000100 UsbClassRequest
020069c8 g     F .text	00000310 _free_r
020073b0 g     F .text	00000010 __locale_mb_cur_max
02011868 g     F .text	00000180 __call_exitprocs
02015a78 g     O .bss	00000004 __mlocale_changed
02013f50 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
02015aa0 g     O .bss	00000004 _alt_tick_rate
02008ab8 g     F .text	00000148 __lshift
02015aa4 g     O .bss	00000004 _alt_nticks
0200f81c g     F .text	00000104 read
0200fc2c g     F .text	0000004c alt_sys_init
02011750 g     F .text	00000118 __register_exitproc
020086ec g     F .text	0000028c __multiply
02010148 g     F .text	00000068 altera_avalon_jtag_uart_close
0200c930 g     F .text	00000028 .hidden __mulsi3
02012498 g       *ABS*	00000000 __ram_rwdata_start
02011a1c g       *ABS*	00000000 __ram_rodata_start
02015aac g     O .bss	00000028 __malloc_current_mallinfo
02008fcc g     F .text	0000014c __d2b
02001398 g     F .text	00000148 UsbGetDeviceDesc1
0200fc78 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02011528 g     F .text	000000c4 alt_get_fd
0201080c g     F .text	00000158 alt_busy_sleep
0200b2d0 g     F .text	00000054 _close_r
020116d4 g     F .text	0000007c memcmp
0200fd38 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02015bd4 g       *ABS*	00000000 __alt_stack_base
0200fd88 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02004848 g     F .text	00000154 __swsetup_r
0200d204 g     F .text	000009d0 .hidden __divdf3
02006724 g     F .text	00000118 __sfp
02009230 g     F .text	00000078 __copybits
02012934 g     O .rwdata	00000408 __malloc_av_
02006870 g     F .text	00000004 __sinit_lock_release
0200de2c g     F .text	0000086c .hidden __muldf3
02009960 g     F .text	00000054 __sread
02002138 g     F .text	00000084 UsbWaitTDListDone
02011420 g     F .text	00000108 alt_find_file
020109c0 g     F .text	000000a4 alt_dev_llist_insert
0200f798 g     F .text	00000024 __malloc_lock
0200f9a4 g     F .text	000000b0 sbrk
02006468 g     F .text	0000005c _fflush_r
0200b324 g     F .text	000000dc _calloc_r
02015a70 g       *ABS*	00000000 __bss_start
02008154 g     F .text	00000128 memset
020003cc g     F .text	00000d7c main
02015a98 g     O .bss	00000004 alt_envp
02015a80 g     O .bss	00000004 __malloc_max_total_mem
0200fcd8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02001ab0 g     F .text	00000100 UsbSetConfig
0200b9bc g     F .text	00000018 __swbuf
02009a94 g     F .text	00000008 __sclose
03000000 g       *ABS*	00000000 __alt_heap_limit
0200b4f0 g     F .text	00000014 fclose
02004bc4 g     F .text	00001688 _dtoa_r
020075c0 g     F .text	0000080c _malloc_r
0200bb30 g     F .text	00000030 __ascii_wctomb
02013f70 g     O .rwdata	00000004 alt_errno
020071a0 g     F .text	000000c4 _fwalk
0200c77c g     F .text	00000084 .hidden __divsi3
020068a4 g     F .text	00000124 _malloc_trim_r
02001cb0 g     F .text	00000148 UsbGetHidDesc
02011a1c g       *ABS*	00000000 __CTOR_END__
02009a9c g     F .text	000000dc strcmp
02011a1c g       *ABS*	00000000 __flash_rodata_start
02011a1c g       *ABS*	00000000 __DTOR_LIST__
0200dbd4 g     F .text	00000088 .hidden __nedf2
020011a0 g     F .text	00000044 UsbRead
0200fbf4 g     F .text	00000038 alt_irq_init
0200f920 g     F .text	00000084 alt_release_fd
02012364 g     O .rodata	00000100 .hidden __clz_tab
02015a74 g     O .bss	00000004 _PathLocale
02011688 g     F .text	00000014 atexit
0200b270 g     F .text	00000060 _write_r
020073e0 g     F .text	00000018 setlocale
02013f48 g     O .rwdata	00000004 _impure_ptr
02015a90 g     O .bss	00000004 alt_argc
0200624c g     F .text	0000021c __sflush_r
02010ac4 g     F .text	00000060 _do_dtors
020073cc g     F .text	00000008 __locale_cjk_lang
02000020 g       .exceptions	00000000 alt_irq_entry
02008e5c g     F .text	00000064 __ulp
0200688c g     F .text	00000018 __fp_unlock_all
02013f5c g     O .rwdata	00000008 alt_fs_list
02001df8 g     F .text	00000340 UsbGetReportDesc
02000020 g       *ABS*	00000000 __ram_exceptions_start
020073f8 g     F .text	0000000c localeconv
02010b44 g     F .text	00000050 alt_ic_isr_register
02013f84 g       *ABS*	00000000 _edata
02015bd4 g       *ABS*	00000000 _end
02001148 g     F .text	00000058 UsbWrite
0200b504 g     F .text	00000164 __fputwc
02000230 g       *ABS*	00000000 __ram_exceptions_end
020101b0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02010c1c g     F .text	0000008c alt_ic_irq_disable
020099bc g     F .text	0000007c __swrite
02013f54 g     O .rwdata	00000004 __malloc_trim_threshold
020073c0 g     F .text	0000000c __locale_msgcharset
0201169c g     F .text	00000038 exit
02007264 g     F .text	000000c4 _fwalk_reent
02008c60 g     F .text	000001fc __mdiff
0200c800 g     F .text	00000074 .hidden __modsi3
03000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02006868 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
020002f4 g     F .text	00000070 IO_write
020119e8 g     F .text	00000034 _exit
020106e0 g     F .text	0000012c alt_alarm_start
02007404 g     F .text	000001bc __smakebuf_r
020023fc g     F .text	00000098 strlen
0201106c g     F .text	0000015c open
0200dc5c g     F .text	000000dc .hidden __gedf2
02013f58 g     O .rwdata	00000004 __wctomb
02009c74 g     F .text	00000018 __sprint_r
02010b24 g     F .text	00000020 alt_icache_flush_all
02013f78 g     O .rwdata	00000004 alt_priority_mask
02010b94 g     F .text	00000088 alt_ic_irq_enable
02004770 g     F .text	0000001c __vfprintf_internal
0200bb60 g     F .text	0000005c _wctomb_r
0200e698 g     F .text	000008fc .hidden __subdf3
02008600 g     F .text	000000b0 __lo0bits
020016b8 g     F .text	00000190 UsbGetConfigDesc1
02013f7c g     O .rwdata	00000008 alt_alarm_list
02010a64 g     F .text	00000060 _do_ctors
020011e4 g     F .text	000000b4 UsbSoftReset
0200ba70 g     F .text	000000c0 wcrtomb
0200f238 g     F .text	000000d8 close
020014e0 g     F .text	000001d8 UsbGetDeviceDesc2
0200f580 g     F .text	00000084 alt_load
0200b68c g     F .text	00000080 fputwc
0200686c g     F .text	00000004 __sinit_lock_acquire
0200834c g     F .text	00000148 __multadd
02008324 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808074 	movhi	r2,513
 2000140:	1096b504 	addi	r2,r2,23252
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	1096b504 	addi	r2,r2,23252
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a6d917 	ldw	r2,-25756(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a6d917 	ldw	r2,-25756(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200023c:	d6afd114 	ori	gp,gp,48964
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10969c14 	ori	r2,r2,23152

    movhi r3, %hi(__bss_end)
 2000248:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 200024c:	18d6f514 	ori	r3,r3,23508

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <__alt_data_end+0xff000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	200f5800 	call	200f580 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	200f71c0 	call	200f71c <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <__alt_data_end+0xff000268>

0200026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 200026c:	deffff04 	addi	sp,sp,-4
 2000270:	df000015 	stw	fp,0(sp)
 2000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 2000278:	00802004 	movi	r2,128
 200027c:	00c00044 	movi	r3,1
 2000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 2000284:	00801c04 	movi	r2,112
 2000288:	00c00044 	movi	r3,1
 200028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 2000290:	00800c04 	movi	r2,48
 2000294:	00c00044 	movi	r3,1
 2000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 200029c:	00801804 	movi	r2,96
 20002a0:	00c00044 	movi	r3,1
 20002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 20002a8:	00801404 	movi	r2,80
 20002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 20002b0:	00800804 	movi	r2,32
 20002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 20002b8:	00801c04 	movi	r2,112
 20002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 20002c0:	00802004 	movi	r2,128
 20002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 20002c8:	00802004 	movi	r2,128
 20002cc:	00c00044 	movi	r3,1
 20002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 20002d4:	00801c04 	movi	r2,112
 20002d8:	00c00044 	movi	r3,1
 20002dc:	10c00005 	stb	r3,0(r2)
}
 20002e0:	0001883a 	nop
 20002e4:	e037883a 	mov	sp,fp
 20002e8:	df000017 	ldw	fp,0(sp)
 20002ec:	dec00104 	addi	sp,sp,4
 20002f0:	f800283a 	ret

020002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 20002f4:	defffd04 	addi	sp,sp,-12
 20002f8:	df000215 	stw	fp,8(sp)
 20002fc:	df000204 	addi	fp,sp,8
 2000300:	2007883a 	mov	r3,r4
 2000304:	2805883a 	mov	r2,r5
 2000308:	e0fffe05 	stb	r3,-8(fp)
 200030c:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
// waveform of write
*otg_hpi_data = Data;
 2000310:	00800804 	movi	r2,32
 2000314:	e0ffff0b 	ldhu	r3,-4(fp)
 2000318:	10c00015 	stw	r3,0(r2)
*otg_hpi_address = Address; // NOT SURE: OFFESET?
 200031c:	00801404 	movi	r2,80
 2000320:	e0fffe03 	ldbu	r3,-8(fp)
 2000324:	10c00015 	stw	r3,0(r2)
*otg_hpi_cs = 0;
 2000328:	00801c04 	movi	r2,112
 200032c:	10000005 	stb	zero,0(r2)
*otg_hpi_w = 0;
 2000330:	00801804 	movi	r2,96
 2000334:	10000005 	stb	zero,0(r2)
// write Complete
*otg_hpi_w = 1;
 2000338:	00801804 	movi	r2,96
 200033c:	00c00044 	movi	r3,1
 2000340:	10c00005 	stb	r3,0(r2)
*otg_hpi_cs = 1;
 2000344:	00801c04 	movi	r2,112
 2000348:	00c00044 	movi	r3,1
 200034c:	10c00005 	stb	r3,0(r2)
// closed

}
 2000350:	0001883a 	nop
 2000354:	e037883a 	mov	sp,fp
 2000358:	df000017 	ldw	fp,0(sp)
 200035c:	dec00104 	addi	sp,sp,4
 2000360:	f800283a 	ret

02000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 2000364:	defffd04 	addi	sp,sp,-12
 2000368:	df000215 	stw	fp,8(sp)
 200036c:	df000204 	addi	fp,sp,8
 2000370:	2005883a 	mov	r2,r4
 2000374:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
 2000378:	00801404 	movi	r2,80
 200037c:	e0ffff03 	ldbu	r3,-4(fp)
 2000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
 2000384:	00801c04 	movi	r2,112
 2000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
 200038c:	00800c04 	movi	r2,48
 2000390:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1; // order: not sure
 2000394:	00800c04 	movi	r2,48
 2000398:	00c00044 	movi	r3,1
 200039c:	10c00005 	stb	r3,0(r2)
	temp = *otg_hpi_data; // Order: not sure
 20003a0:	00800804 	movi	r2,32
 20003a4:	10800017 	ldw	r2,0(r2)
 20003a8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_cs = 1;
 20003ac:	00801c04 	movi	r2,112
 20003b0:	00c00044 	movi	r3,1
 20003b4:	10c00005 	stb	r3,0(r2)
	return temp;
 20003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 20003bc:	e037883a 	mov	sp,fp
 20003c0:	df000017 	ldw	fp,0(sp)
 20003c4:	dec00104 	addi	sp,sp,4
 20003c8:	f800283a 	ret

020003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 20003cc:	defff904 	addi	sp,sp,-28
 20003d0:	dfc00615 	stw	ra,24(sp)
 20003d4:	df000515 	stw	fp,20(sp)
 20003d8:	df000504 	addi	fp,sp,20
	IO_init();
 20003dc:	200026c0 	call	200026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 20003e0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 20003e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 20003e8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 20003ec:	01008074 	movhi	r4,513
 20003f0:	21068704 	addi	r4,r4,6684
 20003f4:	20023e80 	call	20023e8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 20003f8:	20011e40 	call	20011e4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 20003fc:	000b883a 	mov	r5,zero
 2000400:	01005104 	movi	r4,324
 2000404:	20011480 	call	2001148 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 2000408:	017fffd4 	movui	r5,65535
 200040c:	01302414 	movui	r4,49296
 2000410:	20011480 	call	2001148 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 2000414:	01409604 	movi	r5,600
 2000418:	01006d04 	movi	r4,436
 200041c:	20011480 	call	2001148 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 2000420:	00811004 	movi	r2,1088
 2000424:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 2000428:	e0bffb0b 	ldhu	r2,-20(fp)
 200042c:	100b883a 	mov	r5,r2
 2000430:	01005084 	movi	r4,322
 2000434:	20011480 	call	2001148 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 2000438:	00808404 	movi	r2,528
 200043c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 2000440:	e0bffe0b 	ldhu	r2,-8(fp)
 2000444:	100b883a 	mov	r5,r2
 2000448:	01302314 	movui	r4,49292
 200044c:	20011480 	call	2001148 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 2000450:	000b883a 	mov	r5,zero
 2000454:	01007104 	movi	r4,452
 2000458:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 200045c:	000b883a 	mov	r5,zero
 2000460:	01007184 	movi	r4,454
 2000464:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 2000468:	000b883a 	mov	r5,zero
 200046c:	01007204 	movi	r4,456
 2000470:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 2000474:	000b883a 	mov	r5,zero
 2000478:	01007284 	movi	r4,458
 200047c:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 2000480:	000b883a 	mov	r5,zero
 2000484:	01007304 	movi	r4,460
 2000488:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 200048c:	000b883a 	mov	r5,zero
 2000490:	01007384 	movi	r4,462
 2000494:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 2000498:	000b883a 	mov	r5,zero
 200049c:	01007404 	movi	r4,464
 20004a0:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 20004a4:	000b883a 	mov	r5,zero
 20004a8:	01007484 	movi	r4,466
 20004ac:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 20004b0:	000b883a 	mov	r5,zero
 20004b4:	01007504 	movi	r4,468
 20004b8:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 20004bc:	000b883a 	mov	r5,zero
 20004c0:	01007584 	movi	r4,470
 20004c4:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 20004c8:	000b883a 	mov	r5,zero
 20004cc:	01007604 	movi	r4,472
 20004d0:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 20004d4:	000b883a 	mov	r5,zero
 20004d8:	01007684 	movi	r4,474
 20004dc:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 20004e0:	000b883a 	mov	r5,zero
 20004e4:	01007704 	movi	r4,476
 20004e8:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 20004ec:	000b883a 	mov	r5,zero
 20004f0:	01007784 	movi	r4,478
 20004f4:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 20004f8:	01401c84 	movi	r5,114
 20004fc:	01007084 	movi	r4,450
 2000500:	20011480 	call	2001148 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 2000504:	01738054 	movui	r5,52737
 2000508:	01000044 	movi	r4,1
 200050c:	20002f40 	call	20002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 2000510:	0001883a 	nop
 2000514:	010000c4 	movi	r4,3
 2000518:	20003640 	call	2000364 <IO_read>
 200051c:	10bfffcc 	andi	r2,r2,65535
 2000520:	103ffc26 	beq	r2,zero,2000514 <__alt_data_end+0xff000514>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 2000524:	00000806 	br	2000548 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 2000528:	01000044 	movi	r4,1
 200052c:	20003640 	call	2000364 <IO_read>
 2000530:	10bfffcc 	andi	r2,r2,65535
 2000534:	100b883a 	mov	r5,r2
 2000538:	01008074 	movhi	r4,513
 200053c:	21068d04 	addi	r4,r4,6708
 2000540:	20022ec0 	call	20022ec <printf>
		goto USB_HOT_PLUG;
 2000544:	003fac06 	br	20003f8 <__alt_data_end+0xff0003f8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 2000548:	01000044 	movi	r4,1
 200054c:	20003640 	call	2000364 <IO_read>
 2000550:	10bfffcc 	andi	r2,r2,65535
 2000554:	1083fb58 	cmpnei	r2,r2,4077
 2000558:	103ff31e 	bne	r2,zero,2000528 <__alt_data_end+0xff000528>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 200055c:	01008074 	movhi	r4,513
 2000560:	21069604 	addi	r4,r4,6744
 2000564:	20022ec0 	call	20022ec <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 2000568:	01401d04 	movi	r5,116
 200056c:	01007084 	movi	r4,450
 2000570:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 2000574:	01400f04 	movi	r5,60
 2000578:	01007104 	movi	r4,452
 200057c:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 2000580:	000b883a 	mov	r5,zero
 2000584:	01007184 	movi	r4,454
 2000588:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 200058c:	000b883a 	mov	r5,zero
 2000590:	01007204 	movi	r4,456
 2000594:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 2000598:	000b883a 	mov	r5,zero
 200059c:	01007284 	movi	r4,458
 20005a0:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 20005a4:	000b883a 	mov	r5,zero
 20005a8:	01007304 	movi	r4,460
 20005ac:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 20005b0:	000b883a 	mov	r5,zero
 20005b4:	01007384 	movi	r4,462
 20005b8:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 20005bc:	000b883a 	mov	r5,zero
 20005c0:	01007404 	movi	r4,464
 20005c4:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 20005c8:	000b883a 	mov	r5,zero
 20005cc:	01007484 	movi	r4,466
 20005d0:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 20005d4:	000b883a 	mov	r5,zero
 20005d8:	01007504 	movi	r4,468
 20005dc:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 20005e0:	000b883a 	mov	r5,zero
 20005e4:	01007584 	movi	r4,470
 20005e8:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 20005ec:	000b883a 	mov	r5,zero
 20005f0:	01007604 	movi	r4,472
 20005f4:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 20005f8:	000b883a 	mov	r5,zero
 20005fc:	01007684 	movi	r4,474
 2000600:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 2000604:	000b883a 	mov	r5,zero
 2000608:	01007704 	movi	r4,476
 200060c:	20011480 	call	2001148 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 2000610:	000b883a 	mov	r5,zero
 2000614:	01007784 	movi	r4,478
 2000618:	20011480 	call	2001148 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 200061c:	01738054 	movui	r5,52737
 2000620:	01000044 	movi	r4,1
 2000624:	20002f40 	call	20002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 2000628:	0001883a 	nop
 200062c:	01000044 	movi	r4,1
 2000630:	20003640 	call	2000364 <IO_read>
 2000634:	10bfffcc 	andi	r2,r2,65535
 2000638:	1083fb58 	cmpnei	r2,r2,4077
 200063c:	10000826 	beq	r2,zero,2000660 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 2000640:	01000044 	movi	r4,1
 2000644:	20003640 	call	2000364 <IO_read>
 2000648:	10bfffcc 	andi	r2,r2,65535
 200064c:	100b883a 	mov	r5,r2
 2000650:	01008074 	movhi	r4,513
 2000654:	21068d04 	addi	r4,r4,6708
 2000658:	20022ec0 	call	20022ec <printf>
		goto USB_HOT_PLUG;
 200065c:	003f6606 	br	20003f8 <__alt_data_end+0xff0003f8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 2000660:	00b02284 	movi	r2,-16246
 2000664:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 2000668:	008c0004 	movi	r2,12288
 200066c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 2000670:	00880004 	movi	r2,8192
 2000674:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 2000678:	d0a6cb0b 	ldhu	r2,-25812(gp)
 200067c:	10bfffcc 	andi	r2,r2,65535
 2000680:	1009883a 	mov	r4,r2
 2000684:	20011a00 	call	20011a0 <UsbRead>
 2000688:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 200068c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2000690:	e0fffb0b 	ldhu	r3,-20(fp)
 2000694:	1884703a 	and	r2,r3,r2
 2000698:	10bfffcc 	andi	r2,r2,65535
 200069c:	1000351e 	bne	r2,zero,2000774 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 20006a0:	e03ffbc5 	stb	zero,-17(fp)
 20006a4:	00000f06 	br	20006e4 <main+0x318>
		{
			usleep(5*1000);
 20006a8:	0104e204 	movi	r4,5000
 20006ac:	200fa540 	call	200fa54 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 20006b0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 20006b4:	10bfffcc 	andi	r2,r2,65535
 20006b8:	1009883a 	mov	r4,r2
 20006bc:	20011a00 	call	20011a0 <UsbRead>
 20006c0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 20006c4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 20006c8:	e0fffb0b 	ldhu	r3,-20(fp)
 20006cc:	1884703a 	and	r2,r3,r2
 20006d0:	10bfffcc 	andi	r2,r2,65535
 20006d4:	1000071e 	bne	r2,zero,20006f4 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 20006d8:	e0bffbc3 	ldbu	r2,-17(fp)
 20006dc:	10800044 	addi	r2,r2,1
 20006e0:	e0bffbc5 	stb	r2,-17(fp)
 20006e4:	e0bffbc3 	ldbu	r2,-17(fp)
 20006e8:	10800170 	cmpltui	r2,r2,5
 20006ec:	103fee1e 	bne	r2,zero,20006a8 <__alt_data_end+0xff0006a8>
 20006f0:	00000106 	br	20006f8 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
 20006f4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 20006f8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 20006fc:	e0fffb0b 	ldhu	r3,-20(fp)
 2000700:	1884703a 	and	r2,r3,r2
 2000704:	10bfffcc 	andi	r2,r2,65535
 2000708:	1000261e 	bne	r2,zero,20007a4 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 200070c:	01008074 	movhi	r4,513
 2000710:	21069a04 	addi	r4,r4,6760
 2000714:	20023e80 	call	20023e8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 2000718:	01008074 	movhi	r4,513
 200071c:	2106a404 	addi	r4,r4,6800
 2000720:	20023e80 	call	20023e8 <puts>
			while (!(usb_ctl_val & no_device))
 2000724:	00000d06 	br	200075c <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 2000728:	d0a6cb0b 	ldhu	r2,-25812(gp)
 200072c:	10bfffcc 	andi	r2,r2,65535
 2000730:	1009883a 	mov	r4,r2
 2000734:	20011a00 	call	20011a0 <UsbRead>
 2000738:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 200073c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2000740:	e0fffb0b 	ldhu	r3,-20(fp)
 2000744:	1884703a 	and	r2,r3,r2
 2000748:	10bfffcc 	andi	r2,r2,65535
 200074c:	10000126 	beq	r2,zero,2000754 <main+0x388>
					goto USB_HOT_PLUG;
 2000750:	003f2906 	br	20003f8 <__alt_data_end+0xff0003f8>

				usleep(2000);
 2000754:	0101f404 	movi	r4,2000
 2000758:	200fa540 	call	200fa54 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 200075c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2000760:	e0fffb0b 	ldhu	r3,-20(fp)
 2000764:	1884703a 	and	r2,r3,r2
 2000768:	10bfffcc 	andi	r2,r2,65535
 200076c:	103fee26 	beq	r2,zero,2000728 <__alt_data_end+0xff000728>
 2000770:	00000c06 	br	20007a4 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 2000774:	e0fffb0b 	ldhu	r3,-20(fp)
 2000778:	e0bffc0b 	ldhu	r2,-16(fp)
 200077c:	1884703a 	and	r2,r3,r2
 2000780:	10bfffcc 	andi	r2,r2,65535
 2000784:	10000426 	beq	r2,zero,2000798 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
 2000788:	01008074 	movhi	r4,513
 200078c:	2106b004 	addi	r4,r4,6848
 2000790:	20023e80 	call	20023e8 <puts>
 2000794:	00000306 	br	20007a4 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 2000798:	01008074 	movhi	r4,513
 200079c:	2106b704 	addi	r4,r4,6876
 20007a0:	20023e80 	call	20023e8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 20007a4:	20012980 	call	2001298 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 20007a8:	00000306 	br	20007b8 <main+0x3ec>
	{
		UsbSetAddress();
 20007ac:	20012980 	call	2001298 <UsbSetAddress>
		usleep(10*1000);
 20007b0:	0109c404 	movi	r4,10000
 20007b4:	200fa540 	call	200fa54 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 20007b8:	010000c4 	movi	r4,3
 20007bc:	20003640 	call	2000364 <IO_read>
 20007c0:	10bfffcc 	andi	r2,r2,65535
 20007c4:	1080040c 	andi	r2,r2,16
 20007c8:	103ff826 	beq	r2,zero,20007ac <__alt_data_end+0xff0007ac>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 20007cc:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 20007d0:	01414184 	movi	r5,1286
 20007d4:	01000084 	movi	r4,2
 20007d8:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 20007dc:	0009883a 	mov	r4,zero
 20007e0:	20003640 	call	2000364 <IO_read>
 20007e4:	10bfffcc 	andi	r2,r2,65535
 20007e8:	100b883a 	mov	r5,r2
 20007ec:	01008074 	movhi	r4,513
 20007f0:	2106be04 	addi	r4,r4,6904
 20007f4:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508); // n
 20007f8:	01414204 	movi	r5,1288
 20007fc:	01000084 	movi	r4,2
 2000800:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2000804:	0009883a 	mov	r4,zero
 2000808:	20003640 	call	2000364 <IO_read>
 200080c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 2000810:	e0bffb0b 	ldhu	r2,-20(fp)
 2000814:	100b883a 	mov	r5,r2
 2000818:	01008074 	movhi	r4,513
 200081c:	2106c904 	addi	r4,r4,6948
 2000820:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 2000824:	e0bffb0b 	ldhu	r2,-20(fp)
 2000828:	108000e0 	cmpeqi	r2,r2,3
 200082c:	1000031e 	bne	r2,zero,200083c <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000830:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000834:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 2000838:	003eef06 	br	20003f8 <__alt_data_end+0xff0003f8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 200083c:	01008074 	movhi	r4,513
 2000840:	2106d504 	addi	r4,r4,6996
 2000844:	20023e80 	call	20023e8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 2000848:	20013980 	call	2001398 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 200084c:	00000306 	br	200085c <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 2000850:	20013980 	call	2001398 <UsbGetDeviceDesc1>
		usleep(10*1000);
 2000854:	0109c404 	movi	r4,10000
 2000858:	200fa540 	call	200fa54 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 200085c:	010000c4 	movi	r4,3
 2000860:	20003640 	call	2000364 <IO_read>
 2000864:	10bfffcc 	andi	r2,r2,65535
 2000868:	1080040c 	andi	r2,r2,16
 200086c:	103ff826 	beq	r2,zero,2000850 <__alt_data_end+0xff000850>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000870:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000874:	01414184 	movi	r5,1286
 2000878:	01000084 	movi	r4,2
 200087c:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000880:	0009883a 	mov	r4,zero
 2000884:	20003640 	call	2000364 <IO_read>
 2000888:	10bfffcc 	andi	r2,r2,65535
 200088c:	100b883a 	mov	r5,r2
 2000890:	01008074 	movhi	r4,513
 2000894:	2106e404 	addi	r4,r4,7056
 2000898:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 200089c:	01414204 	movi	r5,1288
 20008a0:	01000084 	movi	r4,2
 20008a4:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 20008a8:	0009883a 	mov	r4,zero
 20008ac:	20003640 	call	2000364 <IO_read>
 20008b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 20008b4:	e0bffb0b 	ldhu	r2,-20(fp)
 20008b8:	100b883a 	mov	r5,r2
 20008bc:	01008074 	movhi	r4,513
 20008c0:	2106ef04 	addi	r4,r4,7100
 20008c4:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 20008c8:	00000206 	br	20008d4 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
 20008cc:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 20008d0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 20008d4:	e0bffb0b 	ldhu	r2,-20(fp)
 20008d8:	108000d8 	cmpnei	r2,r2,3
 20008dc:	103ffb1e 	bne	r2,zero,20008cc <__alt_data_end+0xff0008cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 20008e0:	01008074 	movhi	r4,513
 20008e4:	2106fb04 	addi	r4,r4,7148
 20008e8:	20023e80 	call	20023e8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 20008ec:	20014e00 	call	20014e0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 20008f0:	00000306 	br	2000900 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 20008f4:	20014e00 	call	20014e0 <UsbGetDeviceDesc2>
		usleep(10*1000);
 20008f8:	0109c404 	movi	r4,10000
 20008fc:	200fa540 	call	200fa54 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000900:	010000c4 	movi	r4,3
 2000904:	20003640 	call	2000364 <IO_read>
 2000908:	10bfffcc 	andi	r2,r2,65535
 200090c:	1080040c 	andi	r2,r2,16
 2000910:	103ff826 	beq	r2,zero,20008f4 <__alt_data_end+0xff0008f4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000914:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000918:	01414184 	movi	r5,1286
 200091c:	01000084 	movi	r4,2
 2000920:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000924:	0009883a 	mov	r4,zero
 2000928:	20003640 	call	2000364 <IO_read>
 200092c:	10bfffcc 	andi	r2,r2,65535
 2000930:	100b883a 	mov	r5,r2
 2000934:	01008074 	movhi	r4,513
 2000938:	2106e404 	addi	r4,r4,7056
 200093c:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 2000940:	01414204 	movi	r5,1288
 2000944:	01000084 	movi	r4,2
 2000948:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 200094c:	0009883a 	mov	r4,zero
 2000950:	20003640 	call	2000364 <IO_read>
 2000954:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 2000958:	e0bffb0b 	ldhu	r2,-20(fp)
 200095c:	100b883a 	mov	r5,r2
 2000960:	01008074 	movhi	r4,513
 2000964:	2106ef04 	addi	r4,r4,7100
 2000968:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 200096c:	00000206 	br	2000978 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000970:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000974:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000978:	e0bffb0b 	ldhu	r2,-20(fp)
 200097c:	108000d8 	cmpnei	r2,r2,3
 2000980:	103ffb1e 	bne	r2,zero,2000970 <__alt_data_end+0xff000970>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 2000984:	01008074 	movhi	r4,513
 2000988:	21070f04 	addi	r4,r4,7228
 200098c:	20023e80 	call	20023e8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 2000990:	20016b80 	call	20016b8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000994:	00000306 	br	20009a4 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 2000998:	20016b80 	call	20016b8 <UsbGetConfigDesc1>
		usleep(10*1000);
 200099c:	0109c404 	movi	r4,10000
 20009a0:	200fa540 	call	200fa54 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 20009a4:	010000c4 	movi	r4,3
 20009a8:	20003640 	call	2000364 <IO_read>
 20009ac:	10bfffcc 	andi	r2,r2,65535
 20009b0:	1080040c 	andi	r2,r2,16
 20009b4:	103ff826 	beq	r2,zero,2000998 <__alt_data_end+0xff000998>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 20009b8:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 20009bc:	01414184 	movi	r5,1286
 20009c0:	01000084 	movi	r4,2
 20009c4:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 20009c8:	0009883a 	mov	r4,zero
 20009cc:	20003640 	call	2000364 <IO_read>
 20009d0:	10bfffcc 	andi	r2,r2,65535
 20009d4:	100b883a 	mov	r5,r2
 20009d8:	01008074 	movhi	r4,513
 20009dc:	21072104 	addi	r4,r4,7300
 20009e0:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 20009e4:	01414204 	movi	r5,1288
 20009e8:	01000084 	movi	r4,2
 20009ec:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 20009f0:	0009883a 	mov	r4,zero
 20009f4:	20003640 	call	2000364 <IO_read>
 20009f8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 20009fc:	e0bffb0b 	ldhu	r2,-20(fp)
 2000a00:	100b883a 	mov	r5,r2
 2000a04:	01008074 	movhi	r4,513
 2000a08:	21072c04 	addi	r4,r4,7344
 2000a0c:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 2000a10:	00000206 	br	2000a1c <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000a14:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000a18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000a1c:	e0bffb0b 	ldhu	r2,-20(fp)
 2000a20:	108000d8 	cmpnei	r2,r2,3
 2000a24:	103ffb1e 	bne	r2,zero,2000a14 <__alt_data_end+0xff000a14>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 2000a28:	01008074 	movhi	r4,513
 2000a2c:	21073804 	addi	r4,r4,7392
 2000a30:	20023e80 	call	20023e8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 2000a34:	20018480 	call	2001848 <UsbGetConfigDesc2>

	usleep(100*1000);
 2000a38:	010000b4 	movhi	r4,2
 2000a3c:	2121a804 	addi	r4,r4,-31072
 2000a40:	200fa540 	call	200fa54 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000a44:	00000306 	br	2000a54 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 2000a48:	20018480 	call	2001848 <UsbGetConfigDesc2>
		usleep(10*1000);
 2000a4c:	0109c404 	movi	r4,10000
 2000a50:	200fa540 	call	200fa54 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000a54:	010000c4 	movi	r4,3
 2000a58:	20003640 	call	2000364 <IO_read>
 2000a5c:	10bfffcc 	andi	r2,r2,65535
 2000a60:	1080040c 	andi	r2,r2,16
 2000a64:	103ff826 	beq	r2,zero,2000a48 <__alt_data_end+0xff000a48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000a68:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000a6c:	01414184 	movi	r5,1286
 2000a70:	01000084 	movi	r4,2
 2000a74:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000a78:	0009883a 	mov	r4,zero
 2000a7c:	20003640 	call	2000364 <IO_read>
 2000a80:	10bfffcc 	andi	r2,r2,65535
 2000a84:	100b883a 	mov	r5,r2
 2000a88:	01008074 	movhi	r4,513
 2000a8c:	21074b04 	addi	r4,r4,7468
 2000a90:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 2000a94:	01414204 	movi	r5,1288
 2000a98:	01000084 	movi	r4,2
 2000a9c:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2000aa0:	0009883a 	mov	r4,zero
 2000aa4:	20003640 	call	2000364 <IO_read>
 2000aa8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 2000aac:	e0bffb0b 	ldhu	r2,-20(fp)
 2000ab0:	100b883a 	mov	r5,r2
 2000ab4:	01008074 	movhi	r4,513
 2000ab8:	21075604 	addi	r4,r4,7512
 2000abc:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 2000ac0:	00000206 	br	2000acc <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000ac4:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000ac8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000acc:	e0bffb0b 	ldhu	r2,-20(fp)
 2000ad0:	108000d8 	cmpnei	r2,r2,3
 2000ad4:	103ffb1e 	bne	r2,zero,2000ac4 <__alt_data_end+0xff000ac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 2000ad8:	01008074 	movhi	r4,513
 2000adc:	21076204 	addi	r4,r4,7560
 2000ae0:	20023e80 	call	20023e8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 2000ae4:	01415b04 	movi	r5,1388
 2000ae8:	01000084 	movi	r4,2
 2000aec:	20002f40 	call	20002f4 <IO_write>
	code = IO_read(HPI_DATA);
 2000af0:	0009883a 	mov	r4,zero
 2000af4:	20003640 	call	2000364 <IO_read>
 2000af8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 2000afc:	e0bffe8b 	ldhu	r2,-6(fp)
 2000b00:	108000cc 	andi	r2,r2,3
 2000b04:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 2000b08:	e0bffe8b 	ldhu	r2,-6(fp)
 2000b0c:	100b883a 	mov	r5,r2
 2000b10:	01008074 	movhi	r4,513
 2000b14:	21077504 	addi	r4,r4,7636
 2000b18:	20022ec0 	call	20022ec <printf>

	if (code == 0x01)
 2000b1c:	e0bffe8b 	ldhu	r2,-6(fp)
 2000b20:	10800058 	cmpnei	r2,r2,1
 2000b24:	1000041e 	bne	r2,zero,2000b38 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 2000b28:	01008074 	movhi	r4,513
 2000b2c:	21077804 	addi	r4,r4,7648
 2000b30:	20023e80 	call	20023e8 <puts>
 2000b34:	00000306 	br	2000b44 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 2000b38:	01008074 	movhi	r4,513
 2000b3c:	21078704 	addi	r4,r4,7708
 2000b40:	20023e80 	call	20023e8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 2000b44:	01415d84 	movi	r5,1398
 2000b48:	01000084 	movi	r4,2
 2000b4c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
 2000b50:	0141cfc4 	movi	r5,1855
 2000b54:	0009883a 	mov	r4,zero
 2000b58:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
 2000b5c:	01604154 	movui	r5,33029
 2000b60:	0009883a 	mov	r4,zero
 2000b64:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
 2000b68:	014000c4 	movi	r5,3
 2000b6c:	0009883a 	mov	r4,zero
 2000b70:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 2000b74:	01400204 	movi	r5,8
 2000b78:	0009883a 	mov	r4,zero
 2000b7c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 2000b80:	016b0294 	movui	r5,44042
 2000b84:	0009883a 	mov	r4,zero
 2000b88:	20002f40 	call	20002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 2000b8c:	01415d84 	movi	r5,1398
 2000b90:	01006c04 	movi	r4,432
 2000b94:	20011480 	call	2001148 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 2000b98:	01415f04 	movi	r5,1404
 2000b9c:	01000084 	movi	r4,2
 2000ba0:	20002f40 	call	20002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 2000ba4:	0009883a 	mov	r4,zero
 2000ba8:	20003640 	call	2000364 <IO_read>
 2000bac:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 2000bb0:	e0bfff03 	ldbu	r2,-4(fp)
 2000bb4:	100b883a 	mov	r5,r2
 2000bb8:	01008074 	movhi	r4,513
 2000bbc:	21079004 	addi	r4,r4,7744
 2000bc0:	20022ec0 	call	20022ec <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 2000bc4:	2001ab00 	call	2001ab0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000bc8:	00000306 	br	2000bd8 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 2000bcc:	2001ab00 	call	2001ab0 <UsbSetConfig>
		usleep(10*1000);
 2000bd0:	0109c404 	movi	r4,10000
 2000bd4:	200fa540 	call	200fa54 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000bd8:	010000c4 	movi	r4,3
 2000bdc:	20003640 	call	2000364 <IO_read>
 2000be0:	10bfffcc 	andi	r2,r2,65535
 2000be4:	1080040c 	andi	r2,r2,16
 2000be8:	103ff826 	beq	r2,zero,2000bcc <__alt_data_end+0xff000bcc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000bec:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000bf0:	01414184 	movi	r5,1286
 2000bf4:	01000084 	movi	r4,2
 2000bf8:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000bfc:	0009883a 	mov	r4,zero
 2000c00:	20003640 	call	2000364 <IO_read>
 2000c04:	10bfffcc 	andi	r2,r2,65535
 2000c08:	100b883a 	mov	r5,r2
 2000c0c:	01008074 	movhi	r4,513
 2000c10:	21079a04 	addi	r4,r4,7784
 2000c14:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 2000c18:	01414204 	movi	r5,1288
 2000c1c:	01000084 	movi	r4,2
 2000c20:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2000c24:	0009883a 	mov	r4,zero
 2000c28:	20003640 	call	2000364 <IO_read>
 2000c2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 2000c30:	e0bffb0b 	ldhu	r2,-20(fp)
 2000c34:	100b883a 	mov	r5,r2
 2000c38:	01008074 	movhi	r4,513
 2000c3c:	2107a504 	addi	r4,r4,7828
 2000c40:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 2000c44:	00000206 	br	2000c50 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000c48:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000c4c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000c50:	e0bffb0b 	ldhu	r2,-20(fp)
 2000c54:	108000d8 	cmpnei	r2,r2,3
 2000c58:	103ffb1e 	bne	r2,zero,2000c48 <__alt_data_end+0xff000c48>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 2000c5c:	01008074 	movhi	r4,513
 2000c60:	2107b104 	addi	r4,r4,7876
 2000c64:	20023e80 	call	20023e8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 2000c68:	2001bb00 	call	2001bb0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000c6c:	00000306 	br	2000c7c <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 2000c70:	2001bb00 	call	2001bb0 <UsbClassRequest>
		usleep(10*1000);
 2000c74:	0109c404 	movi	r4,10000
 2000c78:	200fa540 	call	200fa54 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000c7c:	010000c4 	movi	r4,3
 2000c80:	20003640 	call	2000364 <IO_read>
 2000c84:	10bfffcc 	andi	r2,r2,65535
 2000c88:	1080040c 	andi	r2,r2,16
 2000c8c:	103ff826 	beq	r2,zero,2000c70 <__alt_data_end+0xff000c70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000c90:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000c94:	01414184 	movi	r5,1286
 2000c98:	01000084 	movi	r4,2
 2000c9c:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000ca0:	0009883a 	mov	r4,zero
 2000ca4:	20003640 	call	2000364 <IO_read>
 2000ca8:	10bfffcc 	andi	r2,r2,65535
 2000cac:	100b883a 	mov	r5,r2
 2000cb0:	01008074 	movhi	r4,513
 2000cb4:	2107c304 	addi	r4,r4,7948
 2000cb8:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 2000cbc:	01414204 	movi	r5,1288
 2000cc0:	01000084 	movi	r4,2
 2000cc4:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2000cc8:	0009883a 	mov	r4,zero
 2000ccc:	20003640 	call	2000364 <IO_read>
 2000cd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 2000cd4:	e0bffb0b 	ldhu	r2,-20(fp)
 2000cd8:	100b883a 	mov	r5,r2
 2000cdc:	01008074 	movhi	r4,513
 2000ce0:	2107ce04 	addi	r4,r4,7992
 2000ce4:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 2000ce8:	00000206 	br	2000cf4 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000cec:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000cf0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000cf4:	e0bffb0b 	ldhu	r2,-20(fp)
 2000cf8:	108000d8 	cmpnei	r2,r2,3
 2000cfc:	103ffb1e 	bne	r2,zero,2000cec <__alt_data_end+0xff000cec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 2000d00:	01008074 	movhi	r4,513
 2000d04:	2107da04 	addi	r4,r4,8040
 2000d08:	20023e80 	call	20023e8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 2000d0c:	2001cb00 	call	2001cb0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000d10:	00000306 	br	2000d20 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 2000d14:	2001cb00 	call	2001cb0 <UsbGetHidDesc>
		usleep(10*1000);
 2000d18:	0109c404 	movi	r4,10000
 2000d1c:	200fa540 	call	200fa54 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000d20:	010000c4 	movi	r4,3
 2000d24:	20003640 	call	2000364 <IO_read>
 2000d28:	10bfffcc 	andi	r2,r2,65535
 2000d2c:	1080040c 	andi	r2,r2,16
 2000d30:	103ff826 	beq	r2,zero,2000d14 <__alt_data_end+0xff000d14>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000d34:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000d38:	01414184 	movi	r5,1286
 2000d3c:	01000084 	movi	r4,2
 2000d40:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000d44:	0009883a 	mov	r4,zero
 2000d48:	20003640 	call	2000364 <IO_read>
 2000d4c:	10bfffcc 	andi	r2,r2,65535
 2000d50:	100b883a 	mov	r5,r2
 2000d54:	01008074 	movhi	r4,513
 2000d58:	2107c304 	addi	r4,r4,7948
 2000d5c:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 2000d60:	01414204 	movi	r5,1288
 2000d64:	01000084 	movi	r4,2
 2000d68:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2000d6c:	0009883a 	mov	r4,zero
 2000d70:	20003640 	call	2000364 <IO_read>
 2000d74:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 2000d78:	e0bffb0b 	ldhu	r2,-20(fp)
 2000d7c:	100b883a 	mov	r5,r2
 2000d80:	01008074 	movhi	r4,513
 2000d84:	2107ce04 	addi	r4,r4,7992
 2000d88:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 2000d8c:	00000206 	br	2000d98 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000d90:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000d94:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000d98:	e0bffb0b 	ldhu	r2,-20(fp)
 2000d9c:	108000d8 	cmpnei	r2,r2,3
 2000da0:	103ffb1e 	bne	r2,zero,2000d90 <__alt_data_end+0xff000d90>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 2000da4:	01008074 	movhi	r4,513
 2000da8:	2107ec04 	addi	r4,r4,8112
 2000dac:	20023e80 	call	20023e8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 2000db0:	2001df80 	call	2001df8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000db4:	00000306 	br	2000dc4 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 2000db8:	2001df80 	call	2001df8 <UsbGetReportDesc>
		usleep(10*1000);
 2000dbc:	0109c404 	movi	r4,10000
 2000dc0:	200fa540 	call	200fa54 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000dc4:	010000c4 	movi	r4,3
 2000dc8:	20003640 	call	2000364 <IO_read>
 2000dcc:	10bfffcc 	andi	r2,r2,65535
 2000dd0:	1080040c 	andi	r2,r2,16
 2000dd4:	103ff826 	beq	r2,zero,2000db8 <__alt_data_end+0xff000db8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 2000dd8:	20021380 	call	2002138 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 2000ddc:	01414184 	movi	r5,1286
 2000de0:	01000084 	movi	r4,2
 2000de4:	20002f40 	call	20002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 2000de8:	0009883a 	mov	r4,zero
 2000dec:	20003640 	call	2000364 <IO_read>
 2000df0:	10bfffcc 	andi	r2,r2,65535
 2000df4:	100b883a 	mov	r5,r2
 2000df8:	01008074 	movhi	r4,513
 2000dfc:	21080004 	addi	r4,r4,8192
 2000e00:	20022ec0 	call	20022ec <printf>

	IO_write(HPI_ADDR,0x0508);
 2000e04:	01414204 	movi	r5,1288
 2000e08:	01000084 	movi	r4,2
 2000e0c:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2000e10:	0009883a 	mov	r4,zero
 2000e14:	20003640 	call	2000364 <IO_read>
 2000e18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 2000e1c:	e0bffb0b 	ldhu	r2,-20(fp)
 2000e20:	100b883a 	mov	r5,r2
 2000e24:	01008074 	movhi	r4,513
 2000e28:	21080c04 	addi	r4,r4,8240
 2000e2c:	20022ec0 	call	20022ec <printf>
	while (usb_ctl_val != 0x03)
 2000e30:	00000206 	br	2000e3c <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
 2000e34:	20021bc0 	call	20021bc <UsbGetRetryCnt>
 2000e38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 2000e3c:	e0bffb0b 	ldhu	r2,-20(fp)
 2000e40:	108000d8 	cmpnei	r2,r2,3
 2000e44:	103ffb1e 	bne	r2,zero,2000e34 <__alt_data_end+0xff000e34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 2000e48:	01008074 	movhi	r4,513
 2000e4c:	21081804 	addi	r4,r4,8288
 2000e50:	20023e80 	call	20023e8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 2000e54:	0109c404 	movi	r4,10000
 2000e58:	200fa540 	call	200fa54 <usleep>
	while(1)
	{
		toggle++;
 2000e5c:	e0bffb83 	ldbu	r2,-18(fp)
 2000e60:	10800044 	addi	r2,r2,1
 2000e64:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 2000e68:	01414004 	movi	r5,1280
 2000e6c:	01000084 	movi	r4,2
 2000e70:	20002f40 	call	20002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 2000e74:	01414704 	movi	r5,1308
 2000e78:	0009883a 	mov	r4,zero
 2000e7c:	20002f40 	call	20002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 2000e80:	e0bfff03 	ldbu	r2,-4(fp)
 2000e84:	108003cc 	andi	r2,r2,15
 2000e88:	100b883a 	mov	r5,r2
 2000e8c:	0009883a 	mov	r4,zero
 2000e90:	20002f40 	call	20002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 2000e94:	0140a444 	movi	r5,657
 2000e98:	0009883a 	mov	r4,zero
 2000e9c:	20002f40 	call	20002f4 <IO_write>
		if(toggle%2)
 2000ea0:	e0bffb83 	ldbu	r2,-18(fp)
 2000ea4:	1080004c 	andi	r2,r2,1
 2000ea8:	10803fcc 	andi	r2,r2,255
 2000eac:	10000426 	beq	r2,zero,2000ec0 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 2000eb0:	01400044 	movi	r5,1
 2000eb4:	0009883a 	mov	r4,zero
 2000eb8:	20002f40 	call	20002f4 <IO_write>
 2000ebc:	00000306 	br	2000ecc <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 2000ec0:	01401044 	movi	r5,65
 2000ec4:	0009883a 	mov	r4,zero
 2000ec8:	20002f40 	call	20002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 2000ecc:	014004c4 	movi	r5,19
 2000ed0:	0009883a 	mov	r4,zero
 2000ed4:	20002f40 	call	20002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 2000ed8:	000b883a 	mov	r5,zero
 2000edc:	0009883a 	mov	r4,zero
 2000ee0:	20002f40 	call	20002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2000ee4:	01414004 	movi	r5,1280
 2000ee8:	01006c04 	movi	r4,432
 2000eec:	20011480 	call	2001148 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000ef0:	00002406 	br	2000f84 <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 2000ef4:	01414004 	movi	r5,1280
 2000ef8:	01000084 	movi	r4,2
 2000efc:	20002f40 	call	20002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 2000f00:	01414704 	movi	r5,1308
 2000f04:	0009883a 	mov	r4,zero
 2000f08:	20002f40 	call	20002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 2000f0c:	e0bfff03 	ldbu	r2,-4(fp)
 2000f10:	108003cc 	andi	r2,r2,15
 2000f14:	100b883a 	mov	r5,r2
 2000f18:	0009883a 	mov	r4,zero
 2000f1c:	20002f40 	call	20002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 2000f20:	0140a444 	movi	r5,657
 2000f24:	0009883a 	mov	r4,zero
 2000f28:	20002f40 	call	20002f4 <IO_write>
			if(toggle%2)
 2000f2c:	e0bffb83 	ldbu	r2,-18(fp)
 2000f30:	1080004c 	andi	r2,r2,1
 2000f34:	10803fcc 	andi	r2,r2,255
 2000f38:	10000426 	beq	r2,zero,2000f4c <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 2000f3c:	01400044 	movi	r5,1
 2000f40:	0009883a 	mov	r4,zero
 2000f44:	20002f40 	call	20002f4 <IO_write>
 2000f48:	00000306 	br	2000f58 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 2000f4c:	01401044 	movi	r5,65
 2000f50:	0009883a 	mov	r4,zero
 2000f54:	20002f40 	call	20002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 2000f58:	014004c4 	movi	r5,19
 2000f5c:	0009883a 	mov	r4,zero
 2000f60:	20002f40 	call	20002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 2000f64:	000b883a 	mov	r5,zero
 2000f68:	0009883a 	mov	r4,zero
 2000f6c:	20002f40 	call	20002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2000f70:	01414004 	movi	r5,1280
 2000f74:	01006c04 	movi	r4,432
 2000f78:	20011480 	call	2001148 <UsbWrite>
			usleep(10*1000);
 2000f7c:	0109c404 	movi	r4,10000
 2000f80:	200fa540 	call	200fa54 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 2000f84:	010000c4 	movi	r4,3
 2000f88:	20003640 	call	2000364 <IO_read>
 2000f8c:	10bfffcc 	andi	r2,r2,65535
 2000f90:	1080040c 	andi	r2,r2,16
 2000f94:	103fd726 	beq	r2,zero,2000ef4 <__alt_data_end+0xff000ef4>
//		printf("\nfirst two keycode values are %04x\n",keycode);
//		// We only need the first keycode, which is at the lower byte of keycode.
//		// Send the keycode to hardware via PIO.
//		*keycode_base = keycode & 0xff;
		// ktteck 2 keycode
		usb_ctl_val = UsbWaitTDListDone();
 2000f98:	20021380 	call	2002138 <UsbWaitTDListDone>
 2000f9c:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte

		IO_write(HPI_ADDR,0x051e); //the address of byte 0~1
 2000fa0:	01414784 	movi	r5,1310
 2000fa4:	01000084 	movi	r4,2
 2000fa8:	20002f40 	call	20002f4 <IO_write>

		keycode = (IO_read(HPI_DATA));
 2000fac:	0009883a 	mov	r4,zero
 2000fb0:	20003640 	call	2000364 <IO_read>
 2000fb4:	10bfffcc 	andi	r2,r2,65535
 2000fb8:	e0bffd15 	stw	r2,-12(fp)

		IO_write(HPI_ADDR,0x0520); //the address of byte 2~3
 2000fbc:	01414804 	movi	r5,1312
 2000fc0:	01000084 	movi	r4,2
 2000fc4:	20002f40 	call	20002f4 <IO_write>

		keycode += (IO_read(HPI_DATA) << 16);
 2000fc8:	0009883a 	mov	r4,zero
 2000fcc:	20003640 	call	2000364 <IO_read>
 2000fd0:	10bfffcc 	andi	r2,r2,65535
 2000fd4:	1004943a 	slli	r2,r2,16
 2000fd8:	e0fffd17 	ldw	r3,-12(fp)
 2000fdc:	1885883a 	add	r2,r3,r2
 2000fe0:	e0bffd15 	stw	r2,-12(fp)

		printf("\nfirst four keycode values are %08x\n",keycode);
 2000fe4:	e17ffd17 	ldw	r5,-12(fp)
 2000fe8:	01008074 	movhi	r4,513
 2000fec:	21082c04 	addi	r4,r4,8368
 2000ff0:	20022ec0 	call	20022ec <printf>

		IOWR(KEYCODE_BASE, 0, keycode & 0xffff); //write to the PIO
 2000ff4:	e0bffd17 	ldw	r2,-12(fp)
 2000ff8:	10ffffcc 	andi	r3,r2,65535
 2000ffc:	00801004 	movi	r2,64
 2001000:	10c00035 	stwio	r3,0(r2)
		//

		usleep(200);//usleep(5000);
 2001004:	01003204 	movi	r4,200
 2001008:	200fa540 	call	200fa54 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 200100c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 2001010:	10bfffcc 	andi	r2,r2,65535
 2001014:	1009883a 	mov	r4,r2
 2001018:	20011a00 	call	20011a0 <UsbRead>
 200101c:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 2001020:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2001024:	e0fffb0b 	ldhu	r3,-20(fp)
 2001028:	1884703a 	and	r2,r3,r2
 200102c:	10bfffcc 	andi	r2,r2,65535
 2001030:	10003f1e 	bne	r2,zero,2001130 <main+0xd64>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 2001034:	e03ffbc5 	stb	zero,-17(fp)
 2001038:	00000f06 	br	2001078 <main+0xcac>
			{
				usleep(5*1000);
 200103c:	0104e204 	movi	r4,5000
 2001040:	200fa540 	call	200fa54 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 2001044:	d0a6cb0b 	ldhu	r2,-25812(gp)
 2001048:	10bfffcc 	andi	r2,r2,65535
 200104c:	1009883a 	mov	r4,r2
 2001050:	20011a00 	call	20011a0 <UsbRead>
 2001054:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 2001058:	d0a6cb8b 	ldhu	r2,-25810(gp)
 200105c:	e0fffb0b 	ldhu	r3,-20(fp)
 2001060:	1884703a 	and	r2,r3,r2
 2001064:	10bfffcc 	andi	r2,r2,65535
 2001068:	1000071e 	bne	r2,zero,2001088 <main+0xcbc>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 200106c:	e0bffbc3 	ldbu	r2,-17(fp)
 2001070:	10800044 	addi	r2,r2,1
 2001074:	e0bffbc5 	stb	r2,-17(fp)
 2001078:	e0bffbc3 	ldbu	r2,-17(fp)
 200107c:	108001f0 	cmpltui	r2,r2,7
 2001080:	103fee1e 	bne	r2,zero,200103c <__alt_data_end+0xff00103c>
 2001084:	00000106 	br	200108c <main+0xcc0>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
 2001088:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 200108c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2001090:	e0fffb0b 	ldhu	r3,-20(fp)
 2001094:	1884703a 	and	r2,r3,r2
 2001098:	10bfffcc 	andi	r2,r2,65535
 200109c:	1000241e 	bne	r2,zero,2001130 <main+0xd64>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 20010a0:	01008074 	movhi	r4,513
 20010a4:	21083604 	addi	r4,r4,8408
 20010a8:	20023e80 	call	20023e8 <puts>
				printf("[INFO]: please insert again!!! \n");
 20010ac:	01008074 	movhi	r4,513
 20010b0:	21084104 	addi	r4,r4,8452
 20010b4:	20023e80 	call	20023e8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 20010b8:	00001d06 	br	2001130 <main+0xd64>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 20010bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
 20010c0:	10bfffcc 	andi	r2,r2,65535
 20010c4:	1009883a 	mov	r4,r2
 20010c8:	20011a00 	call	20011a0 <UsbRead>
 20010cc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 20010d0:	0104e204 	movi	r4,5000
 20010d4:	200fa540 	call	200fa54 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 20010d8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 20010dc:	10bfffcc 	andi	r2,r2,65535
 20010e0:	1009883a 	mov	r4,r2
 20010e4:	20011a00 	call	20011a0 <UsbRead>
 20010e8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 20010ec:	0104e204 	movi	r4,5000
 20010f0:	200fa540 	call	200fa54 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 20010f4:	d0a6cb0b 	ldhu	r2,-25812(gp)
 20010f8:	10bfffcc 	andi	r2,r2,65535
 20010fc:	1009883a 	mov	r4,r2
 2001100:	20011a00 	call	20011a0 <UsbRead>
 2001104:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 2001108:	0104e204 	movi	r4,5000
 200110c:	200fa540 	call	200fa54 <usleep>

			if(usb_ctl_val & no_device)
 2001110:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2001114:	e0fffb0b 	ldhu	r3,-20(fp)
 2001118:	1884703a 	and	r2,r3,r2
 200111c:	10bfffcc 	andi	r2,r2,65535
 2001120:	10000126 	beq	r2,zero,2001128 <main+0xd5c>
				goto USB_HOT_PLUG;
 2001124:	003cb406 	br	20003f8 <__alt_data_end+0xff0003f8>

			usleep(200);
 2001128:	01003204 	movi	r4,200
 200112c:	200fa540 	call	200fa54 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 2001130:	d0a6cb8b 	ldhu	r2,-25810(gp)
 2001134:	e0fffb0b 	ldhu	r3,-20(fp)
 2001138:	1884703a 	and	r2,r3,r2
 200113c:	10bfffcc 	andi	r2,r2,65535
 2001140:	103fde26 	beq	r2,zero,20010bc <__alt_data_end+0xff0010bc>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 2001144:	003f4506 	br	2000e5c <__alt_data_end+0xff000e5c>

02001148 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 2001148:	defffc04 	addi	sp,sp,-16
 200114c:	dfc00315 	stw	ra,12(sp)
 2001150:	df000215 	stw	fp,8(sp)
 2001154:	df000204 	addi	fp,sp,8
 2001158:	2007883a 	mov	r3,r4
 200115c:	2805883a 	mov	r2,r5
 2001160:	e0fffe0d 	sth	r3,-8(fp)
 2001164:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
IO_write(HPI_ADDR, Address); // base+offset or HPI_ADDR directly
 2001168:	e0bffe0b 	ldhu	r2,-8(fp)
 200116c:	100b883a 	mov	r5,r2
 2001170:	01000084 	movi	r4,2
 2001174:	20002f40 	call	20002f4 <IO_write>
IO_write(HPI_DATA, Data);
 2001178:	e0bfff0b 	ldhu	r2,-4(fp)
 200117c:	100b883a 	mov	r5,r2
 2001180:	0009883a 	mov	r4,zero
 2001184:	20002f40 	call	20002f4 <IO_write>

}
 2001188:	0001883a 	nop
 200118c:	e037883a 	mov	sp,fp
 2001190:	dfc00117 	ldw	ra,4(sp)
 2001194:	df000017 	ldw	fp,0(sp)
 2001198:	dec00204 	addi	sp,sp,8
 200119c:	f800283a 	ret

020011a0 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 20011a0:	defffd04 	addi	sp,sp,-12
 20011a4:	dfc00215 	stw	ra,8(sp)
 20011a8:	df000115 	stw	fp,4(sp)
 20011ac:	df000104 	addi	fp,sp,4
 20011b0:	2005883a 	mov	r2,r4
 20011b4:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
IO_write(HPI_ADDR, Address); // base+offset or HPI_ADDR directly
 20011b8:	e0bfff0b 	ldhu	r2,-4(fp)
 20011bc:	100b883a 	mov	r5,r2
 20011c0:	01000084 	movi	r4,2
 20011c4:	20002f40 	call	20002f4 <IO_write>
return IO_read(HPI_DATA);
 20011c8:	0009883a 	mov	r4,zero
 20011cc:	20003640 	call	2000364 <IO_read>
}
 20011d0:	e037883a 	mov	sp,fp
 20011d4:	dfc00117 	ldw	ra,4(sp)
 20011d8:	df000017 	ldw	fp,0(sp)
 20011dc:	dec00204 	addi	sp,sp,8
 20011e0:	f800283a 	ret

020011e4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 20011e4:	defffe04 	addi	sp,sp,-8
 20011e8:	dfc00115 	stw	ra,4(sp)
 20011ec:	df000015 	stw	fp,0(sp)
 20011f0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 20011f4:	017e9414 	movui	r5,64080
 20011f8:	01000044 	movi	r4,1
 20011fc:	20002f40 	call	20002f4 <IO_write>
	usleep(100000);
 2001200:	010000b4 	movhi	r4,2
 2001204:	2121a804 	addi	r4,r4,-31072
 2001208:	200fa540 	call	200fa54 <usleep>
	printf("[USB INIT]:reset finished!\n");
 200120c:	01008074 	movhi	r4,513
 2001210:	21084904 	addi	r4,r4,8484
 2001214:	20023e80 	call	20023e8 <puts>

	usleep(500000);
 2001218:	01000234 	movhi	r4,8
 200121c:	21284804 	addi	r4,r4,-24288
 2001220:	200fa540 	call	200fa54 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 2001224:	01008074 	movhi	r4,513
 2001228:	21085004 	addi	r4,r4,8512
 200122c:	20023e80 	call	20023e8 <puts>
	IO_read(HPI_MAILBOX);
 2001230:	01000044 	movi	r4,1
 2001234:	20003640 	call	2000364 <IO_read>
	IO_read(HPI_STATUS);
 2001238:	010000c4 	movi	r4,3
 200123c:	20003640 	call	2000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 2001240:	01005104 	movi	r4,324
 2001244:	20011a00 	call	20011a0 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 2001248:	000b883a 	mov	r5,zero
 200124c:	01005104 	movi	r4,324
 2001250:	20011480 	call	2001148 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 2001254:	01005204 	movi	r4,328
 2001258:	20011a00 	call	20011a0 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 200125c:	000b883a 	mov	r5,zero
 2001260:	01005204 	movi	r4,328
 2001264:	20011480 	call	2001148 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 2001268:	017fffd4 	movui	r5,65535
 200126c:	01302414 	movui	r4,49296
 2001270:	20011480 	call	2001148 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 2001274:	017fffd4 	movui	r5,65535
 2001278:	01302c14 	movui	r4,49328
 200127c:	20011480 	call	2001148 <UsbWrite>
}
 2001280:	0001883a 	nop
 2001284:	e037883a 	mov	sp,fp
 2001288:	dfc00117 	ldw	ra,4(sp)
 200128c:	df000017 	ldw	fp,0(sp)
 2001290:	dec00204 	addi	sp,sp,8
 2001294:	f800283a 	ret

02001298 <UsbSetAddress>:


void UsbSetAddress()
{
 2001298:	defffe04 	addi	sp,sp,-8
 200129c:	dfc00115 	stw	ra,4(sp)
 20012a0:	df000015 	stw	fp,0(sp)
 20012a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 20012a8:	01414004 	movi	r5,1280
 20012ac:	01000084 	movi	r4,2
 20012b0:	20002f40 	call	20002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 20012b4:	01414304 	movi	r5,1292
 20012b8:	0009883a 	mov	r4,zero
 20012bc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 20012c0:	01400204 	movi	r5,8
 20012c4:	0009883a 	mov	r4,zero
 20012c8:	20002f40 	call	20002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 20012cc:	01403404 	movi	r5,208
 20012d0:	0009883a 	mov	r4,zero
 20012d4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 20012d8:	01400044 	movi	r5,1
 20012dc:	0009883a 	mov	r4,zero
 20012e0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20012e4:	014004c4 	movi	r5,19
 20012e8:	0009883a 	mov	r4,zero
 20012ec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 20012f0:	01414504 	movi	r5,1300
 20012f4:	0009883a 	mov	r4,zero
 20012f8:	20002f40 	call	20002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 20012fc:	01414004 	movi	r5,1280
 2001300:	0009883a 	mov	r4,zero
 2001304:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
 2001308:	01400084 	movi	r5,2
 200130c:	0009883a 	mov	r4,zero
 2001310:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001314:	000b883a 	mov	r5,zero
 2001318:	0009883a 	mov	r4,zero
 200131c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001320:	000b883a 	mov	r5,zero
 2001324:	0009883a 	mov	r4,zero
 2001328:	20002f40 	call	20002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 200132c:	000b883a 	mov	r5,zero
 2001330:	0009883a 	mov	r4,zero
 2001334:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 2001338:	000b883a 	mov	r5,zero
 200133c:	0009883a 	mov	r4,zero
 2001340:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 2001344:	01402404 	movi	r5,144
 2001348:	0009883a 	mov	r4,zero
 200134c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 2001350:	01401044 	movi	r5,65
 2001354:	0009883a 	mov	r4,zero
 2001358:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 200135c:	014004c4 	movi	r5,19
 2001360:	0009883a 	mov	r4,zero
 2001364:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001368:	000b883a 	mov	r5,zero
 200136c:	0009883a 	mov	r4,zero
 2001370:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001374:	01414004 	movi	r5,1280
 2001378:	01006c04 	movi	r4,432
 200137c:	20011480 	call	2001148 <UsbWrite>
}
 2001380:	0001883a 	nop
 2001384:	e037883a 	mov	sp,fp
 2001388:	dfc00117 	ldw	ra,4(sp)
 200138c:	df000017 	ldw	fp,0(sp)
 2001390:	dec00204 	addi	sp,sp,8
 2001394:	f800283a 	ret

02001398 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 2001398:	defffe04 	addi	sp,sp,-8
 200139c:	dfc00115 	stw	ra,4(sp)
 20013a0:	df000015 	stw	fp,0(sp)
 20013a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 20013a8:	01414004 	movi	r5,1280
 20013ac:	01000084 	movi	r4,2
 20013b0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 20013b4:	01414304 	movi	r5,1292
 20013b8:	0009883a 	mov	r4,zero
 20013bc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 20013c0:	01400204 	movi	r5,8
 20013c4:	0009883a 	mov	r4,zero
 20013c8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 20013cc:	0140b404 	movi	r5,720
 20013d0:	0009883a 	mov	r4,zero
 20013d4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 20013d8:	01400044 	movi	r5,1
 20013dc:	0009883a 	mov	r4,zero
 20013e0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20013e4:	014004c4 	movi	r5,19
 20013e8:	0009883a 	mov	r4,zero
 20013ec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 20013f0:	01414504 	movi	r5,1300
 20013f4:	0009883a 	mov	r4,zero
 20013f8:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 20013fc:	0141a004 	movi	r5,1664
 2001400:	0009883a 	mov	r4,zero
 2001404:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 2001408:	01404004 	movi	r5,256
 200140c:	0009883a 	mov	r4,zero
 2001410:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001414:	000b883a 	mov	r5,zero
 2001418:	0009883a 	mov	r4,zero
 200141c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 2001420:	01400204 	movi	r5,8
 2001424:	0009883a 	mov	r4,zero
 2001428:	20002f40 	call	20002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 200142c:	01414b04 	movi	r5,1324
 2001430:	0009883a 	mov	r4,zero
 2001434:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 2001438:	01400204 	movi	r5,8
 200143c:	0009883a 	mov	r4,zero
 2001440:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 2001444:	0140a404 	movi	r5,656
 2001448:	0009883a 	mov	r4,zero
 200144c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 2001450:	01401044 	movi	r5,65
 2001454:	0009883a 	mov	r4,zero
 2001458:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 200145c:	014004c4 	movi	r5,19
 2001460:	0009883a 	mov	r4,zero
 2001464:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
 2001468:	01414804 	movi	r5,1312
 200146c:	0009883a 	mov	r4,zero
 2001470:	20002f40 	call	20002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 2001474:	000b883a 	mov	r5,zero
 2001478:	0009883a 	mov	r4,zero
 200147c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 2001480:	000b883a 	mov	r5,zero
 2001484:	0009883a 	mov	r4,zero
 2001488:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 200148c:	01408404 	movi	r5,528
 2001490:	0009883a 	mov	r4,zero
 2001494:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 2001498:	01401044 	movi	r5,65
 200149c:	0009883a 	mov	r4,zero
 20014a0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 20014a4:	014004c4 	movi	r5,19
 20014a8:	0009883a 	mov	r4,zero
 20014ac:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 20014b0:	000b883a 	mov	r5,zero
 20014b4:	0009883a 	mov	r4,zero
 20014b8:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 20014bc:	01414004 	movi	r5,1280
 20014c0:	01006c04 	movi	r4,432
 20014c4:	20011480 	call	2001148 <UsbWrite>
}
 20014c8:	0001883a 	nop
 20014cc:	e037883a 	mov	sp,fp
 20014d0:	dfc00117 	ldw	ra,4(sp)
 20014d4:	df000017 	ldw	fp,0(sp)
 20014d8:	dec00204 	addi	sp,sp,8
 20014dc:	f800283a 	ret

020014e0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 20014e0:	defffe04 	addi	sp,sp,-8
 20014e4:	dfc00115 	stw	ra,4(sp)
 20014e8:	df000015 	stw	fp,0(sp)
 20014ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 20014f0:	01414004 	movi	r5,1280
 20014f4:	01000084 	movi	r4,2
 20014f8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 20014fc:	01414304 	movi	r5,1292
 2001500:	0009883a 	mov	r4,zero
 2001504:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001508:	01400204 	movi	r5,8
 200150c:	0009883a 	mov	r4,zero
 2001510:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2001514:	0140b404 	movi	r5,720
 2001518:	0009883a 	mov	r4,zero
 200151c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2001520:	01400044 	movi	r5,1
 2001524:	0009883a 	mov	r4,zero
 2001528:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 200152c:	014004c4 	movi	r5,19
 2001530:	0009883a 	mov	r4,zero
 2001534:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001538:	01414504 	movi	r5,1300
 200153c:	0009883a 	mov	r4,zero
 2001540:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 2001544:	0141a004 	movi	r5,1664
 2001548:	0009883a 	mov	r4,zero
 200154c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 2001550:	01404004 	movi	r5,256
 2001554:	0009883a 	mov	r4,zero
 2001558:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 200155c:	000b883a 	mov	r5,zero
 2001560:	0009883a 	mov	r4,zero
 2001564:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 2001568:	01400484 	movi	r5,18
 200156c:	0009883a 	mov	r4,zero
 2001570:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 2001574:	01415104 	movi	r5,1348
 2001578:	0009883a 	mov	r4,zero
 200157c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001580:	01400204 	movi	r5,8
 2001584:	0009883a 	mov	r4,zero
 2001588:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 200158c:	0140a404 	movi	r5,656
 2001590:	0009883a 	mov	r4,zero
 2001594:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2001598:	01401044 	movi	r5,65
 200159c:	0009883a 	mov	r4,zero
 20015a0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 20015a4:	014004c4 	movi	r5,19
 20015a8:	0009883a 	mov	r4,zero
 20015ac:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 20015b0:	01414804 	movi	r5,1312
 20015b4:	0009883a 	mov	r4,zero
 20015b8:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 20015bc:	01415304 	movi	r5,1356
 20015c0:	0009883a 	mov	r4,zero
 20015c4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 20015c8:	01400204 	movi	r5,8
 20015cc:	0009883a 	mov	r4,zero
 20015d0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 20015d4:	0140a404 	movi	r5,656
 20015d8:	0009883a 	mov	r4,zero
 20015dc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 20015e0:	01400044 	movi	r5,1
 20015e4:	0009883a 	mov	r4,zero
 20015e8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 20015ec:	014004c4 	movi	r5,19
 20015f0:	0009883a 	mov	r4,zero
 20015f4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 20015f8:	01414b04 	movi	r5,1324
 20015fc:	0009883a 	mov	r4,zero
 2001600:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 2001604:	01415504 	movi	r5,1364
 2001608:	0009883a 	mov	r4,zero
 200160c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 2001610:	01400084 	movi	r5,2
 2001614:	0009883a 	mov	r4,zero
 2001618:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 200161c:	0140a404 	movi	r5,656
 2001620:	0009883a 	mov	r4,zero
 2001624:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2001628:	01401044 	movi	r5,65
 200162c:	0009883a 	mov	r4,zero
 2001630:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2001634:	014004c4 	movi	r5,19
 2001638:	0009883a 	mov	r4,zero
 200163c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 2001640:	01414e04 	movi	r5,1336
 2001644:	0009883a 	mov	r4,zero
 2001648:	20002f40 	call	20002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 200164c:	000b883a 	mov	r5,zero
 2001650:	0009883a 	mov	r4,zero
 2001654:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 2001658:	000b883a 	mov	r5,zero
 200165c:	0009883a 	mov	r4,zero
 2001660:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 2001664:	01408404 	movi	r5,528
 2001668:	0009883a 	mov	r4,zero
 200166c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 2001670:	01401044 	movi	r5,65
 2001674:	0009883a 	mov	r4,zero
 2001678:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 200167c:	014004c4 	movi	r5,19
 2001680:	0009883a 	mov	r4,zero
 2001684:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 2001688:	000b883a 	mov	r5,zero
 200168c:	0009883a 	mov	r4,zero
 2001690:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001694:	01414004 	movi	r5,1280
 2001698:	01006c04 	movi	r4,432
 200169c:	20011480 	call	2001148 <UsbWrite>
}
 20016a0:	0001883a 	nop
 20016a4:	e037883a 	mov	sp,fp
 20016a8:	dfc00117 	ldw	ra,4(sp)
 20016ac:	df000017 	ldw	fp,0(sp)
 20016b0:	dec00204 	addi	sp,sp,8
 20016b4:	f800283a 	ret

020016b8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 20016b8:	defffe04 	addi	sp,sp,-8
 20016bc:	dfc00115 	stw	ra,4(sp)
 20016c0:	df000015 	stw	fp,0(sp)
 20016c4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 20016c8:	01414004 	movi	r5,1280
 20016cc:	01000084 	movi	r4,2
 20016d0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 20016d4:	01414304 	movi	r5,1292
 20016d8:	0009883a 	mov	r4,zero
 20016dc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 20016e0:	01400204 	movi	r5,8
 20016e4:	0009883a 	mov	r4,zero
 20016e8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 20016ec:	0140b404 	movi	r5,720
 20016f0:	0009883a 	mov	r4,zero
 20016f4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 20016f8:	01400044 	movi	r5,1
 20016fc:	0009883a 	mov	r4,zero
 2001700:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001704:	014004c4 	movi	r5,19
 2001708:	0009883a 	mov	r4,zero
 200170c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001710:	01414504 	movi	r5,1300
 2001714:	0009883a 	mov	r4,zero
 2001718:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 200171c:	0141a004 	movi	r5,1664
 2001720:	0009883a 	mov	r4,zero
 2001724:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 2001728:	01408004 	movi	r5,512
 200172c:	0009883a 	mov	r4,zero
 2001730:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2001734:	000b883a 	mov	r5,zero
 2001738:	0009883a 	mov	r4,zero
 200173c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 2001740:	01400244 	movi	r5,9
 2001744:	0009883a 	mov	r4,zero
 2001748:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 200174c:	01415104 	movi	r5,1348
 2001750:	0009883a 	mov	r4,zero
 2001754:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001758:	01400204 	movi	r5,8
 200175c:	0009883a 	mov	r4,zero
 2001760:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001764:	0140a404 	movi	r5,656
 2001768:	0009883a 	mov	r4,zero
 200176c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2001770:	01401044 	movi	r5,65
 2001774:	0009883a 	mov	r4,zero
 2001778:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 200177c:	014004c4 	movi	r5,19
 2001780:	0009883a 	mov	r4,zero
 2001784:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2001788:	01414804 	movi	r5,1312
 200178c:	0009883a 	mov	r4,zero
 2001790:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 2001794:	01415304 	movi	r5,1356
 2001798:	0009883a 	mov	r4,zero
 200179c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 20017a0:	01400044 	movi	r5,1
 20017a4:	0009883a 	mov	r4,zero
 20017a8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 20017ac:	0140a404 	movi	r5,656
 20017b0:	0009883a 	mov	r4,zero
 20017b4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 20017b8:	01400044 	movi	r5,1
 20017bc:	0009883a 	mov	r4,zero
 20017c0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 20017c4:	014004c4 	movi	r5,19
 20017c8:	0009883a 	mov	r4,zero
 20017cc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 20017d0:	01414b04 	movi	r5,1324
 20017d4:	0009883a 	mov	r4,zero
 20017d8:	20002f40 	call	20002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 20017dc:	000b883a 	mov	r5,zero
 20017e0:	0009883a 	mov	r4,zero
 20017e4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 20017e8:	000b883a 	mov	r5,zero
 20017ec:	0009883a 	mov	r4,zero
 20017f0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 20017f4:	01408404 	movi	r5,528
 20017f8:	0009883a 	mov	r4,zero
 20017fc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2001800:	01401044 	movi	r5,65
 2001804:	0009883a 	mov	r4,zero
 2001808:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 200180c:	014004c4 	movi	r5,19
 2001810:	0009883a 	mov	r4,zero
 2001814:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 2001818:	000b883a 	mov	r5,zero
 200181c:	0009883a 	mov	r4,zero
 2001820:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001824:	01414004 	movi	r5,1280
 2001828:	01006c04 	movi	r4,432
 200182c:	20011480 	call	2001148 <UsbWrite>
}
 2001830:	0001883a 	nop
 2001834:	e037883a 	mov	sp,fp
 2001838:	dfc00117 	ldw	ra,4(sp)
 200183c:	df000017 	ldw	fp,0(sp)
 2001840:	dec00204 	addi	sp,sp,8
 2001844:	f800283a 	ret

02001848 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 2001848:	defffe04 	addi	sp,sp,-8
 200184c:	dfc00115 	stw	ra,4(sp)
 2001850:	df000015 	stw	fp,0(sp)
 2001854:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2001858:	01414004 	movi	r5,1280
 200185c:	01000084 	movi	r4,2
 2001860:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001864:	01414304 	movi	r5,1292
 2001868:	0009883a 	mov	r4,zero
 200186c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001870:	01400204 	movi	r5,8
 2001874:	0009883a 	mov	r4,zero
 2001878:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 200187c:	0140b404 	movi	r5,720
 2001880:	0009883a 	mov	r4,zero
 2001884:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2001888:	01400044 	movi	r5,1
 200188c:	0009883a 	mov	r4,zero
 2001890:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001894:	014004c4 	movi	r5,19
 2001898:	0009883a 	mov	r4,zero
 200189c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 20018a0:	01414504 	movi	r5,1300
 20018a4:	0009883a 	mov	r4,zero
 20018a8:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 20018ac:	0141a004 	movi	r5,1664
 20018b0:	0009883a 	mov	r4,zero
 20018b4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 20018b8:	01408004 	movi	r5,512
 20018bc:	0009883a 	mov	r4,zero
 20018c0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 20018c4:	000b883a 	mov	r5,zero
 20018c8:	0009883a 	mov	r4,zero
 20018cc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 20018d0:	01403fc4 	movi	r5,255
 20018d4:	0009883a 	mov	r4,zero
 20018d8:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 20018dc:	01415704 	movi	r5,1372
 20018e0:	0009883a 	mov	r4,zero
 20018e4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 20018e8:	01400204 	movi	r5,8
 20018ec:	0009883a 	mov	r4,zero
 20018f0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 20018f4:	0140a404 	movi	r5,656
 20018f8:	0009883a 	mov	r4,zero
 20018fc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2001900:	01401044 	movi	r5,65
 2001904:	0009883a 	mov	r4,zero
 2001908:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 200190c:	014004c4 	movi	r5,19
 2001910:	0009883a 	mov	r4,zero
 2001914:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2001918:	01414804 	movi	r5,1312
 200191c:	0009883a 	mov	r4,zero
 2001920:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 2001924:	01415904 	movi	r5,1380
 2001928:	0009883a 	mov	r4,zero
 200192c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 2001930:	01400204 	movi	r5,8
 2001934:	0009883a 	mov	r4,zero
 2001938:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 200193c:	0140a404 	movi	r5,656
 2001940:	0009883a 	mov	r4,zero
 2001944:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2001948:	01400044 	movi	r5,1
 200194c:	0009883a 	mov	r4,zero
 2001950:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2001954:	014004c4 	movi	r5,19
 2001958:	0009883a 	mov	r4,zero
 200195c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 2001960:	01414b04 	movi	r5,1324
 2001964:	0009883a 	mov	r4,zero
 2001968:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 200196c:	01415b04 	movi	r5,1388
 2001970:	0009883a 	mov	r4,zero
 2001974:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 2001978:	01400204 	movi	r5,8
 200197c:	0009883a 	mov	r4,zero
 2001980:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 2001984:	0140a404 	movi	r5,656
 2001988:	0009883a 	mov	r4,zero
 200198c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2001990:	01401044 	movi	r5,65
 2001994:	0009883a 	mov	r4,zero
 2001998:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 200199c:	014004c4 	movi	r5,19
 20019a0:	0009883a 	mov	r4,zero
 20019a4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 20019a8:	01414e04 	movi	r5,1336
 20019ac:	0009883a 	mov	r4,zero
 20019b0:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 20019b4:	01415d04 	movi	r5,1396
 20019b8:	0009883a 	mov	r4,zero
 20019bc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 20019c0:	01400204 	movi	r5,8
 20019c4:	0009883a 	mov	r4,zero
 20019c8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 20019cc:	0140a404 	movi	r5,656
 20019d0:	0009883a 	mov	r4,zero
 20019d4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 20019d8:	01400044 	movi	r5,1
 20019dc:	0009883a 	mov	r4,zero
 20019e0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 20019e4:	014004c4 	movi	r5,19
 20019e8:	0009883a 	mov	r4,zero
 20019ec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 20019f0:	01415104 	movi	r5,1348
 20019f4:	0009883a 	mov	r4,zero
 20019f8:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 20019fc:	01415f04 	movi	r5,1404
 2001a00:	0009883a 	mov	r4,zero
 2001a04:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 2001a08:	01400084 	movi	r5,2
 2001a0c:	0009883a 	mov	r4,zero
 2001a10:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001a14:	0140a404 	movi	r5,656
 2001a18:	0009883a 	mov	r4,zero
 2001a1c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 2001a20:	01401044 	movi	r5,65
 2001a24:	0009883a 	mov	r4,zero
 2001a28:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001a2c:	014004c4 	movi	r5,19
 2001a30:	0009883a 	mov	r4,zero
 2001a34:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 2001a38:	01415404 	movi	r5,1360
 2001a3c:	0009883a 	mov	r4,zero
 2001a40:	20002f40 	call	20002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 2001a44:	000b883a 	mov	r5,zero
 2001a48:	0009883a 	mov	r4,zero
 2001a4c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 2001a50:	000b883a 	mov	r5,zero
 2001a54:	0009883a 	mov	r4,zero
 2001a58:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 2001a5c:	01408404 	movi	r5,528
 2001a60:	0009883a 	mov	r4,zero
 2001a64:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 2001a68:	01401044 	movi	r5,65
 2001a6c:	0009883a 	mov	r4,zero
 2001a70:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2001a74:	014004c4 	movi	r5,19
 2001a78:	0009883a 	mov	r4,zero
 2001a7c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 2001a80:	000b883a 	mov	r5,zero
 2001a84:	0009883a 	mov	r4,zero
 2001a88:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001a8c:	01414004 	movi	r5,1280
 2001a90:	01006c04 	movi	r4,432
 2001a94:	20011480 	call	2001148 <UsbWrite>
}
 2001a98:	0001883a 	nop
 2001a9c:	e037883a 	mov	sp,fp
 2001aa0:	dfc00117 	ldw	ra,4(sp)
 2001aa4:	df000017 	ldw	fp,0(sp)
 2001aa8:	dec00204 	addi	sp,sp,8
 2001aac:	f800283a 	ret

02001ab0 <UsbSetConfig>:

void UsbSetConfig()
{
 2001ab0:	defffe04 	addi	sp,sp,-8
 2001ab4:	dfc00115 	stw	ra,4(sp)
 2001ab8:	df000015 	stw	fp,0(sp)
 2001abc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2001ac0:	01414004 	movi	r5,1280
 2001ac4:	01000084 	movi	r4,2
 2001ac8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001acc:	01414304 	movi	r5,1292
 2001ad0:	0009883a 	mov	r4,zero
 2001ad4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001ad8:	01400204 	movi	r5,8
 2001adc:	0009883a 	mov	r4,zero
 2001ae0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 2001ae4:	0140b404 	movi	r5,720
 2001ae8:	0009883a 	mov	r4,zero
 2001aec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2001af0:	01400044 	movi	r5,1
 2001af4:	0009883a 	mov	r4,zero
 2001af8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001afc:	014004c4 	movi	r5,19
 2001b00:	0009883a 	mov	r4,zero
 2001b04:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001b08:	01414504 	movi	r5,1300
 2001b0c:	0009883a 	mov	r4,zero
 2001b10:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 2001b14:	01424004 	movi	r5,2304
 2001b18:	0009883a 	mov	r4,zero
 2001b1c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 2001b20:	01400044 	movi	r5,1
 2001b24:	0009883a 	mov	r4,zero
 2001b28:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001b2c:	000b883a 	mov	r5,zero
 2001b30:	0009883a 	mov	r4,zero
 2001b34:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001b38:	000b883a 	mov	r5,zero
 2001b3c:	0009883a 	mov	r4,zero
 2001b40:	20002f40 	call	20002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 2001b44:	000b883a 	mov	r5,zero
 2001b48:	0009883a 	mov	r4,zero
 2001b4c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 2001b50:	000b883a 	mov	r5,zero
 2001b54:	0009883a 	mov	r4,zero
 2001b58:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 2001b5c:	0140a404 	movi	r5,656
 2001b60:	0009883a 	mov	r4,zero
 2001b64:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 2001b68:	01401044 	movi	r5,65
 2001b6c:	0009883a 	mov	r4,zero
 2001b70:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001b74:	014004c4 	movi	r5,19
 2001b78:	0009883a 	mov	r4,zero
 2001b7c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001b80:	000b883a 	mov	r5,zero
 2001b84:	0009883a 	mov	r4,zero
 2001b88:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001b8c:	01414004 	movi	r5,1280
 2001b90:	01006c04 	movi	r4,432
 2001b94:	20011480 	call	2001148 <UsbWrite>

}
 2001b98:	0001883a 	nop
 2001b9c:	e037883a 	mov	sp,fp
 2001ba0:	dfc00117 	ldw	ra,4(sp)
 2001ba4:	df000017 	ldw	fp,0(sp)
 2001ba8:	dec00204 	addi	sp,sp,8
 2001bac:	f800283a 	ret

02001bb0 <UsbClassRequest>:

void UsbClassRequest()
{
 2001bb0:	defffe04 	addi	sp,sp,-8
 2001bb4:	dfc00115 	stw	ra,4(sp)
 2001bb8:	df000015 	stw	fp,0(sp)
 2001bbc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2001bc0:	01414004 	movi	r5,1280
 2001bc4:	01000084 	movi	r4,2
 2001bc8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001bcc:	01414304 	movi	r5,1292
 2001bd0:	0009883a 	mov	r4,zero
 2001bd4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001bd8:	01400204 	movi	r5,8
 2001bdc:	0009883a 	mov	r4,zero
 2001be0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 2001be4:	0140b404 	movi	r5,720
 2001be8:	0009883a 	mov	r4,zero
 2001bec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2001bf0:	01400044 	movi	r5,1
 2001bf4:	0009883a 	mov	r4,zero
 2001bf8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001bfc:	014004c4 	movi	r5,19
 2001c00:	0009883a 	mov	r4,zero
 2001c04:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001c08:	01414504 	movi	r5,1300
 2001c0c:	0009883a 	mov	r4,zero
 2001c10:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 2001c14:	01428844 	movi	r5,2593
 2001c18:	0009883a 	mov	r4,zero
 2001c1c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 2001c20:	000b883a 	mov	r5,zero
 2001c24:	0009883a 	mov	r4,zero
 2001c28:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001c2c:	000b883a 	mov	r5,zero
 2001c30:	0009883a 	mov	r4,zero
 2001c34:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001c38:	000b883a 	mov	r5,zero
 2001c3c:	0009883a 	mov	r4,zero
 2001c40:	20002f40 	call	20002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 2001c44:	000b883a 	mov	r5,zero
 2001c48:	0009883a 	mov	r4,zero
 2001c4c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 2001c50:	000b883a 	mov	r5,zero
 2001c54:	0009883a 	mov	r4,zero
 2001c58:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 2001c5c:	0140a404 	movi	r5,656
 2001c60:	0009883a 	mov	r4,zero
 2001c64:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 2001c68:	01401044 	movi	r5,65
 2001c6c:	0009883a 	mov	r4,zero
 2001c70:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001c74:	014004c4 	movi	r5,19
 2001c78:	0009883a 	mov	r4,zero
 2001c7c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 2001c80:	000b883a 	mov	r5,zero
 2001c84:	0009883a 	mov	r4,zero
 2001c88:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001c8c:	01414004 	movi	r5,1280
 2001c90:	01006c04 	movi	r4,432
 2001c94:	20011480 	call	2001148 <UsbWrite>
}
 2001c98:	0001883a 	nop
 2001c9c:	e037883a 	mov	sp,fp
 2001ca0:	dfc00117 	ldw	ra,4(sp)
 2001ca4:	df000017 	ldw	fp,0(sp)
 2001ca8:	dec00204 	addi	sp,sp,8
 2001cac:	f800283a 	ret

02001cb0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 2001cb0:	defffe04 	addi	sp,sp,-8
 2001cb4:	dfc00115 	stw	ra,4(sp)
 2001cb8:	df000015 	stw	fp,0(sp)
 2001cbc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2001cc0:	01414004 	movi	r5,1280
 2001cc4:	01000084 	movi	r4,2
 2001cc8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001ccc:	01414304 	movi	r5,1292
 2001cd0:	0009883a 	mov	r4,zero
 2001cd4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001cd8:	01400204 	movi	r5,8
 2001cdc:	0009883a 	mov	r4,zero
 2001ce0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 2001ce4:	0140b404 	movi	r5,720
 2001ce8:	0009883a 	mov	r4,zero
 2001cec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2001cf0:	01400044 	movi	r5,1
 2001cf4:	0009883a 	mov	r4,zero
 2001cf8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001cfc:	014004c4 	movi	r5,19
 2001d00:	0009883a 	mov	r4,zero
 2001d04:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001d08:	01414504 	movi	r5,1300
 2001d0c:	0009883a 	mov	r4,zero
 2001d10:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 2001d14:	0141a044 	movi	r5,1665
 2001d18:	0009883a 	mov	r4,zero
 2001d1c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 2001d20:	01484004 	movi	r5,8448
 2001d24:	0009883a 	mov	r4,zero
 2001d28:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2001d2c:	000b883a 	mov	r5,zero
 2001d30:	0009883a 	mov	r4,zero
 2001d34:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 2001d38:	01401ec4 	movi	r5,123
 2001d3c:	0009883a 	mov	r4,zero
 2001d40:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 2001d44:	01415104 	movi	r5,1348
 2001d48:	0009883a 	mov	r4,zero
 2001d4c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001d50:	01400204 	movi	r5,8
 2001d54:	0009883a 	mov	r4,zero
 2001d58:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001d5c:	0140a404 	movi	r5,656
 2001d60:	0009883a 	mov	r4,zero
 2001d64:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2001d68:	01401044 	movi	r5,65
 2001d6c:	0009883a 	mov	r4,zero
 2001d70:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001d74:	014004c4 	movi	r5,19
 2001d78:	0009883a 	mov	r4,zero
 2001d7c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2001d80:	01414804 	movi	r5,1312
 2001d84:	0009883a 	mov	r4,zero
 2001d88:	20002f40 	call	20002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 2001d8c:	000b883a 	mov	r5,zero
 2001d90:	0009883a 	mov	r4,zero
 2001d94:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 2001d98:	000b883a 	mov	r5,zero
 2001d9c:	0009883a 	mov	r4,zero
 2001da0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 2001da4:	01408404 	movi	r5,528
 2001da8:	0009883a 	mov	r4,zero
 2001dac:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2001db0:	01401044 	movi	r5,65
 2001db4:	0009883a 	mov	r4,zero
 2001db8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2001dbc:	014004c4 	movi	r5,19
 2001dc0:	0009883a 	mov	r4,zero
 2001dc4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 2001dc8:	000b883a 	mov	r5,zero
 2001dcc:	0009883a 	mov	r4,zero
 2001dd0:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2001dd4:	01414004 	movi	r5,1280
 2001dd8:	01006c04 	movi	r4,432
 2001ddc:	20011480 	call	2001148 <UsbWrite>

}
 2001de0:	0001883a 	nop
 2001de4:	e037883a 	mov	sp,fp
 2001de8:	dfc00117 	ldw	ra,4(sp)
 2001dec:	df000017 	ldw	fp,0(sp)
 2001df0:	dec00204 	addi	sp,sp,8
 2001df4:	f800283a 	ret

02001df8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 2001df8:	defffe04 	addi	sp,sp,-8
 2001dfc:	dfc00115 	stw	ra,4(sp)
 2001e00:	df000015 	stw	fp,0(sp)
 2001e04:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 2001e08:	01414004 	movi	r5,1280
 2001e0c:	01000084 	movi	r4,2
 2001e10:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 2001e14:	01414304 	movi	r5,1292
 2001e18:	0009883a 	mov	r4,zero
 2001e1c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 2001e20:	01400204 	movi	r5,8
 2001e24:	0009883a 	mov	r4,zero
 2001e28:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 2001e2c:	0140b404 	movi	r5,720
 2001e30:	0009883a 	mov	r4,zero
 2001e34:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 2001e38:	01400044 	movi	r5,1
 2001e3c:	0009883a 	mov	r4,zero
 2001e40:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 2001e44:	014004c4 	movi	r5,19
 2001e48:	0009883a 	mov	r4,zero
 2001e4c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 2001e50:	01414504 	movi	r5,1300
 2001e54:	0009883a 	mov	r4,zero
 2001e58:	20002f40 	call	20002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 2001e5c:	0141a044 	movi	r5,1665
 2001e60:	0009883a 	mov	r4,zero
 2001e64:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 2001e68:	01488004 	movi	r5,8704
 2001e6c:	0009883a 	mov	r4,zero
 2001e70:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 2001e74:	000b883a 	mov	r5,zero
 2001e78:	0009883a 	mov	r4,zero
 2001e7c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 2001e80:	01401ec4 	movi	r5,123
 2001e84:	0009883a 	mov	r4,zero
 2001e88:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 2001e8c:	01416004 	movi	r5,1408
 2001e90:	0009883a 	mov	r4,zero
 2001e94:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001e98:	01400204 	movi	r5,8
 2001e9c:	0009883a 	mov	r4,zero
 2001ea0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001ea4:	0140a404 	movi	r5,656
 2001ea8:	0009883a 	mov	r4,zero
 2001eac:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 2001eb0:	01401044 	movi	r5,65
 2001eb4:	0009883a 	mov	r4,zero
 2001eb8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001ebc:	014004c4 	movi	r5,19
 2001ec0:	0009883a 	mov	r4,zero
 2001ec4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 2001ec8:	01414804 	movi	r5,1312
 2001ecc:	0009883a 	mov	r4,zero
 2001ed0:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 2001ed4:	01416204 	movi	r5,1416
 2001ed8:	0009883a 	mov	r4,zero
 2001edc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 2001ee0:	01400204 	movi	r5,8
 2001ee4:	0009883a 	mov	r4,zero
 2001ee8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 2001eec:	0140a404 	movi	r5,656
 2001ef0:	0009883a 	mov	r4,zero
 2001ef4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2001ef8:	01400044 	movi	r5,1
 2001efc:	0009883a 	mov	r4,zero
 2001f00:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2001f04:	014004c4 	movi	r5,19
 2001f08:	0009883a 	mov	r4,zero
 2001f0c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 2001f10:	01414b04 	movi	r5,1324
 2001f14:	0009883a 	mov	r4,zero
 2001f18:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 2001f1c:	01416404 	movi	r5,1424
 2001f20:	0009883a 	mov	r4,zero
 2001f24:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 2001f28:	01400204 	movi	r5,8
 2001f2c:	0009883a 	mov	r4,zero
 2001f30:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 2001f34:	0140a404 	movi	r5,656
 2001f38:	0009883a 	mov	r4,zero
 2001f3c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 2001f40:	01401044 	movi	r5,65
 2001f44:	0009883a 	mov	r4,zero
 2001f48:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 2001f4c:	014004c4 	movi	r5,19
 2001f50:	0009883a 	mov	r4,zero
 2001f54:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 2001f58:	01414e04 	movi	r5,1336
 2001f5c:	0009883a 	mov	r4,zero
 2001f60:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 2001f64:	01416604 	movi	r5,1432
 2001f68:	0009883a 	mov	r4,zero
 2001f6c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 2001f70:	01400204 	movi	r5,8
 2001f74:	0009883a 	mov	r4,zero
 2001f78:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 2001f7c:	0140a404 	movi	r5,656
 2001f80:	0009883a 	mov	r4,zero
 2001f84:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 2001f88:	01400044 	movi	r5,1
 2001f8c:	0009883a 	mov	r4,zero
 2001f90:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 2001f94:	014004c4 	movi	r5,19
 2001f98:	0009883a 	mov	r4,zero
 2001f9c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 2001fa0:	01415104 	movi	r5,1348
 2001fa4:	0009883a 	mov	r4,zero
 2001fa8:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 2001fac:	01416804 	movi	r5,1440
 2001fb0:	0009883a 	mov	r4,zero
 2001fb4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 2001fb8:	01400204 	movi	r5,8
 2001fbc:	0009883a 	mov	r4,zero
 2001fc0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 2001fc4:	0140a404 	movi	r5,656
 2001fc8:	0009883a 	mov	r4,zero
 2001fcc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 2001fd0:	01401044 	movi	r5,65
 2001fd4:	0009883a 	mov	r4,zero
 2001fd8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 2001fdc:	014004c4 	movi	r5,19
 2001fe0:	0009883a 	mov	r4,zero
 2001fe4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 2001fe8:	01415404 	movi	r5,1360
 2001fec:	0009883a 	mov	r4,zero
 2001ff0:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 2001ff4:	01416a04 	movi	r5,1448
 2001ff8:	0009883a 	mov	r4,zero
 2001ffc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 2002000:	01400204 	movi	r5,8
 2002004:	0009883a 	mov	r4,zero
 2002008:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 200200c:	0140a404 	movi	r5,656
 2002010:	0009883a 	mov	r4,zero
 2002014:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 2002018:	01400044 	movi	r5,1
 200201c:	0009883a 	mov	r4,zero
 2002020:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 2002024:	014004c4 	movi	r5,19
 2002028:	0009883a 	mov	r4,zero
 200202c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 2002030:	01415704 	movi	r5,1372
 2002034:	0009883a 	mov	r4,zero
 2002038:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 200203c:	01416c04 	movi	r5,1456
 2002040:	0009883a 	mov	r4,zero
 2002044:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 2002048:	01400204 	movi	r5,8
 200204c:	0009883a 	mov	r4,zero
 2002050:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 2002054:	0140a404 	movi	r5,656
 2002058:	0009883a 	mov	r4,zero
 200205c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 2002060:	01401044 	movi	r5,65
 2002064:	0009883a 	mov	r4,zero
 2002068:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 200206c:	014004c4 	movi	r5,19
 2002070:	0009883a 	mov	r4,zero
 2002074:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 2002078:	01415a04 	movi	r5,1384
 200207c:	0009883a 	mov	r4,zero
 2002080:	20002f40 	call	20002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 2002084:	01416e04 	movi	r5,1464
 2002088:	0009883a 	mov	r4,zero
 200208c:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 2002090:	014000c4 	movi	r5,3
 2002094:	0009883a 	mov	r4,zero
 2002098:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 200209c:	0140a404 	movi	r5,656
 20020a0:	0009883a 	mov	r4,zero
 20020a4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 20020a8:	01400044 	movi	r5,1
 20020ac:	0009883a 	mov	r4,zero
 20020b0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 20020b4:	014004c4 	movi	r5,19
 20020b8:	0009883a 	mov	r4,zero
 20020bc:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 20020c0:	01415d04 	movi	r5,1396
 20020c4:	0009883a 	mov	r4,zero
 20020c8:	20002f40 	call	20002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 20020cc:	000b883a 	mov	r5,zero
 20020d0:	0009883a 	mov	r4,zero
 20020d4:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 20020d8:	000b883a 	mov	r5,zero
 20020dc:	0009883a 	mov	r4,zero
 20020e0:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 20020e4:	01408404 	movi	r5,528
 20020e8:	0009883a 	mov	r4,zero
 20020ec:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 20020f0:	01401044 	movi	r5,65
 20020f4:	0009883a 	mov	r4,zero
 20020f8:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 20020fc:	014004c4 	movi	r5,19
 2002100:	0009883a 	mov	r4,zero
 2002104:	20002f40 	call	20002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 2002108:	000b883a 	mov	r5,zero
 200210c:	0009883a 	mov	r4,zero
 2002110:	20002f40 	call	20002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 2002114:	01414004 	movi	r5,1280
 2002118:	01006c04 	movi	r4,432
 200211c:	20011480 	call	2001148 <UsbWrite>

}
 2002120:	0001883a 	nop
 2002124:	e037883a 	mov	sp,fp
 2002128:	dfc00117 	ldw	ra,4(sp)
 200212c:	df000017 	ldw	fp,0(sp)
 2002130:	dec00204 	addi	sp,sp,8
 2002134:	f800283a 	ret

02002138 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 2002138:	defffd04 	addi	sp,sp,-12
 200213c:	dfc00215 	stw	ra,8(sp)
 2002140:	df000115 	stw	fp,4(sp)
 2002144:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 2002148:	01005104 	movi	r4,324
 200214c:	20011a00 	call	20011a0 <UsbRead>
 2002150:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 2002154:	000b883a 	mov	r5,zero
 2002158:	01005104 	movi	r4,324
 200215c:	20011480 	call	2001148 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 2002160:	00000d06 	br	2002198 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 2002164:	e0bfff0b 	ldhu	r2,-4(fp)
 2002168:	10000526 	beq	r2,zero,2002180 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 200216c:	e0bfff0b 	ldhu	r2,-4(fp)
 2002170:	100b883a 	mov	r5,r2
 2002174:	01008074 	movhi	r4,513
 2002178:	21085904 	addi	r4,r4,8548
 200217c:	20022ec0 	call	20022ec <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 2002180:	01005104 	movi	r4,324
 2002184:	20011a00 	call	20011a0 <UsbRead>
 2002188:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 200218c:	000b883a 	mov	r5,zero
 2002190:	01005104 	movi	r4,324
 2002194:	20011480 	call	2001148 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 2002198:	e0bfff0b 	ldhu	r2,-4(fp)
 200219c:	10840018 	cmpnei	r2,r2,4096
 20021a0:	103ff01e 	bne	r2,zero,2002164 <__alt_data_end+0xff002164>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 20021a4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 20021a8:	e037883a 	mov	sp,fp
 20021ac:	dfc00117 	ldw	ra,4(sp)
 20021b0:	df000017 	ldw	fp,0(sp)
 20021b4:	dec00204 	addi	sp,sp,8
 20021b8:	f800283a 	ret

020021bc <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 20021bc:	defffd04 	addi	sp,sp,-12
 20021c0:	dfc00215 	stw	ra,8(sp)
 20021c4:	df000115 	stw	fp,4(sp)
 20021c8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 20021cc:	010000c4 	movi	r4,3
 20021d0:	20003640 	call	2000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 20021d4:	01005104 	movi	r4,324
 20021d8:	20011a00 	call	20011a0 <UsbRead>
 20021dc:	10bfffcc 	andi	r2,r2,65535
 20021e0:	10840018 	cmpnei	r2,r2,4096
 20021e4:	1000091e 	bne	r2,zero,200220c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 20021e8:	000b883a 	mov	r5,zero
 20021ec:	01005104 	movi	r4,324
 20021f0:	20011480 	call	2001148 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 20021f4:	0001883a 	nop
 20021f8:	010000c4 	movi	r4,3
 20021fc:	20003640 	call	2000364 <IO_read>
 2002200:	10bfffcc 	andi	r2,r2,65535
 2002204:	1080040c 	andi	r2,r2,16
 2002208:	103ffb26 	beq	r2,zero,20021f8 <__alt_data_end+0xff0021f8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 200220c:	01414204 	movi	r5,1288
 2002210:	01000084 	movi	r4,2
 2002214:	20002f40 	call	20002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 2002218:	0009883a 	mov	r4,zero
 200221c:	20003640 	call	2000364 <IO_read>
 2002220:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 2002224:	e0bfff0b 	ldhu	r2,-4(fp)
}
 2002228:	e037883a 	mov	sp,fp
 200222c:	dfc00117 	ldw	ra,4(sp)
 2002230:	df000017 	ldw	fp,0(sp)
 2002234:	dec00204 	addi	sp,sp,8
 2002238:	f800283a 	ret

0200223c <UsbPrintMem>:


void UsbPrintMem()
{
 200223c:	defffc04 	addi	sp,sp,-16
 2002240:	dfc00315 	stw	ra,12(sp)
 2002244:	df000215 	stw	fp,8(sp)
 2002248:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 200224c:	01414004 	movi	r5,1280
 2002250:	01000084 	movi	r4,2
 2002254:	20002f40 	call	20002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
 2002258:	e03ffe15 	stw	zero,-8(fp)
 200225c:	00000e06 	br	2002298 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 2002260:	0009883a 	mov	r4,zero
 2002264:	20003640 	call	2000364 <IO_read>
 2002268:	10bfffcc 	andi	r2,r2,65535
 200226c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 2002270:	e0bffe17 	ldw	r2,-8(fp)
 2002274:	10814004 	addi	r2,r2,1280
 2002278:	e1bfff17 	ldw	r6,-4(fp)
 200227c:	100b883a 	mov	r5,r2
 2002280:	01008074 	movhi	r4,513
 2002284:	21086104 	addi	r4,r4,8580
 2002288:	20022ec0 	call	20022ec <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 200228c:	e0bffe17 	ldw	r2,-8(fp)
 2002290:	10800084 	addi	r2,r2,2
 2002294:	e0bffe15 	stw	r2,-8(fp)
 2002298:	e0bffe17 	ldw	r2,-8(fp)
 200229c:	10803250 	cmplti	r2,r2,201
 20022a0:	103fef1e 	bne	r2,zero,2002260 <__alt_data_end+0xff002260>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 20022a4:	0001883a 	nop
 20022a8:	e037883a 	mov	sp,fp
 20022ac:	dfc00117 	ldw	ra,4(sp)
 20022b0:	df000017 	ldw	fp,0(sp)
 20022b4:	dec00204 	addi	sp,sp,8
 20022b8:	f800283a 	ret

020022bc <_printf_r>:
 20022bc:	defffd04 	addi	sp,sp,-12
 20022c0:	2805883a 	mov	r2,r5
 20022c4:	dfc00015 	stw	ra,0(sp)
 20022c8:	d9800115 	stw	r6,4(sp)
 20022cc:	d9c00215 	stw	r7,8(sp)
 20022d0:	21400217 	ldw	r5,8(r4)
 20022d4:	d9c00104 	addi	r7,sp,4
 20022d8:	100d883a 	mov	r6,r2
 20022dc:	20024940 	call	2002494 <___vfprintf_internal_r>
 20022e0:	dfc00017 	ldw	ra,0(sp)
 20022e4:	dec00304 	addi	sp,sp,12
 20022e8:	f800283a 	ret

020022ec <printf>:
 20022ec:	defffc04 	addi	sp,sp,-16
 20022f0:	dfc00015 	stw	ra,0(sp)
 20022f4:	d9400115 	stw	r5,4(sp)
 20022f8:	d9800215 	stw	r6,8(sp)
 20022fc:	d9c00315 	stw	r7,12(sp)
 2002300:	00808074 	movhi	r2,513
 2002304:	108fd204 	addi	r2,r2,16200
 2002308:	10800017 	ldw	r2,0(r2)
 200230c:	200b883a 	mov	r5,r4
 2002310:	d9800104 	addi	r6,sp,4
 2002314:	11000217 	ldw	r4,8(r2)
 2002318:	20047700 	call	2004770 <__vfprintf_internal>
 200231c:	dfc00017 	ldw	ra,0(sp)
 2002320:	dec00404 	addi	sp,sp,16
 2002324:	f800283a 	ret

02002328 <_puts_r>:
 2002328:	defff604 	addi	sp,sp,-40
 200232c:	dc000715 	stw	r16,28(sp)
 2002330:	2021883a 	mov	r16,r4
 2002334:	2809883a 	mov	r4,r5
 2002338:	dc400815 	stw	r17,32(sp)
 200233c:	dfc00915 	stw	ra,36(sp)
 2002340:	2823883a 	mov	r17,r5
 2002344:	20023fc0 	call	20023fc <strlen>
 2002348:	10c00044 	addi	r3,r2,1
 200234c:	d8800115 	stw	r2,4(sp)
 2002350:	00808074 	movhi	r2,513
 2002354:	10886604 	addi	r2,r2,8600
 2002358:	d8800215 	stw	r2,8(sp)
 200235c:	00800044 	movi	r2,1
 2002360:	d8800315 	stw	r2,12(sp)
 2002364:	00800084 	movi	r2,2
 2002368:	dc400015 	stw	r17,0(sp)
 200236c:	d8c00615 	stw	r3,24(sp)
 2002370:	dec00415 	stw	sp,16(sp)
 2002374:	d8800515 	stw	r2,20(sp)
 2002378:	80000226 	beq	r16,zero,2002384 <_puts_r+0x5c>
 200237c:	80800e17 	ldw	r2,56(r16)
 2002380:	10001426 	beq	r2,zero,20023d4 <_puts_r+0xac>
 2002384:	81400217 	ldw	r5,8(r16)
 2002388:	2880030b 	ldhu	r2,12(r5)
 200238c:	10c8000c 	andi	r3,r2,8192
 2002390:	1800061e 	bne	r3,zero,20023ac <_puts_r+0x84>
 2002394:	29001917 	ldw	r4,100(r5)
 2002398:	00f7ffc4 	movi	r3,-8193
 200239c:	10880014 	ori	r2,r2,8192
 20023a0:	20c6703a 	and	r3,r4,r3
 20023a4:	2880030d 	sth	r2,12(r5)
 20023a8:	28c01915 	stw	r3,100(r5)
 20023ac:	d9800404 	addi	r6,sp,16
 20023b0:	8009883a 	mov	r4,r16
 20023b4:	2006cd80 	call	2006cd8 <__sfvwrite_r>
 20023b8:	1000091e 	bne	r2,zero,20023e0 <_puts_r+0xb8>
 20023bc:	00800284 	movi	r2,10
 20023c0:	dfc00917 	ldw	ra,36(sp)
 20023c4:	dc400817 	ldw	r17,32(sp)
 20023c8:	dc000717 	ldw	r16,28(sp)
 20023cc:	dec00a04 	addi	sp,sp,40
 20023d0:	f800283a 	ret
 20023d4:	8009883a 	mov	r4,r16
 20023d8:	20068540 	call	2006854 <__sinit>
 20023dc:	003fe906 	br	2002384 <__alt_data_end+0xff002384>
 20023e0:	00bfffc4 	movi	r2,-1
 20023e4:	003ff606 	br	20023c0 <__alt_data_end+0xff0023c0>

020023e8 <puts>:
 20023e8:	00808074 	movhi	r2,513
 20023ec:	108fd204 	addi	r2,r2,16200
 20023f0:	200b883a 	mov	r5,r4
 20023f4:	11000017 	ldw	r4,0(r2)
 20023f8:	20023281 	jmpi	2002328 <_puts_r>

020023fc <strlen>:
 20023fc:	208000cc 	andi	r2,r4,3
 2002400:	10002026 	beq	r2,zero,2002484 <strlen+0x88>
 2002404:	20800007 	ldb	r2,0(r4)
 2002408:	10002026 	beq	r2,zero,200248c <strlen+0x90>
 200240c:	2005883a 	mov	r2,r4
 2002410:	00000206 	br	200241c <strlen+0x20>
 2002414:	10c00007 	ldb	r3,0(r2)
 2002418:	18001826 	beq	r3,zero,200247c <strlen+0x80>
 200241c:	10800044 	addi	r2,r2,1
 2002420:	10c000cc 	andi	r3,r2,3
 2002424:	183ffb1e 	bne	r3,zero,2002414 <__alt_data_end+0xff002414>
 2002428:	10c00017 	ldw	r3,0(r2)
 200242c:	01ffbff4 	movhi	r7,65279
 2002430:	39ffbfc4 	addi	r7,r7,-257
 2002434:	00ca303a 	nor	r5,zero,r3
 2002438:	01a02074 	movhi	r6,32897
 200243c:	19c7883a 	add	r3,r3,r7
 2002440:	31a02004 	addi	r6,r6,-32640
 2002444:	1946703a 	and	r3,r3,r5
 2002448:	1986703a 	and	r3,r3,r6
 200244c:	1800091e 	bne	r3,zero,2002474 <strlen+0x78>
 2002450:	10800104 	addi	r2,r2,4
 2002454:	10c00017 	ldw	r3,0(r2)
 2002458:	19cb883a 	add	r5,r3,r7
 200245c:	00c6303a 	nor	r3,zero,r3
 2002460:	28c6703a 	and	r3,r5,r3
 2002464:	1986703a 	and	r3,r3,r6
 2002468:	183ff926 	beq	r3,zero,2002450 <__alt_data_end+0xff002450>
 200246c:	00000106 	br	2002474 <strlen+0x78>
 2002470:	10800044 	addi	r2,r2,1
 2002474:	10c00007 	ldb	r3,0(r2)
 2002478:	183ffd1e 	bne	r3,zero,2002470 <__alt_data_end+0xff002470>
 200247c:	1105c83a 	sub	r2,r2,r4
 2002480:	f800283a 	ret
 2002484:	2005883a 	mov	r2,r4
 2002488:	003fe706 	br	2002428 <__alt_data_end+0xff002428>
 200248c:	0005883a 	mov	r2,zero
 2002490:	f800283a 	ret

02002494 <___vfprintf_internal_r>:
 2002494:	deffb804 	addi	sp,sp,-288
 2002498:	dfc04715 	stw	ra,284(sp)
 200249c:	ddc04515 	stw	r23,276(sp)
 20024a0:	dd404315 	stw	r21,268(sp)
 20024a4:	d9002d15 	stw	r4,180(sp)
 20024a8:	282f883a 	mov	r23,r5
 20024ac:	302b883a 	mov	r21,r6
 20024b0:	d9c02e15 	stw	r7,184(sp)
 20024b4:	df004615 	stw	fp,280(sp)
 20024b8:	dd804415 	stw	r22,272(sp)
 20024bc:	dd004215 	stw	r20,264(sp)
 20024c0:	dcc04115 	stw	r19,260(sp)
 20024c4:	dc804015 	stw	r18,256(sp)
 20024c8:	dc403f15 	stw	r17,252(sp)
 20024cc:	dc003e15 	stw	r16,248(sp)
 20024d0:	20073d40 	call	20073d4 <_localeconv_r>
 20024d4:	10800017 	ldw	r2,0(r2)
 20024d8:	1009883a 	mov	r4,r2
 20024dc:	d8803415 	stw	r2,208(sp)
 20024e0:	20023fc0 	call	20023fc <strlen>
 20024e4:	d8803715 	stw	r2,220(sp)
 20024e8:	d8802d17 	ldw	r2,180(sp)
 20024ec:	10000226 	beq	r2,zero,20024f8 <___vfprintf_internal_r+0x64>
 20024f0:	10800e17 	ldw	r2,56(r2)
 20024f4:	1000fb26 	beq	r2,zero,20028e4 <___vfprintf_internal_r+0x450>
 20024f8:	b880030b 	ldhu	r2,12(r23)
 20024fc:	10c8000c 	andi	r3,r2,8192
 2002500:	1800061e 	bne	r3,zero,200251c <___vfprintf_internal_r+0x88>
 2002504:	b9001917 	ldw	r4,100(r23)
 2002508:	00f7ffc4 	movi	r3,-8193
 200250c:	10880014 	ori	r2,r2,8192
 2002510:	20c6703a 	and	r3,r4,r3
 2002514:	b880030d 	sth	r2,12(r23)
 2002518:	b8c01915 	stw	r3,100(r23)
 200251c:	10c0020c 	andi	r3,r2,8
 2002520:	1800c326 	beq	r3,zero,2002830 <___vfprintf_internal_r+0x39c>
 2002524:	b8c00417 	ldw	r3,16(r23)
 2002528:	1800c126 	beq	r3,zero,2002830 <___vfprintf_internal_r+0x39c>
 200252c:	1080068c 	andi	r2,r2,26
 2002530:	00c00284 	movi	r3,10
 2002534:	10c0c626 	beq	r2,r3,2002850 <___vfprintf_internal_r+0x3bc>
 2002538:	d8c00404 	addi	r3,sp,16
 200253c:	05008074 	movhi	r20,513
 2002540:	d9001e04 	addi	r4,sp,120
 2002544:	a5087784 	addi	r20,r20,8670
 2002548:	d8c01e15 	stw	r3,120(sp)
 200254c:	d8002015 	stw	zero,128(sp)
 2002550:	d8001f15 	stw	zero,124(sp)
 2002554:	d8003315 	stw	zero,204(sp)
 2002558:	d8003615 	stw	zero,216(sp)
 200255c:	d8003815 	stw	zero,224(sp)
 2002560:	1811883a 	mov	r8,r3
 2002564:	d8003915 	stw	zero,228(sp)
 2002568:	d8003a15 	stw	zero,232(sp)
 200256c:	d8002f15 	stw	zero,188(sp)
 2002570:	d9002815 	stw	r4,160(sp)
 2002574:	a8800007 	ldb	r2,0(r21)
 2002578:	10028b26 	beq	r2,zero,2002fa8 <___vfprintf_internal_r+0xb14>
 200257c:	00c00944 	movi	r3,37
 2002580:	a823883a 	mov	r17,r21
 2002584:	10c0021e 	bne	r2,r3,2002590 <___vfprintf_internal_r+0xfc>
 2002588:	00001406 	br	20025dc <___vfprintf_internal_r+0x148>
 200258c:	10c00326 	beq	r2,r3,200259c <___vfprintf_internal_r+0x108>
 2002590:	8c400044 	addi	r17,r17,1
 2002594:	88800007 	ldb	r2,0(r17)
 2002598:	103ffc1e 	bne	r2,zero,200258c <__alt_data_end+0xff00258c>
 200259c:	8d61c83a 	sub	r16,r17,r21
 20025a0:	80000e26 	beq	r16,zero,20025dc <___vfprintf_internal_r+0x148>
 20025a4:	d8c02017 	ldw	r3,128(sp)
 20025a8:	d8801f17 	ldw	r2,124(sp)
 20025ac:	45400015 	stw	r21,0(r8)
 20025b0:	1c07883a 	add	r3,r3,r16
 20025b4:	10800044 	addi	r2,r2,1
 20025b8:	d8c02015 	stw	r3,128(sp)
 20025bc:	44000115 	stw	r16,4(r8)
 20025c0:	d8801f15 	stw	r2,124(sp)
 20025c4:	00c001c4 	movi	r3,7
 20025c8:	1880a916 	blt	r3,r2,2002870 <___vfprintf_internal_r+0x3dc>
 20025cc:	42000204 	addi	r8,r8,8
 20025d0:	d9402f17 	ldw	r5,188(sp)
 20025d4:	2c0b883a 	add	r5,r5,r16
 20025d8:	d9402f15 	stw	r5,188(sp)
 20025dc:	88800007 	ldb	r2,0(r17)
 20025e0:	1000aa26 	beq	r2,zero,200288c <___vfprintf_internal_r+0x3f8>
 20025e4:	8d400044 	addi	r21,r17,1
 20025e8:	8c400047 	ldb	r17,1(r17)
 20025ec:	0021883a 	mov	r16,zero
 20025f0:	00bfffc4 	movi	r2,-1
 20025f4:	0025883a 	mov	r18,zero
 20025f8:	dc002905 	stb	r16,164(sp)
 20025fc:	d8002785 	stb	zero,158(sp)
 2002600:	d8002b05 	stb	zero,172(sp)
 2002604:	d8802a15 	stw	r2,168(sp)
 2002608:	d8003115 	stw	zero,196(sp)
 200260c:	04c01604 	movi	r19,88
 2002610:	05800244 	movi	r22,9
 2002614:	9021883a 	mov	r16,r18
 2002618:	4039883a 	mov	fp,r8
 200261c:	ad400044 	addi	r21,r21,1
 2002620:	88bff804 	addi	r2,r17,-32
 2002624:	98833236 	bltu	r19,r2,20032f0 <___vfprintf_internal_r+0xe5c>
 2002628:	100490ba 	slli	r2,r2,2
 200262c:	00c08034 	movhi	r3,512
 2002630:	18c99004 	addi	r3,r3,9792
 2002634:	10c5883a 	add	r2,r2,r3
 2002638:	10800017 	ldw	r2,0(r2)
 200263c:	1000683a 	jmp	r2
 2002640:	020031e8 	cmpgeui	r8,zero,199
 2002644:	020032f0 	cmpltui	r8,zero,203
 2002648:	020032f0 	cmpltui	r8,zero,203
 200264c:	02003208 	cmpgei	r8,zero,200
 2002650:	020032f0 	cmpltui	r8,zero,203
 2002654:	020032f0 	cmpltui	r8,zero,203
 2002658:	020032f0 	cmpltui	r8,zero,203
 200265c:	020032f0 	cmpltui	r8,zero,203
 2002660:	020032f0 	cmpltui	r8,zero,203
 2002664:	020032f0 	cmpltui	r8,zero,203
 2002668:	020028f0 	cmpltui	r8,zero,163
 200266c:	020030f8 	rdprs	r8,zero,195
 2002670:	020032f0 	cmpltui	r8,zero,203
 2002674:	020027b4 	movhi	r8,158
 2002678:	02002914 	movui	r8,164
 200267c:	020032f0 	cmpltui	r8,zero,203
 2002680:	02002964 	muli	r8,zero,165
 2002684:	02002970 	cmpltui	r8,zero,165
 2002688:	02002970 	cmpltui	r8,zero,165
 200268c:	02002970 	cmpltui	r8,zero,165
 2002690:	02002970 	cmpltui	r8,zero,165
 2002694:	02002970 	cmpltui	r8,zero,165
 2002698:	02002970 	cmpltui	r8,zero,165
 200269c:	02002970 	cmpltui	r8,zero,165
 20026a0:	02002970 	cmpltui	r8,zero,165
 20026a4:	02002970 	cmpltui	r8,zero,165
 20026a8:	020032f0 	cmpltui	r8,zero,203
 20026ac:	020032f0 	cmpltui	r8,zero,203
 20026b0:	020032f0 	cmpltui	r8,zero,203
 20026b4:	020032f0 	cmpltui	r8,zero,203
 20026b8:	020032f0 	cmpltui	r8,zero,203
 20026bc:	020032f0 	cmpltui	r8,zero,203
 20026c0:	020032f0 	cmpltui	r8,zero,203
 20026c4:	020032f0 	cmpltui	r8,zero,203
 20026c8:	020032f0 	cmpltui	r8,zero,203
 20026cc:	020032f0 	cmpltui	r8,zero,203
 20026d0:	020029ac 	andhi	r8,zero,166
 20026d4:	02002a74 	movhi	r8,169
 20026d8:	020032f0 	cmpltui	r8,zero,203
 20026dc:	02002a74 	movhi	r8,169
 20026e0:	020032f0 	cmpltui	r8,zero,203
 20026e4:	020032f0 	cmpltui	r8,zero,203
 20026e8:	020032f0 	cmpltui	r8,zero,203
 20026ec:	020032f0 	cmpltui	r8,zero,203
 20026f0:	02002b20 	cmpeqi	r8,zero,172
 20026f4:	020032f0 	cmpltui	r8,zero,203
 20026f8:	020032f0 	cmpltui	r8,zero,203
 20026fc:	02002b2c 	andhi	r8,zero,172
 2002700:	020032f0 	cmpltui	r8,zero,203
 2002704:	020032f0 	cmpltui	r8,zero,203
 2002708:	020032f0 	cmpltui	r8,zero,203
 200270c:	020032f0 	cmpltui	r8,zero,203
 2002710:	020032f0 	cmpltui	r8,zero,203
 2002714:	02002fb0 	cmpltui	r8,zero,190
 2002718:	020032f0 	cmpltui	r8,zero,203
 200271c:	020032f0 	cmpltui	r8,zero,203
 2002720:	0200301c 	xori	r8,zero,192
 2002724:	020032f0 	cmpltui	r8,zero,203
 2002728:	020032f0 	cmpltui	r8,zero,203
 200272c:	020032f0 	cmpltui	r8,zero,203
 2002730:	020032f0 	cmpltui	r8,zero,203
 2002734:	020032f0 	cmpltui	r8,zero,203
 2002738:	020032f0 	cmpltui	r8,zero,203
 200273c:	020032f0 	cmpltui	r8,zero,203
 2002740:	020032f0 	cmpltui	r8,zero,203
 2002744:	020032f0 	cmpltui	r8,zero,203
 2002748:	020032f0 	cmpltui	r8,zero,203
 200274c:	02003294 	movui	r8,202
 2002750:	02003214 	movui	r8,200
 2002754:	02002a74 	movhi	r8,169
 2002758:	02002a74 	movhi	r8,169
 200275c:	02002a74 	movhi	r8,169
 2002760:	02003234 	movhi	r8,200
 2002764:	02003214 	movui	r8,200
 2002768:	020032f0 	cmpltui	r8,zero,203
 200276c:	020032f0 	cmpltui	r8,zero,203
 2002770:	02003240 	call	200324 <__alt_mem_onchip_memory2_0+0x200324>
 2002774:	020032f0 	cmpltui	r8,zero,203
 2002778:	02003254 	movui	r8,201
 200277c:	020030d8 	cmpnei	r8,zero,195
 2002780:	020027c0 	call	20027c <__alt_mem_onchip_memory2_0+0x20027c>
 2002784:	02003110 	cmplti	r8,zero,196
 2002788:	020032f0 	cmpltui	r8,zero,203
 200278c:	0200311c 	xori	r8,zero,196
 2002790:	020032f0 	cmpltui	r8,zero,203
 2002794:	02003180 	call	200318 <__alt_mem_onchip_memory2_0+0x200318>
 2002798:	020032f0 	cmpltui	r8,zero,203
 200279c:	020032f0 	cmpltui	r8,zero,203
 20027a0:	020031a0 	cmpeqi	r8,zero,198
 20027a4:	d8c03117 	ldw	r3,196(sp)
 20027a8:	d8802e15 	stw	r2,184(sp)
 20027ac:	00c7c83a 	sub	r3,zero,r3
 20027b0:	d8c03115 	stw	r3,196(sp)
 20027b4:	84000114 	ori	r16,r16,4
 20027b8:	ac400007 	ldb	r17,0(r21)
 20027bc:	003f9706 	br	200261c <__alt_data_end+0xff00261c>
 20027c0:	00800c04 	movi	r2,48
 20027c4:	d8802705 	stb	r2,156(sp)
 20027c8:	00801e04 	movi	r2,120
 20027cc:	d8802745 	stb	r2,157(sp)
 20027d0:	d9002a17 	ldw	r4,168(sp)
 20027d4:	d8802e17 	ldw	r2,184(sp)
 20027d8:	d8002785 	stb	zero,158(sp)
 20027dc:	e011883a 	mov	r8,fp
 20027e0:	10c00104 	addi	r3,r2,4
 20027e4:	14c00017 	ldw	r19,0(r2)
 20027e8:	002d883a 	mov	r22,zero
 20027ec:	80800094 	ori	r2,r16,2
 20027f0:	2002ca16 	blt	r4,zero,200331c <___vfprintf_internal_r+0xe88>
 20027f4:	00bfdfc4 	movi	r2,-129
 20027f8:	80a4703a 	and	r18,r16,r2
 20027fc:	d8c02e15 	stw	r3,184(sp)
 2002800:	94800094 	ori	r18,r18,2
 2002804:	9802b41e 	bne	r19,zero,20032d8 <___vfprintf_internal_r+0xe44>
 2002808:	01408074 	movhi	r5,513
 200280c:	29487004 	addi	r5,r5,8640
 2002810:	d9403915 	stw	r5,228(sp)
 2002814:	04401e04 	movi	r17,120
 2002818:	d8802a17 	ldw	r2,168(sp)
 200281c:	0039883a 	mov	fp,zero
 2002820:	1001fa26 	beq	r2,zero,200300c <___vfprintf_internal_r+0xb78>
 2002824:	0027883a 	mov	r19,zero
 2002828:	002d883a 	mov	r22,zero
 200282c:	00021906 	br	2003094 <___vfprintf_internal_r+0xc00>
 2002830:	d9002d17 	ldw	r4,180(sp)
 2002834:	b80b883a 	mov	r5,r23
 2002838:	20048480 	call	2004848 <__swsetup_r>
 200283c:	1005dc1e 	bne	r2,zero,2003fb0 <___vfprintf_internal_r+0x1b1c>
 2002840:	b880030b 	ldhu	r2,12(r23)
 2002844:	00c00284 	movi	r3,10
 2002848:	1080068c 	andi	r2,r2,26
 200284c:	10ff3a1e 	bne	r2,r3,2002538 <__alt_data_end+0xff002538>
 2002850:	b880038f 	ldh	r2,14(r23)
 2002854:	103f3816 	blt	r2,zero,2002538 <__alt_data_end+0xff002538>
 2002858:	d9c02e17 	ldw	r7,184(sp)
 200285c:	d9002d17 	ldw	r4,180(sp)
 2002860:	a80d883a 	mov	r6,r21
 2002864:	b80b883a 	mov	r5,r23
 2002868:	200478c0 	call	200478c <__sbprintf>
 200286c:	00001106 	br	20028b4 <___vfprintf_internal_r+0x420>
 2002870:	d9002d17 	ldw	r4,180(sp)
 2002874:	d9801e04 	addi	r6,sp,120
 2002878:	b80b883a 	mov	r5,r23
 200287c:	2009c740 	call	2009c74 <__sprint_r>
 2002880:	1000081e 	bne	r2,zero,20028a4 <___vfprintf_internal_r+0x410>
 2002884:	da000404 	addi	r8,sp,16
 2002888:	003f5106 	br	20025d0 <__alt_data_end+0xff0025d0>
 200288c:	d8802017 	ldw	r2,128(sp)
 2002890:	10000426 	beq	r2,zero,20028a4 <___vfprintf_internal_r+0x410>
 2002894:	d9002d17 	ldw	r4,180(sp)
 2002898:	d9801e04 	addi	r6,sp,120
 200289c:	b80b883a 	mov	r5,r23
 20028a0:	2009c740 	call	2009c74 <__sprint_r>
 20028a4:	b880030b 	ldhu	r2,12(r23)
 20028a8:	1080100c 	andi	r2,r2,64
 20028ac:	1005c01e 	bne	r2,zero,2003fb0 <___vfprintf_internal_r+0x1b1c>
 20028b0:	d8802f17 	ldw	r2,188(sp)
 20028b4:	dfc04717 	ldw	ra,284(sp)
 20028b8:	df004617 	ldw	fp,280(sp)
 20028bc:	ddc04517 	ldw	r23,276(sp)
 20028c0:	dd804417 	ldw	r22,272(sp)
 20028c4:	dd404317 	ldw	r21,268(sp)
 20028c8:	dd004217 	ldw	r20,264(sp)
 20028cc:	dcc04117 	ldw	r19,260(sp)
 20028d0:	dc804017 	ldw	r18,256(sp)
 20028d4:	dc403f17 	ldw	r17,252(sp)
 20028d8:	dc003e17 	ldw	r16,248(sp)
 20028dc:	dec04804 	addi	sp,sp,288
 20028e0:	f800283a 	ret
 20028e4:	d9002d17 	ldw	r4,180(sp)
 20028e8:	20068540 	call	2006854 <__sinit>
 20028ec:	003f0206 	br	20024f8 <__alt_data_end+0xff0024f8>
 20028f0:	d9002e17 	ldw	r4,184(sp)
 20028f4:	d9402e17 	ldw	r5,184(sp)
 20028f8:	21000017 	ldw	r4,0(r4)
 20028fc:	28800104 	addi	r2,r5,4
 2002900:	d9003115 	stw	r4,196(sp)
 2002904:	203fa716 	blt	r4,zero,20027a4 <__alt_data_end+0xff0027a4>
 2002908:	d8802e15 	stw	r2,184(sp)
 200290c:	ac400007 	ldb	r17,0(r21)
 2002910:	003f4206 	br	200261c <__alt_data_end+0xff00261c>
 2002914:	ac400007 	ldb	r17,0(r21)
 2002918:	01000a84 	movi	r4,42
 200291c:	a8c00044 	addi	r3,r21,1
 2002920:	89075826 	beq	r17,r4,2004684 <___vfprintf_internal_r+0x21f0>
 2002924:	8cbff404 	addi	r18,r17,-48
 2002928:	b486ae36 	bltu	r22,r18,20043e4 <___vfprintf_internal_r+0x1f50>
 200292c:	0009883a 	mov	r4,zero
 2002930:	1823883a 	mov	r17,r3
 2002934:	01400284 	movi	r5,10
 2002938:	200c9300 	call	200c930 <__mulsi3>
 200293c:	88c00007 	ldb	r3,0(r17)
 2002940:	1489883a 	add	r4,r2,r18
 2002944:	8d400044 	addi	r21,r17,1
 2002948:	1cbff404 	addi	r18,r3,-48
 200294c:	a823883a 	mov	r17,r21
 2002950:	b4bff82e 	bgeu	r22,r18,2002934 <__alt_data_end+0xff002934>
 2002954:	1823883a 	mov	r17,r3
 2002958:	2005f616 	blt	r4,zero,2004134 <___vfprintf_internal_r+0x1ca0>
 200295c:	d9002a15 	stw	r4,168(sp)
 2002960:	003f2f06 	br	2002620 <__alt_data_end+0xff002620>
 2002964:	84002014 	ori	r16,r16,128
 2002968:	ac400007 	ldb	r17,0(r21)
 200296c:	003f2b06 	br	200261c <__alt_data_end+0xff00261c>
 2002970:	8cbff404 	addi	r18,r17,-48
 2002974:	d8003115 	stw	zero,196(sp)
 2002978:	0009883a 	mov	r4,zero
 200297c:	a823883a 	mov	r17,r21
 2002980:	01400284 	movi	r5,10
 2002984:	200c9300 	call	200c930 <__mulsi3>
 2002988:	88c00007 	ldb	r3,0(r17)
 200298c:	9089883a 	add	r4,r18,r2
 2002990:	ad400044 	addi	r21,r21,1
 2002994:	1cbff404 	addi	r18,r3,-48
 2002998:	a823883a 	mov	r17,r21
 200299c:	b4bff82e 	bgeu	r22,r18,2002980 <__alt_data_end+0xff002980>
 20029a0:	1823883a 	mov	r17,r3
 20029a4:	d9003115 	stw	r4,196(sp)
 20029a8:	003f1d06 	br	2002620 <__alt_data_end+0xff002620>
 20029ac:	8025883a 	mov	r18,r16
 20029b0:	dc002903 	ldbu	r16,164(sp)
 20029b4:	e011883a 	mov	r8,fp
 20029b8:	84003fcc 	andi	r16,r16,255
 20029bc:	8007531e 	bne	r16,zero,200470c <___vfprintf_internal_r+0x2278>
 20029c0:	94800414 	ori	r18,r18,16
 20029c4:	9080080c 	andi	r2,r18,32
 20029c8:	1003a326 	beq	r2,zero,2003858 <___vfprintf_internal_r+0x13c4>
 20029cc:	d9002e17 	ldw	r4,184(sp)
 20029d0:	20800117 	ldw	r2,4(r4)
 20029d4:	24c00017 	ldw	r19,0(r4)
 20029d8:	21000204 	addi	r4,r4,8
 20029dc:	d9002e15 	stw	r4,184(sp)
 20029e0:	102d883a 	mov	r22,r2
 20029e4:	10047316 	blt	r2,zero,2003bb4 <___vfprintf_internal_r+0x1720>
 20029e8:	d9002a17 	ldw	r4,168(sp)
 20029ec:	df002783 	ldbu	fp,158(sp)
 20029f0:	2003e416 	blt	r4,zero,2003984 <___vfprintf_internal_r+0x14f0>
 20029f4:	00ffdfc4 	movi	r3,-129
 20029f8:	9d84b03a 	or	r2,r19,r22
 20029fc:	90e4703a 	and	r18,r18,r3
 2002a00:	10018026 	beq	r2,zero,2003004 <___vfprintf_internal_r+0xb70>
 2002a04:	b003ab26 	beq	r22,zero,20038b4 <___vfprintf_internal_r+0x1420>
 2002a08:	dc402915 	stw	r17,164(sp)
 2002a0c:	dc001e04 	addi	r16,sp,120
 2002a10:	b023883a 	mov	r17,r22
 2002a14:	402d883a 	mov	r22,r8
 2002a18:	9809883a 	mov	r4,r19
 2002a1c:	880b883a 	mov	r5,r17
 2002a20:	01800284 	movi	r6,10
 2002a24:	000f883a 	mov	r7,zero
 2002a28:	200c1b80 	call	200c1b8 <__umoddi3>
 2002a2c:	10800c04 	addi	r2,r2,48
 2002a30:	843fffc4 	addi	r16,r16,-1
 2002a34:	9809883a 	mov	r4,r19
 2002a38:	880b883a 	mov	r5,r17
 2002a3c:	80800005 	stb	r2,0(r16)
 2002a40:	01800284 	movi	r6,10
 2002a44:	000f883a 	mov	r7,zero
 2002a48:	200bbbc0 	call	200bbbc <__udivdi3>
 2002a4c:	1027883a 	mov	r19,r2
 2002a50:	10c4b03a 	or	r2,r2,r3
 2002a54:	1823883a 	mov	r17,r3
 2002a58:	103fef1e 	bne	r2,zero,2002a18 <__alt_data_end+0xff002a18>
 2002a5c:	d8c02817 	ldw	r3,160(sp)
 2002a60:	dc402917 	ldw	r17,164(sp)
 2002a64:	b011883a 	mov	r8,r22
 2002a68:	1c07c83a 	sub	r3,r3,r16
 2002a6c:	d8c02b15 	stw	r3,172(sp)
 2002a70:	00005f06 	br	2002bf0 <___vfprintf_internal_r+0x75c>
 2002a74:	8025883a 	mov	r18,r16
 2002a78:	dc002903 	ldbu	r16,164(sp)
 2002a7c:	e011883a 	mov	r8,fp
 2002a80:	84003fcc 	andi	r16,r16,255
 2002a84:	80071e1e 	bne	r16,zero,2004700 <___vfprintf_internal_r+0x226c>
 2002a88:	9080020c 	andi	r2,r18,8
 2002a8c:	1004af26 	beq	r2,zero,2003d4c <___vfprintf_internal_r+0x18b8>
 2002a90:	d9002e17 	ldw	r4,184(sp)
 2002a94:	d9402e17 	ldw	r5,184(sp)
 2002a98:	d8802e17 	ldw	r2,184(sp)
 2002a9c:	21000017 	ldw	r4,0(r4)
 2002aa0:	29400117 	ldw	r5,4(r5)
 2002aa4:	10800204 	addi	r2,r2,8
 2002aa8:	d9003615 	stw	r4,216(sp)
 2002aac:	d9403815 	stw	r5,224(sp)
 2002ab0:	d8802e15 	stw	r2,184(sp)
 2002ab4:	d9003617 	ldw	r4,216(sp)
 2002ab8:	d9403817 	ldw	r5,224(sp)
 2002abc:	da003d15 	stw	r8,244(sp)
 2002ac0:	04000044 	movi	r16,1
 2002ac4:	20098980 	call	2009898 <__fpclassifyd>
 2002ac8:	da003d17 	ldw	r8,244(sp)
 2002acc:	1404441e 	bne	r2,r16,2003be0 <___vfprintf_internal_r+0x174c>
 2002ad0:	d9003617 	ldw	r4,216(sp)
 2002ad4:	d9403817 	ldw	r5,224(sp)
 2002ad8:	000d883a 	mov	r6,zero
 2002adc:	000f883a 	mov	r7,zero
 2002ae0:	200dd380 	call	200dd38 <__ledf2>
 2002ae4:	da003d17 	ldw	r8,244(sp)
 2002ae8:	1005e316 	blt	r2,zero,2004278 <___vfprintf_internal_r+0x1de4>
 2002aec:	df002783 	ldbu	fp,158(sp)
 2002af0:	008011c4 	movi	r2,71
 2002af4:	1445580e 	bge	r2,r17,2004058 <___vfprintf_internal_r+0x1bc4>
 2002af8:	04008074 	movhi	r16,513
 2002afc:	84086804 	addi	r16,r16,8608
 2002b00:	00c000c4 	movi	r3,3
 2002b04:	00bfdfc4 	movi	r2,-129
 2002b08:	d8c02915 	stw	r3,164(sp)
 2002b0c:	90a4703a 	and	r18,r18,r2
 2002b10:	d8c02b15 	stw	r3,172(sp)
 2002b14:	d8002a15 	stw	zero,168(sp)
 2002b18:	d8003215 	stw	zero,200(sp)
 2002b1c:	00003a06 	br	2002c08 <___vfprintf_internal_r+0x774>
 2002b20:	84000214 	ori	r16,r16,8
 2002b24:	ac400007 	ldb	r17,0(r21)
 2002b28:	003ebc06 	br	200261c <__alt_data_end+0xff00261c>
 2002b2c:	8025883a 	mov	r18,r16
 2002b30:	dc002903 	ldbu	r16,164(sp)
 2002b34:	e011883a 	mov	r8,fp
 2002b38:	84003fcc 	andi	r16,r16,255
 2002b3c:	8007001e 	bne	r16,zero,2004740 <___vfprintf_internal_r+0x22ac>
 2002b40:	94800414 	ori	r18,r18,16
 2002b44:	9080080c 	andi	r2,r18,32
 2002b48:	1002fa26 	beq	r2,zero,2003734 <___vfprintf_internal_r+0x12a0>
 2002b4c:	d9002e17 	ldw	r4,184(sp)
 2002b50:	d9402a17 	ldw	r5,168(sp)
 2002b54:	d8002785 	stb	zero,158(sp)
 2002b58:	20800204 	addi	r2,r4,8
 2002b5c:	24c00017 	ldw	r19,0(r4)
 2002b60:	25800117 	ldw	r22,4(r4)
 2002b64:	2804b116 	blt	r5,zero,2003e2c <___vfprintf_internal_r+0x1998>
 2002b68:	013fdfc4 	movi	r4,-129
 2002b6c:	9d86b03a 	or	r3,r19,r22
 2002b70:	d8802e15 	stw	r2,184(sp)
 2002b74:	9124703a 	and	r18,r18,r4
 2002b78:	1802fb1e 	bne	r3,zero,2003768 <___vfprintf_internal_r+0x12d4>
 2002b7c:	d8c02a17 	ldw	r3,168(sp)
 2002b80:	0039883a 	mov	fp,zero
 2002b84:	1805e526 	beq	r3,zero,200431c <___vfprintf_internal_r+0x1e88>
 2002b88:	0027883a 	mov	r19,zero
 2002b8c:	002d883a 	mov	r22,zero
 2002b90:	dc001e04 	addi	r16,sp,120
 2002b94:	9806d0fa 	srli	r3,r19,3
 2002b98:	b008977a 	slli	r4,r22,29
 2002b9c:	b02cd0fa 	srli	r22,r22,3
 2002ba0:	9cc001cc 	andi	r19,r19,7
 2002ba4:	98800c04 	addi	r2,r19,48
 2002ba8:	843fffc4 	addi	r16,r16,-1
 2002bac:	20e6b03a 	or	r19,r4,r3
 2002bb0:	80800005 	stb	r2,0(r16)
 2002bb4:	9d86b03a 	or	r3,r19,r22
 2002bb8:	183ff61e 	bne	r3,zero,2002b94 <__alt_data_end+0xff002b94>
 2002bbc:	90c0004c 	andi	r3,r18,1
 2002bc0:	18014126 	beq	r3,zero,20030c8 <___vfprintf_internal_r+0xc34>
 2002bc4:	10803fcc 	andi	r2,r2,255
 2002bc8:	1080201c 	xori	r2,r2,128
 2002bcc:	10bfe004 	addi	r2,r2,-128
 2002bd0:	00c00c04 	movi	r3,48
 2002bd4:	10c13c26 	beq	r2,r3,20030c8 <___vfprintf_internal_r+0xc34>
 2002bd8:	80ffffc5 	stb	r3,-1(r16)
 2002bdc:	d8c02817 	ldw	r3,160(sp)
 2002be0:	80bfffc4 	addi	r2,r16,-1
 2002be4:	1021883a 	mov	r16,r2
 2002be8:	1887c83a 	sub	r3,r3,r2
 2002bec:	d8c02b15 	stw	r3,172(sp)
 2002bf0:	d8802b17 	ldw	r2,172(sp)
 2002bf4:	d9002a17 	ldw	r4,168(sp)
 2002bf8:	1100010e 	bge	r2,r4,2002c00 <___vfprintf_internal_r+0x76c>
 2002bfc:	2005883a 	mov	r2,r4
 2002c00:	d8802915 	stw	r2,164(sp)
 2002c04:	d8003215 	stw	zero,200(sp)
 2002c08:	e7003fcc 	andi	fp,fp,255
 2002c0c:	e700201c 	xori	fp,fp,128
 2002c10:	e73fe004 	addi	fp,fp,-128
 2002c14:	e0000326 	beq	fp,zero,2002c24 <___vfprintf_internal_r+0x790>
 2002c18:	d8c02917 	ldw	r3,164(sp)
 2002c1c:	18c00044 	addi	r3,r3,1
 2002c20:	d8c02915 	stw	r3,164(sp)
 2002c24:	90c0008c 	andi	r3,r18,2
 2002c28:	d8c02c15 	stw	r3,176(sp)
 2002c2c:	18000326 	beq	r3,zero,2002c3c <___vfprintf_internal_r+0x7a8>
 2002c30:	d8c02917 	ldw	r3,164(sp)
 2002c34:	18c00084 	addi	r3,r3,2
 2002c38:	d8c02915 	stw	r3,164(sp)
 2002c3c:	90c0210c 	andi	r3,r18,132
 2002c40:	d8c03015 	stw	r3,192(sp)
 2002c44:	1801c51e 	bne	r3,zero,200335c <___vfprintf_internal_r+0xec8>
 2002c48:	d9003117 	ldw	r4,196(sp)
 2002c4c:	d8c02917 	ldw	r3,164(sp)
 2002c50:	20e7c83a 	sub	r19,r4,r3
 2002c54:	04c1c10e 	bge	zero,r19,200335c <___vfprintf_internal_r+0xec8>
 2002c58:	02400404 	movi	r9,16
 2002c5c:	d8c02017 	ldw	r3,128(sp)
 2002c60:	d8801f17 	ldw	r2,124(sp)
 2002c64:	4cc52f0e 	bge	r9,r19,2004124 <___vfprintf_internal_r+0x1c90>
 2002c68:	01408074 	movhi	r5,513
 2002c6c:	29487b84 	addi	r5,r5,8686
 2002c70:	dc403b15 	stw	r17,236(sp)
 2002c74:	d9403515 	stw	r5,212(sp)
 2002c78:	9823883a 	mov	r17,r19
 2002c7c:	482d883a 	mov	r22,r9
 2002c80:	9027883a 	mov	r19,r18
 2002c84:	070001c4 	movi	fp,7
 2002c88:	8025883a 	mov	r18,r16
 2002c8c:	dc002d17 	ldw	r16,180(sp)
 2002c90:	00000306 	br	2002ca0 <___vfprintf_internal_r+0x80c>
 2002c94:	8c7ffc04 	addi	r17,r17,-16
 2002c98:	42000204 	addi	r8,r8,8
 2002c9c:	b440130e 	bge	r22,r17,2002cec <___vfprintf_internal_r+0x858>
 2002ca0:	01008074 	movhi	r4,513
 2002ca4:	18c00404 	addi	r3,r3,16
 2002ca8:	10800044 	addi	r2,r2,1
 2002cac:	21087b84 	addi	r4,r4,8686
 2002cb0:	41000015 	stw	r4,0(r8)
 2002cb4:	45800115 	stw	r22,4(r8)
 2002cb8:	d8c02015 	stw	r3,128(sp)
 2002cbc:	d8801f15 	stw	r2,124(sp)
 2002cc0:	e0bff40e 	bge	fp,r2,2002c94 <__alt_data_end+0xff002c94>
 2002cc4:	d9801e04 	addi	r6,sp,120
 2002cc8:	b80b883a 	mov	r5,r23
 2002ccc:	8009883a 	mov	r4,r16
 2002cd0:	2009c740 	call	2009c74 <__sprint_r>
 2002cd4:	103ef31e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2002cd8:	8c7ffc04 	addi	r17,r17,-16
 2002cdc:	d8c02017 	ldw	r3,128(sp)
 2002ce0:	d8801f17 	ldw	r2,124(sp)
 2002ce4:	da000404 	addi	r8,sp,16
 2002ce8:	b47fed16 	blt	r22,r17,2002ca0 <__alt_data_end+0xff002ca0>
 2002cec:	9021883a 	mov	r16,r18
 2002cf0:	9825883a 	mov	r18,r19
 2002cf4:	8827883a 	mov	r19,r17
 2002cf8:	dc403b17 	ldw	r17,236(sp)
 2002cfc:	d9403517 	ldw	r5,212(sp)
 2002d00:	98c7883a 	add	r3,r19,r3
 2002d04:	10800044 	addi	r2,r2,1
 2002d08:	41400015 	stw	r5,0(r8)
 2002d0c:	44c00115 	stw	r19,4(r8)
 2002d10:	d8c02015 	stw	r3,128(sp)
 2002d14:	d8801f15 	stw	r2,124(sp)
 2002d18:	010001c4 	movi	r4,7
 2002d1c:	2082c516 	blt	r4,r2,2003834 <___vfprintf_internal_r+0x13a0>
 2002d20:	df002787 	ldb	fp,158(sp)
 2002d24:	42000204 	addi	r8,r8,8
 2002d28:	e0000c26 	beq	fp,zero,2002d5c <___vfprintf_internal_r+0x8c8>
 2002d2c:	d8801f17 	ldw	r2,124(sp)
 2002d30:	d9002784 	addi	r4,sp,158
 2002d34:	18c00044 	addi	r3,r3,1
 2002d38:	10800044 	addi	r2,r2,1
 2002d3c:	41000015 	stw	r4,0(r8)
 2002d40:	01000044 	movi	r4,1
 2002d44:	41000115 	stw	r4,4(r8)
 2002d48:	d8c02015 	stw	r3,128(sp)
 2002d4c:	d8801f15 	stw	r2,124(sp)
 2002d50:	010001c4 	movi	r4,7
 2002d54:	20825e16 	blt	r4,r2,20036d0 <___vfprintf_internal_r+0x123c>
 2002d58:	42000204 	addi	r8,r8,8
 2002d5c:	d8802c17 	ldw	r2,176(sp)
 2002d60:	10000c26 	beq	r2,zero,2002d94 <___vfprintf_internal_r+0x900>
 2002d64:	d8801f17 	ldw	r2,124(sp)
 2002d68:	d9002704 	addi	r4,sp,156
 2002d6c:	18c00084 	addi	r3,r3,2
 2002d70:	10800044 	addi	r2,r2,1
 2002d74:	41000015 	stw	r4,0(r8)
 2002d78:	01000084 	movi	r4,2
 2002d7c:	41000115 	stw	r4,4(r8)
 2002d80:	d8c02015 	stw	r3,128(sp)
 2002d84:	d8801f15 	stw	r2,124(sp)
 2002d88:	010001c4 	movi	r4,7
 2002d8c:	20825816 	blt	r4,r2,20036f0 <___vfprintf_internal_r+0x125c>
 2002d90:	42000204 	addi	r8,r8,8
 2002d94:	d9003017 	ldw	r4,192(sp)
 2002d98:	00802004 	movi	r2,128
 2002d9c:	2081bb26 	beq	r4,r2,200348c <___vfprintf_internal_r+0xff8>
 2002da0:	d9402a17 	ldw	r5,168(sp)
 2002da4:	d8802b17 	ldw	r2,172(sp)
 2002da8:	28adc83a 	sub	r22,r5,r2
 2002dac:	0580310e 	bge	zero,r22,2002e74 <___vfprintf_internal_r+0x9e0>
 2002db0:	07000404 	movi	fp,16
 2002db4:	d8801f17 	ldw	r2,124(sp)
 2002db8:	e584360e 	bge	fp,r22,2003e94 <___vfprintf_internal_r+0x1a00>
 2002dbc:	01408074 	movhi	r5,513
 2002dc0:	29487784 	addi	r5,r5,8670
 2002dc4:	dc402a15 	stw	r17,168(sp)
 2002dc8:	d9402c15 	stw	r5,176(sp)
 2002dcc:	b023883a 	mov	r17,r22
 2002dd0:	04c001c4 	movi	r19,7
 2002dd4:	a82d883a 	mov	r22,r21
 2002dd8:	902b883a 	mov	r21,r18
 2002ddc:	8025883a 	mov	r18,r16
 2002de0:	dc002d17 	ldw	r16,180(sp)
 2002de4:	00000306 	br	2002df4 <___vfprintf_internal_r+0x960>
 2002de8:	8c7ffc04 	addi	r17,r17,-16
 2002dec:	42000204 	addi	r8,r8,8
 2002df0:	e440110e 	bge	fp,r17,2002e38 <___vfprintf_internal_r+0x9a4>
 2002df4:	18c00404 	addi	r3,r3,16
 2002df8:	10800044 	addi	r2,r2,1
 2002dfc:	45000015 	stw	r20,0(r8)
 2002e00:	47000115 	stw	fp,4(r8)
 2002e04:	d8c02015 	stw	r3,128(sp)
 2002e08:	d8801f15 	stw	r2,124(sp)
 2002e0c:	98bff60e 	bge	r19,r2,2002de8 <__alt_data_end+0xff002de8>
 2002e10:	d9801e04 	addi	r6,sp,120
 2002e14:	b80b883a 	mov	r5,r23
 2002e18:	8009883a 	mov	r4,r16
 2002e1c:	2009c740 	call	2009c74 <__sprint_r>
 2002e20:	103ea01e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2002e24:	8c7ffc04 	addi	r17,r17,-16
 2002e28:	d8c02017 	ldw	r3,128(sp)
 2002e2c:	d8801f17 	ldw	r2,124(sp)
 2002e30:	da000404 	addi	r8,sp,16
 2002e34:	e47fef16 	blt	fp,r17,2002df4 <__alt_data_end+0xff002df4>
 2002e38:	9021883a 	mov	r16,r18
 2002e3c:	a825883a 	mov	r18,r21
 2002e40:	b02b883a 	mov	r21,r22
 2002e44:	882d883a 	mov	r22,r17
 2002e48:	dc402a17 	ldw	r17,168(sp)
 2002e4c:	d9002c17 	ldw	r4,176(sp)
 2002e50:	1d87883a 	add	r3,r3,r22
 2002e54:	10800044 	addi	r2,r2,1
 2002e58:	41000015 	stw	r4,0(r8)
 2002e5c:	45800115 	stw	r22,4(r8)
 2002e60:	d8c02015 	stw	r3,128(sp)
 2002e64:	d8801f15 	stw	r2,124(sp)
 2002e68:	010001c4 	movi	r4,7
 2002e6c:	20821016 	blt	r4,r2,20036b0 <___vfprintf_internal_r+0x121c>
 2002e70:	42000204 	addi	r8,r8,8
 2002e74:	9080400c 	andi	r2,r18,256
 2002e78:	10013a1e 	bne	r2,zero,2003364 <___vfprintf_internal_r+0xed0>
 2002e7c:	d9402b17 	ldw	r5,172(sp)
 2002e80:	d8801f17 	ldw	r2,124(sp)
 2002e84:	44000015 	stw	r16,0(r8)
 2002e88:	1947883a 	add	r3,r3,r5
 2002e8c:	10800044 	addi	r2,r2,1
 2002e90:	41400115 	stw	r5,4(r8)
 2002e94:	d8c02015 	stw	r3,128(sp)
 2002e98:	d8801f15 	stw	r2,124(sp)
 2002e9c:	010001c4 	movi	r4,7
 2002ea0:	2081f516 	blt	r4,r2,2003678 <___vfprintf_internal_r+0x11e4>
 2002ea4:	42000204 	addi	r8,r8,8
 2002ea8:	9480010c 	andi	r18,r18,4
 2002eac:	90003226 	beq	r18,zero,2002f78 <___vfprintf_internal_r+0xae4>
 2002eb0:	d9403117 	ldw	r5,196(sp)
 2002eb4:	d8802917 	ldw	r2,164(sp)
 2002eb8:	28a1c83a 	sub	r16,r5,r2
 2002ebc:	04002e0e 	bge	zero,r16,2002f78 <___vfprintf_internal_r+0xae4>
 2002ec0:	04400404 	movi	r17,16
 2002ec4:	d8801f17 	ldw	r2,124(sp)
 2002ec8:	8c04c40e 	bge	r17,r16,20041dc <___vfprintf_internal_r+0x1d48>
 2002ecc:	01408074 	movhi	r5,513
 2002ed0:	29487b84 	addi	r5,r5,8686
 2002ed4:	d9403515 	stw	r5,212(sp)
 2002ed8:	048001c4 	movi	r18,7
 2002edc:	dcc02d17 	ldw	r19,180(sp)
 2002ee0:	00000306 	br	2002ef0 <___vfprintf_internal_r+0xa5c>
 2002ee4:	843ffc04 	addi	r16,r16,-16
 2002ee8:	42000204 	addi	r8,r8,8
 2002eec:	8c00130e 	bge	r17,r16,2002f3c <___vfprintf_internal_r+0xaa8>
 2002ef0:	01008074 	movhi	r4,513
 2002ef4:	18c00404 	addi	r3,r3,16
 2002ef8:	10800044 	addi	r2,r2,1
 2002efc:	21087b84 	addi	r4,r4,8686
 2002f00:	41000015 	stw	r4,0(r8)
 2002f04:	44400115 	stw	r17,4(r8)
 2002f08:	d8c02015 	stw	r3,128(sp)
 2002f0c:	d8801f15 	stw	r2,124(sp)
 2002f10:	90bff40e 	bge	r18,r2,2002ee4 <__alt_data_end+0xff002ee4>
 2002f14:	d9801e04 	addi	r6,sp,120
 2002f18:	b80b883a 	mov	r5,r23
 2002f1c:	9809883a 	mov	r4,r19
 2002f20:	2009c740 	call	2009c74 <__sprint_r>
 2002f24:	103e5f1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2002f28:	843ffc04 	addi	r16,r16,-16
 2002f2c:	d8c02017 	ldw	r3,128(sp)
 2002f30:	d8801f17 	ldw	r2,124(sp)
 2002f34:	da000404 	addi	r8,sp,16
 2002f38:	8c3fed16 	blt	r17,r16,2002ef0 <__alt_data_end+0xff002ef0>
 2002f3c:	d9403517 	ldw	r5,212(sp)
 2002f40:	1c07883a 	add	r3,r3,r16
 2002f44:	10800044 	addi	r2,r2,1
 2002f48:	41400015 	stw	r5,0(r8)
 2002f4c:	44000115 	stw	r16,4(r8)
 2002f50:	d8c02015 	stw	r3,128(sp)
 2002f54:	d8801f15 	stw	r2,124(sp)
 2002f58:	010001c4 	movi	r4,7
 2002f5c:	2080060e 	bge	r4,r2,2002f78 <___vfprintf_internal_r+0xae4>
 2002f60:	d9002d17 	ldw	r4,180(sp)
 2002f64:	d9801e04 	addi	r6,sp,120
 2002f68:	b80b883a 	mov	r5,r23
 2002f6c:	2009c740 	call	2009c74 <__sprint_r>
 2002f70:	103e4c1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2002f74:	d8c02017 	ldw	r3,128(sp)
 2002f78:	d8803117 	ldw	r2,196(sp)
 2002f7c:	d9002917 	ldw	r4,164(sp)
 2002f80:	1100010e 	bge	r2,r4,2002f88 <___vfprintf_internal_r+0xaf4>
 2002f84:	2005883a 	mov	r2,r4
 2002f88:	d9402f17 	ldw	r5,188(sp)
 2002f8c:	288b883a 	add	r5,r5,r2
 2002f90:	d9402f15 	stw	r5,188(sp)
 2002f94:	1801c01e 	bne	r3,zero,2003698 <___vfprintf_internal_r+0x1204>
 2002f98:	a8800007 	ldb	r2,0(r21)
 2002f9c:	d8001f15 	stw	zero,124(sp)
 2002fa0:	da000404 	addi	r8,sp,16
 2002fa4:	103d751e 	bne	r2,zero,200257c <__alt_data_end+0xff00257c>
 2002fa8:	a823883a 	mov	r17,r21
 2002fac:	003d8b06 	br	20025dc <__alt_data_end+0xff0025dc>
 2002fb0:	8025883a 	mov	r18,r16
 2002fb4:	dc002903 	ldbu	r16,164(sp)
 2002fb8:	e011883a 	mov	r8,fp
 2002fbc:	84003fcc 	andi	r16,r16,255
 2002fc0:	8005e51e 	bne	r16,zero,2004758 <___vfprintf_internal_r+0x22c4>
 2002fc4:	94800414 	ori	r18,r18,16
 2002fc8:	9080080c 	andi	r2,r18,32
 2002fcc:	10022b26 	beq	r2,zero,200387c <___vfprintf_internal_r+0x13e8>
 2002fd0:	d9002e17 	ldw	r4,184(sp)
 2002fd4:	d9402a17 	ldw	r5,168(sp)
 2002fd8:	d8002785 	stb	zero,158(sp)
 2002fdc:	20c00204 	addi	r3,r4,8
 2002fe0:	24c00017 	ldw	r19,0(r4)
 2002fe4:	25800117 	ldw	r22,4(r4)
 2002fe8:	28042e16 	blt	r5,zero,20040a4 <___vfprintf_internal_r+0x1c10>
 2002fec:	013fdfc4 	movi	r4,-129
 2002ff0:	9d84b03a 	or	r2,r19,r22
 2002ff4:	d8c02e15 	stw	r3,184(sp)
 2002ff8:	9124703a 	and	r18,r18,r4
 2002ffc:	0039883a 	mov	fp,zero
 2003000:	103e801e 	bne	r2,zero,2002a04 <__alt_data_end+0xff002a04>
 2003004:	d9002a17 	ldw	r4,168(sp)
 2003008:	2002e01e 	bne	r4,zero,2003b8c <___vfprintf_internal_r+0x16f8>
 200300c:	d8002a15 	stw	zero,168(sp)
 2003010:	d8002b15 	stw	zero,172(sp)
 2003014:	dc001e04 	addi	r16,sp,120
 2003018:	003ef506 	br	2002bf0 <__alt_data_end+0xff002bf0>
 200301c:	8025883a 	mov	r18,r16
 2003020:	dc002903 	ldbu	r16,164(sp)
 2003024:	e011883a 	mov	r8,fp
 2003028:	84003fcc 	andi	r16,r16,255
 200302c:	8005ba1e 	bne	r16,zero,2004718 <___vfprintf_internal_r+0x2284>
 2003030:	01008074 	movhi	r4,513
 2003034:	21086b04 	addi	r4,r4,8620
 2003038:	d9003915 	stw	r4,228(sp)
 200303c:	9080080c 	andi	r2,r18,32
 2003040:	10006126 	beq	r2,zero,20031c8 <___vfprintf_internal_r+0xd34>
 2003044:	d9402e17 	ldw	r5,184(sp)
 2003048:	2cc00017 	ldw	r19,0(r5)
 200304c:	2d800117 	ldw	r22,4(r5)
 2003050:	29400204 	addi	r5,r5,8
 2003054:	d9402e15 	stw	r5,184(sp)
 2003058:	9080004c 	andi	r2,r18,1
 200305c:	1001ac26 	beq	r2,zero,2003710 <___vfprintf_internal_r+0x127c>
 2003060:	9d84b03a 	or	r2,r19,r22
 2003064:	10038526 	beq	r2,zero,2003e7c <___vfprintf_internal_r+0x19e8>
 2003068:	d8c02a17 	ldw	r3,168(sp)
 200306c:	00800c04 	movi	r2,48
 2003070:	d8802705 	stb	r2,156(sp)
 2003074:	dc402745 	stb	r17,157(sp)
 2003078:	d8002785 	stb	zero,158(sp)
 200307c:	90800094 	ori	r2,r18,2
 2003080:	18047916 	blt	r3,zero,2004268 <___vfprintf_internal_r+0x1dd4>
 2003084:	00bfdfc4 	movi	r2,-129
 2003088:	90a4703a 	and	r18,r18,r2
 200308c:	94800094 	ori	r18,r18,2
 2003090:	0039883a 	mov	fp,zero
 2003094:	d9003917 	ldw	r4,228(sp)
 2003098:	dc001e04 	addi	r16,sp,120
 200309c:	988003cc 	andi	r2,r19,15
 20030a0:	b006973a 	slli	r3,r22,28
 20030a4:	2085883a 	add	r2,r4,r2
 20030a8:	9826d13a 	srli	r19,r19,4
 20030ac:	10800003 	ldbu	r2,0(r2)
 20030b0:	b02cd13a 	srli	r22,r22,4
 20030b4:	843fffc4 	addi	r16,r16,-1
 20030b8:	1ce6b03a 	or	r19,r3,r19
 20030bc:	80800005 	stb	r2,0(r16)
 20030c0:	9d84b03a 	or	r2,r19,r22
 20030c4:	103ff51e 	bne	r2,zero,200309c <__alt_data_end+0xff00309c>
 20030c8:	d8c02817 	ldw	r3,160(sp)
 20030cc:	1c07c83a 	sub	r3,r3,r16
 20030d0:	d8c02b15 	stw	r3,172(sp)
 20030d4:	003ec606 	br	2002bf0 <__alt_data_end+0xff002bf0>
 20030d8:	8025883a 	mov	r18,r16
 20030dc:	dc002903 	ldbu	r16,164(sp)
 20030e0:	e011883a 	mov	r8,fp
 20030e4:	84003fcc 	andi	r16,r16,255
 20030e8:	803e9626 	beq	r16,zero,2002b44 <__alt_data_end+0xff002b44>
 20030ec:	d8c02b03 	ldbu	r3,172(sp)
 20030f0:	d8c02785 	stb	r3,158(sp)
 20030f4:	003e9306 	br	2002b44 <__alt_data_end+0xff002b44>
 20030f8:	00c00044 	movi	r3,1
 20030fc:	d8c02905 	stb	r3,164(sp)
 2003100:	00c00ac4 	movi	r3,43
 2003104:	d8c02b05 	stb	r3,172(sp)
 2003108:	ac400007 	ldb	r17,0(r21)
 200310c:	003d4306 	br	200261c <__alt_data_end+0xff00261c>
 2003110:	84000814 	ori	r16,r16,32
 2003114:	ac400007 	ldb	r17,0(r21)
 2003118:	003d4006 	br	200261c <__alt_data_end+0xff00261c>
 200311c:	d8802e17 	ldw	r2,184(sp)
 2003120:	8025883a 	mov	r18,r16
 2003124:	d8002785 	stb	zero,158(sp)
 2003128:	14000017 	ldw	r16,0(r2)
 200312c:	e011883a 	mov	r8,fp
 2003130:	14c00104 	addi	r19,r2,4
 2003134:	80042d26 	beq	r16,zero,20041ec <___vfprintf_internal_r+0x1d58>
 2003138:	d8c02a17 	ldw	r3,168(sp)
 200313c:	1803e416 	blt	r3,zero,20040d0 <___vfprintf_internal_r+0x1c3c>
 2003140:	180d883a 	mov	r6,r3
 2003144:	000b883a 	mov	r5,zero
 2003148:	8009883a 	mov	r4,r16
 200314c:	df003d15 	stw	fp,244(sp)
 2003150:	2007dcc0 	call	2007dcc <memchr>
 2003154:	da003d17 	ldw	r8,244(sp)
 2003158:	10046826 	beq	r2,zero,20042fc <___vfprintf_internal_r+0x1e68>
 200315c:	1405c83a 	sub	r2,r2,r16
 2003160:	d8802b15 	stw	r2,172(sp)
 2003164:	1003e016 	blt	r2,zero,20040e8 <___vfprintf_internal_r+0x1c54>
 2003168:	df002783 	ldbu	fp,158(sp)
 200316c:	d8802915 	stw	r2,164(sp)
 2003170:	dcc02e15 	stw	r19,184(sp)
 2003174:	d8002a15 	stw	zero,168(sp)
 2003178:	d8003215 	stw	zero,200(sp)
 200317c:	003ea206 	br	2002c08 <__alt_data_end+0xff002c08>
 2003180:	8025883a 	mov	r18,r16
 2003184:	dc002903 	ldbu	r16,164(sp)
 2003188:	e011883a 	mov	r8,fp
 200318c:	84003fcc 	andi	r16,r16,255
 2003190:	803f8d26 	beq	r16,zero,2002fc8 <__alt_data_end+0xff002fc8>
 2003194:	d8c02b03 	ldbu	r3,172(sp)
 2003198:	d8c02785 	stb	r3,158(sp)
 200319c:	003f8a06 	br	2002fc8 <__alt_data_end+0xff002fc8>
 20031a0:	8025883a 	mov	r18,r16
 20031a4:	dc002903 	ldbu	r16,164(sp)
 20031a8:	e011883a 	mov	r8,fp
 20031ac:	84003fcc 	andi	r16,r16,255
 20031b0:	8005661e 	bne	r16,zero,200474c <___vfprintf_internal_r+0x22b8>
 20031b4:	01008074 	movhi	r4,513
 20031b8:	21087004 	addi	r4,r4,8640
 20031bc:	d9003915 	stw	r4,228(sp)
 20031c0:	9080080c 	andi	r2,r18,32
 20031c4:	103f9f1e 	bne	r2,zero,2003044 <__alt_data_end+0xff003044>
 20031c8:	9080040c 	andi	r2,r18,16
 20031cc:	1002eb26 	beq	r2,zero,2003d7c <___vfprintf_internal_r+0x18e8>
 20031d0:	d8802e17 	ldw	r2,184(sp)
 20031d4:	002d883a 	mov	r22,zero
 20031d8:	14c00017 	ldw	r19,0(r2)
 20031dc:	10800104 	addi	r2,r2,4
 20031e0:	d8802e15 	stw	r2,184(sp)
 20031e4:	003f9c06 	br	2003058 <__alt_data_end+0xff003058>
 20031e8:	d8802b07 	ldb	r2,172(sp)
 20031ec:	1002e11e 	bne	r2,zero,2003d74 <___vfprintf_internal_r+0x18e0>
 20031f0:	00c00044 	movi	r3,1
 20031f4:	d8c02905 	stb	r3,164(sp)
 20031f8:	00c00804 	movi	r3,32
 20031fc:	d8c02b05 	stb	r3,172(sp)
 2003200:	ac400007 	ldb	r17,0(r21)
 2003204:	003d0506 	br	200261c <__alt_data_end+0xff00261c>
 2003208:	84000054 	ori	r16,r16,1
 200320c:	ac400007 	ldb	r17,0(r21)
 2003210:	003d0206 	br	200261c <__alt_data_end+0xff00261c>
 2003214:	8025883a 	mov	r18,r16
 2003218:	dc002903 	ldbu	r16,164(sp)
 200321c:	e011883a 	mov	r8,fp
 2003220:	84003fcc 	andi	r16,r16,255
 2003224:	803de726 	beq	r16,zero,20029c4 <__alt_data_end+0xff0029c4>
 2003228:	d8c02b03 	ldbu	r3,172(sp)
 200322c:	d8c02785 	stb	r3,158(sp)
 2003230:	003de406 	br	20029c4 <__alt_data_end+0xff0029c4>
 2003234:	84001014 	ori	r16,r16,64
 2003238:	ac400007 	ldb	r17,0(r21)
 200323c:	003cf706 	br	200261c <__alt_data_end+0xff00261c>
 2003240:	ac400007 	ldb	r17,0(r21)
 2003244:	00801b04 	movi	r2,108
 2003248:	88838f26 	beq	r17,r2,2004088 <___vfprintf_internal_r+0x1bf4>
 200324c:	84000414 	ori	r16,r16,16
 2003250:	003cf206 	br	200261c <__alt_data_end+0xff00261c>
 2003254:	8025883a 	mov	r18,r16
 2003258:	dc002903 	ldbu	r16,164(sp)
 200325c:	e011883a 	mov	r8,fp
 2003260:	84003fcc 	andi	r16,r16,255
 2003264:	80053f1e 	bne	r16,zero,2004764 <___vfprintf_internal_r+0x22d0>
 2003268:	9080080c 	andi	r2,r18,32
 200326c:	1002d226 	beq	r2,zero,2003db8 <___vfprintf_internal_r+0x1924>
 2003270:	d9002e17 	ldw	r4,184(sp)
 2003274:	d9402f17 	ldw	r5,188(sp)
 2003278:	20800017 	ldw	r2,0(r4)
 200327c:	2807d7fa 	srai	r3,r5,31
 2003280:	21000104 	addi	r4,r4,4
 2003284:	d9002e15 	stw	r4,184(sp)
 2003288:	11400015 	stw	r5,0(r2)
 200328c:	10c00115 	stw	r3,4(r2)
 2003290:	003cb806 	br	2002574 <__alt_data_end+0xff002574>
 2003294:	d8c02e17 	ldw	r3,184(sp)
 2003298:	d9002e17 	ldw	r4,184(sp)
 200329c:	8025883a 	mov	r18,r16
 20032a0:	18800017 	ldw	r2,0(r3)
 20032a4:	21000104 	addi	r4,r4,4
 20032a8:	00c00044 	movi	r3,1
 20032ac:	e011883a 	mov	r8,fp
 20032b0:	d8c02915 	stw	r3,164(sp)
 20032b4:	d8002785 	stb	zero,158(sp)
 20032b8:	d8801405 	stb	r2,80(sp)
 20032bc:	d9002e15 	stw	r4,184(sp)
 20032c0:	d8c02b15 	stw	r3,172(sp)
 20032c4:	d8002a15 	stw	zero,168(sp)
 20032c8:	d8003215 	stw	zero,200(sp)
 20032cc:	dc001404 	addi	r16,sp,80
 20032d0:	0039883a 	mov	fp,zero
 20032d4:	003e5306 	br	2002c24 <__alt_data_end+0xff002c24>
 20032d8:	01008074 	movhi	r4,513
 20032dc:	21087004 	addi	r4,r4,8640
 20032e0:	0039883a 	mov	fp,zero
 20032e4:	d9003915 	stw	r4,228(sp)
 20032e8:	04401e04 	movi	r17,120
 20032ec:	003f6906 	br	2003094 <__alt_data_end+0xff003094>
 20032f0:	8025883a 	mov	r18,r16
 20032f4:	dc002903 	ldbu	r16,164(sp)
 20032f8:	e011883a 	mov	r8,fp
 20032fc:	84003fcc 	andi	r16,r16,255
 2003300:	8005081e 	bne	r16,zero,2004724 <___vfprintf_internal_r+0x2290>
 2003304:	883d6126 	beq	r17,zero,200288c <__alt_data_end+0xff00288c>
 2003308:	00c00044 	movi	r3,1
 200330c:	d8c02915 	stw	r3,164(sp)
 2003310:	dc401405 	stb	r17,80(sp)
 2003314:	d8002785 	stb	zero,158(sp)
 2003318:	003fe906 	br	20032c0 <__alt_data_end+0xff0032c0>
 200331c:	01408074 	movhi	r5,513
 2003320:	29487004 	addi	r5,r5,8640
 2003324:	d9403915 	stw	r5,228(sp)
 2003328:	d8c02e15 	stw	r3,184(sp)
 200332c:	1025883a 	mov	r18,r2
 2003330:	04401e04 	movi	r17,120
 2003334:	9d84b03a 	or	r2,r19,r22
 2003338:	1000fc1e 	bne	r2,zero,200372c <___vfprintf_internal_r+0x1298>
 200333c:	0039883a 	mov	fp,zero
 2003340:	00800084 	movi	r2,2
 2003344:	10803fcc 	andi	r2,r2,255
 2003348:	00c00044 	movi	r3,1
 200334c:	10c20f26 	beq	r2,r3,2003b8c <___vfprintf_internal_r+0x16f8>
 2003350:	00c00084 	movi	r3,2
 2003354:	10fd3326 	beq	r2,r3,2002824 <__alt_data_end+0xff002824>
 2003358:	003e0b06 	br	2002b88 <__alt_data_end+0xff002b88>
 200335c:	d8c02017 	ldw	r3,128(sp)
 2003360:	003e7106 	br	2002d28 <__alt_data_end+0xff002d28>
 2003364:	00801944 	movi	r2,101
 2003368:	14407e0e 	bge	r2,r17,2003564 <___vfprintf_internal_r+0x10d0>
 200336c:	d9003617 	ldw	r4,216(sp)
 2003370:	d9403817 	ldw	r5,224(sp)
 2003374:	000d883a 	mov	r6,zero
 2003378:	000f883a 	mov	r7,zero
 200337c:	d8c03c15 	stw	r3,240(sp)
 2003380:	da003d15 	stw	r8,244(sp)
 2003384:	200dbd40 	call	200dbd4 <__eqdf2>
 2003388:	d8c03c17 	ldw	r3,240(sp)
 200338c:	da003d17 	ldw	r8,244(sp)
 2003390:	1000f71e 	bne	r2,zero,2003770 <___vfprintf_internal_r+0x12dc>
 2003394:	d8801f17 	ldw	r2,124(sp)
 2003398:	01008074 	movhi	r4,513
 200339c:	21087704 	addi	r4,r4,8668
 20033a0:	18c00044 	addi	r3,r3,1
 20033a4:	10800044 	addi	r2,r2,1
 20033a8:	41000015 	stw	r4,0(r8)
 20033ac:	01000044 	movi	r4,1
 20033b0:	41000115 	stw	r4,4(r8)
 20033b4:	d8c02015 	stw	r3,128(sp)
 20033b8:	d8801f15 	stw	r2,124(sp)
 20033bc:	010001c4 	movi	r4,7
 20033c0:	2082b816 	blt	r4,r2,2003ea4 <___vfprintf_internal_r+0x1a10>
 20033c4:	42000204 	addi	r8,r8,8
 20033c8:	d8802617 	ldw	r2,152(sp)
 20033cc:	d9403317 	ldw	r5,204(sp)
 20033d0:	11400216 	blt	r2,r5,20033dc <___vfprintf_internal_r+0xf48>
 20033d4:	9080004c 	andi	r2,r18,1
 20033d8:	103eb326 	beq	r2,zero,2002ea8 <__alt_data_end+0xff002ea8>
 20033dc:	d8803717 	ldw	r2,220(sp)
 20033e0:	d9003417 	ldw	r4,208(sp)
 20033e4:	d9403717 	ldw	r5,220(sp)
 20033e8:	1887883a 	add	r3,r3,r2
 20033ec:	d8801f17 	ldw	r2,124(sp)
 20033f0:	41000015 	stw	r4,0(r8)
 20033f4:	41400115 	stw	r5,4(r8)
 20033f8:	10800044 	addi	r2,r2,1
 20033fc:	d8c02015 	stw	r3,128(sp)
 2003400:	d8801f15 	stw	r2,124(sp)
 2003404:	010001c4 	movi	r4,7
 2003408:	20832916 	blt	r4,r2,20040b0 <___vfprintf_internal_r+0x1c1c>
 200340c:	42000204 	addi	r8,r8,8
 2003410:	d8803317 	ldw	r2,204(sp)
 2003414:	143fffc4 	addi	r16,r2,-1
 2003418:	043ea30e 	bge	zero,r16,2002ea8 <__alt_data_end+0xff002ea8>
 200341c:	04400404 	movi	r17,16
 2003420:	d8801f17 	ldw	r2,124(sp)
 2003424:	8c00880e 	bge	r17,r16,2003648 <___vfprintf_internal_r+0x11b4>
 2003428:	01408074 	movhi	r5,513
 200342c:	29487784 	addi	r5,r5,8670
 2003430:	d9402c15 	stw	r5,176(sp)
 2003434:	058001c4 	movi	r22,7
 2003438:	dcc02d17 	ldw	r19,180(sp)
 200343c:	00000306 	br	200344c <___vfprintf_internal_r+0xfb8>
 2003440:	42000204 	addi	r8,r8,8
 2003444:	843ffc04 	addi	r16,r16,-16
 2003448:	8c00820e 	bge	r17,r16,2003654 <___vfprintf_internal_r+0x11c0>
 200344c:	18c00404 	addi	r3,r3,16
 2003450:	10800044 	addi	r2,r2,1
 2003454:	45000015 	stw	r20,0(r8)
 2003458:	44400115 	stw	r17,4(r8)
 200345c:	d8c02015 	stw	r3,128(sp)
 2003460:	d8801f15 	stw	r2,124(sp)
 2003464:	b0bff60e 	bge	r22,r2,2003440 <__alt_data_end+0xff003440>
 2003468:	d9801e04 	addi	r6,sp,120
 200346c:	b80b883a 	mov	r5,r23
 2003470:	9809883a 	mov	r4,r19
 2003474:	2009c740 	call	2009c74 <__sprint_r>
 2003478:	103d0a1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 200347c:	d8c02017 	ldw	r3,128(sp)
 2003480:	d8801f17 	ldw	r2,124(sp)
 2003484:	da000404 	addi	r8,sp,16
 2003488:	003fee06 	br	2003444 <__alt_data_end+0xff003444>
 200348c:	d9403117 	ldw	r5,196(sp)
 2003490:	d8802917 	ldw	r2,164(sp)
 2003494:	28adc83a 	sub	r22,r5,r2
 2003498:	05be410e 	bge	zero,r22,2002da0 <__alt_data_end+0xff002da0>
 200349c:	07000404 	movi	fp,16
 20034a0:	d8801f17 	ldw	r2,124(sp)
 20034a4:	e5838f0e 	bge	fp,r22,20042e4 <___vfprintf_internal_r+0x1e50>
 20034a8:	01408074 	movhi	r5,513
 20034ac:	29487784 	addi	r5,r5,8670
 20034b0:	dc403015 	stw	r17,192(sp)
 20034b4:	d9402c15 	stw	r5,176(sp)
 20034b8:	b023883a 	mov	r17,r22
 20034bc:	04c001c4 	movi	r19,7
 20034c0:	a82d883a 	mov	r22,r21
 20034c4:	902b883a 	mov	r21,r18
 20034c8:	8025883a 	mov	r18,r16
 20034cc:	dc002d17 	ldw	r16,180(sp)
 20034d0:	00000306 	br	20034e0 <___vfprintf_internal_r+0x104c>
 20034d4:	8c7ffc04 	addi	r17,r17,-16
 20034d8:	42000204 	addi	r8,r8,8
 20034dc:	e440110e 	bge	fp,r17,2003524 <___vfprintf_internal_r+0x1090>
 20034e0:	18c00404 	addi	r3,r3,16
 20034e4:	10800044 	addi	r2,r2,1
 20034e8:	45000015 	stw	r20,0(r8)
 20034ec:	47000115 	stw	fp,4(r8)
 20034f0:	d8c02015 	stw	r3,128(sp)
 20034f4:	d8801f15 	stw	r2,124(sp)
 20034f8:	98bff60e 	bge	r19,r2,20034d4 <__alt_data_end+0xff0034d4>
 20034fc:	d9801e04 	addi	r6,sp,120
 2003500:	b80b883a 	mov	r5,r23
 2003504:	8009883a 	mov	r4,r16
 2003508:	2009c740 	call	2009c74 <__sprint_r>
 200350c:	103ce51e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003510:	8c7ffc04 	addi	r17,r17,-16
 2003514:	d8c02017 	ldw	r3,128(sp)
 2003518:	d8801f17 	ldw	r2,124(sp)
 200351c:	da000404 	addi	r8,sp,16
 2003520:	e47fef16 	blt	fp,r17,20034e0 <__alt_data_end+0xff0034e0>
 2003524:	9021883a 	mov	r16,r18
 2003528:	a825883a 	mov	r18,r21
 200352c:	b02b883a 	mov	r21,r22
 2003530:	882d883a 	mov	r22,r17
 2003534:	dc403017 	ldw	r17,192(sp)
 2003538:	d9002c17 	ldw	r4,176(sp)
 200353c:	1d87883a 	add	r3,r3,r22
 2003540:	10800044 	addi	r2,r2,1
 2003544:	41000015 	stw	r4,0(r8)
 2003548:	45800115 	stw	r22,4(r8)
 200354c:	d8c02015 	stw	r3,128(sp)
 2003550:	d8801f15 	stw	r2,124(sp)
 2003554:	010001c4 	movi	r4,7
 2003558:	20818e16 	blt	r4,r2,2003b94 <___vfprintf_internal_r+0x1700>
 200355c:	42000204 	addi	r8,r8,8
 2003560:	003e0f06 	br	2002da0 <__alt_data_end+0xff002da0>
 2003564:	d9403317 	ldw	r5,204(sp)
 2003568:	00800044 	movi	r2,1
 200356c:	18c00044 	addi	r3,r3,1
 2003570:	1141530e 	bge	r2,r5,2003ac0 <___vfprintf_internal_r+0x162c>
 2003574:	dc401f17 	ldw	r17,124(sp)
 2003578:	00800044 	movi	r2,1
 200357c:	40800115 	stw	r2,4(r8)
 2003580:	8c400044 	addi	r17,r17,1
 2003584:	44000015 	stw	r16,0(r8)
 2003588:	d8c02015 	stw	r3,128(sp)
 200358c:	dc401f15 	stw	r17,124(sp)
 2003590:	008001c4 	movi	r2,7
 2003594:	14416b16 	blt	r2,r17,2003b44 <___vfprintf_internal_r+0x16b0>
 2003598:	42000204 	addi	r8,r8,8
 200359c:	d8803717 	ldw	r2,220(sp)
 20035a0:	d9003417 	ldw	r4,208(sp)
 20035a4:	8c400044 	addi	r17,r17,1
 20035a8:	10c7883a 	add	r3,r2,r3
 20035ac:	40800115 	stw	r2,4(r8)
 20035b0:	41000015 	stw	r4,0(r8)
 20035b4:	d8c02015 	stw	r3,128(sp)
 20035b8:	dc401f15 	stw	r17,124(sp)
 20035bc:	008001c4 	movi	r2,7
 20035c0:	14416916 	blt	r2,r17,2003b68 <___vfprintf_internal_r+0x16d4>
 20035c4:	45800204 	addi	r22,r8,8
 20035c8:	d9003617 	ldw	r4,216(sp)
 20035cc:	d9403817 	ldw	r5,224(sp)
 20035d0:	000d883a 	mov	r6,zero
 20035d4:	000f883a 	mov	r7,zero
 20035d8:	d8c03c15 	stw	r3,240(sp)
 20035dc:	200dbd40 	call	200dbd4 <__eqdf2>
 20035e0:	d8c03c17 	ldw	r3,240(sp)
 20035e4:	1000bc26 	beq	r2,zero,20038d8 <___vfprintf_internal_r+0x1444>
 20035e8:	d9403317 	ldw	r5,204(sp)
 20035ec:	84000044 	addi	r16,r16,1
 20035f0:	8c400044 	addi	r17,r17,1
 20035f4:	28bfffc4 	addi	r2,r5,-1
 20035f8:	1887883a 	add	r3,r3,r2
 20035fc:	b0800115 	stw	r2,4(r22)
 2003600:	b4000015 	stw	r16,0(r22)
 2003604:	d8c02015 	stw	r3,128(sp)
 2003608:	dc401f15 	stw	r17,124(sp)
 200360c:	008001c4 	movi	r2,7
 2003610:	14414316 	blt	r2,r17,2003b20 <___vfprintf_internal_r+0x168c>
 2003614:	b5800204 	addi	r22,r22,8
 2003618:	d9003a17 	ldw	r4,232(sp)
 200361c:	df0022c4 	addi	fp,sp,139
 2003620:	8c400044 	addi	r17,r17,1
 2003624:	20c7883a 	add	r3,r4,r3
 2003628:	b7000015 	stw	fp,0(r22)
 200362c:	b1000115 	stw	r4,4(r22)
 2003630:	d8c02015 	stw	r3,128(sp)
 2003634:	dc401f15 	stw	r17,124(sp)
 2003638:	008001c4 	movi	r2,7
 200363c:	14400e16 	blt	r2,r17,2003678 <___vfprintf_internal_r+0x11e4>
 2003640:	b2000204 	addi	r8,r22,8
 2003644:	003e1806 	br	2002ea8 <__alt_data_end+0xff002ea8>
 2003648:	01008074 	movhi	r4,513
 200364c:	21087784 	addi	r4,r4,8670
 2003650:	d9002c15 	stw	r4,176(sp)
 2003654:	d9002c17 	ldw	r4,176(sp)
 2003658:	1c07883a 	add	r3,r3,r16
 200365c:	44000115 	stw	r16,4(r8)
 2003660:	41000015 	stw	r4,0(r8)
 2003664:	10800044 	addi	r2,r2,1
 2003668:	d8c02015 	stw	r3,128(sp)
 200366c:	d8801f15 	stw	r2,124(sp)
 2003670:	010001c4 	movi	r4,7
 2003674:	20be0b0e 	bge	r4,r2,2002ea4 <__alt_data_end+0xff002ea4>
 2003678:	d9002d17 	ldw	r4,180(sp)
 200367c:	d9801e04 	addi	r6,sp,120
 2003680:	b80b883a 	mov	r5,r23
 2003684:	2009c740 	call	2009c74 <__sprint_r>
 2003688:	103c861e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 200368c:	d8c02017 	ldw	r3,128(sp)
 2003690:	da000404 	addi	r8,sp,16
 2003694:	003e0406 	br	2002ea8 <__alt_data_end+0xff002ea8>
 2003698:	d9002d17 	ldw	r4,180(sp)
 200369c:	d9801e04 	addi	r6,sp,120
 20036a0:	b80b883a 	mov	r5,r23
 20036a4:	2009c740 	call	2009c74 <__sprint_r>
 20036a8:	103e3b26 	beq	r2,zero,2002f98 <__alt_data_end+0xff002f98>
 20036ac:	003c7d06 	br	20028a4 <__alt_data_end+0xff0028a4>
 20036b0:	d9002d17 	ldw	r4,180(sp)
 20036b4:	d9801e04 	addi	r6,sp,120
 20036b8:	b80b883a 	mov	r5,r23
 20036bc:	2009c740 	call	2009c74 <__sprint_r>
 20036c0:	103c781e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 20036c4:	d8c02017 	ldw	r3,128(sp)
 20036c8:	da000404 	addi	r8,sp,16
 20036cc:	003de906 	br	2002e74 <__alt_data_end+0xff002e74>
 20036d0:	d9002d17 	ldw	r4,180(sp)
 20036d4:	d9801e04 	addi	r6,sp,120
 20036d8:	b80b883a 	mov	r5,r23
 20036dc:	2009c740 	call	2009c74 <__sprint_r>
 20036e0:	103c701e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 20036e4:	d8c02017 	ldw	r3,128(sp)
 20036e8:	da000404 	addi	r8,sp,16
 20036ec:	003d9b06 	br	2002d5c <__alt_data_end+0xff002d5c>
 20036f0:	d9002d17 	ldw	r4,180(sp)
 20036f4:	d9801e04 	addi	r6,sp,120
 20036f8:	b80b883a 	mov	r5,r23
 20036fc:	2009c740 	call	2009c74 <__sprint_r>
 2003700:	103c681e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003704:	d8c02017 	ldw	r3,128(sp)
 2003708:	da000404 	addi	r8,sp,16
 200370c:	003da106 	br	2002d94 <__alt_data_end+0xff002d94>
 2003710:	d9402a17 	ldw	r5,168(sp)
 2003714:	d8002785 	stb	zero,158(sp)
 2003718:	283f0616 	blt	r5,zero,2003334 <__alt_data_end+0xff003334>
 200371c:	00ffdfc4 	movi	r3,-129
 2003720:	9d84b03a 	or	r2,r19,r22
 2003724:	90e4703a 	and	r18,r18,r3
 2003728:	103c3b26 	beq	r2,zero,2002818 <__alt_data_end+0xff002818>
 200372c:	0039883a 	mov	fp,zero
 2003730:	003e5806 	br	2003094 <__alt_data_end+0xff003094>
 2003734:	9080040c 	andi	r2,r18,16
 2003738:	1001b326 	beq	r2,zero,2003e08 <___vfprintf_internal_r+0x1974>
 200373c:	d8c02e17 	ldw	r3,184(sp)
 2003740:	d9002a17 	ldw	r4,168(sp)
 2003744:	d8002785 	stb	zero,158(sp)
 2003748:	18800104 	addi	r2,r3,4
 200374c:	1cc00017 	ldw	r19,0(r3)
 2003750:	002d883a 	mov	r22,zero
 2003754:	2001b516 	blt	r4,zero,2003e2c <___vfprintf_internal_r+0x1998>
 2003758:	00ffdfc4 	movi	r3,-129
 200375c:	d8802e15 	stw	r2,184(sp)
 2003760:	90e4703a 	and	r18,r18,r3
 2003764:	983d0526 	beq	r19,zero,2002b7c <__alt_data_end+0xff002b7c>
 2003768:	0039883a 	mov	fp,zero
 200376c:	003d0806 	br	2002b90 <__alt_data_end+0xff002b90>
 2003770:	dc402617 	ldw	r17,152(sp)
 2003774:	0441d30e 	bge	zero,r17,2003ec4 <___vfprintf_internal_r+0x1a30>
 2003778:	dc403217 	ldw	r17,200(sp)
 200377c:	d8803317 	ldw	r2,204(sp)
 2003780:	1440010e 	bge	r2,r17,2003788 <___vfprintf_internal_r+0x12f4>
 2003784:	1023883a 	mov	r17,r2
 2003788:	04400a0e 	bge	zero,r17,20037b4 <___vfprintf_internal_r+0x1320>
 200378c:	d8801f17 	ldw	r2,124(sp)
 2003790:	1c47883a 	add	r3,r3,r17
 2003794:	44000015 	stw	r16,0(r8)
 2003798:	10800044 	addi	r2,r2,1
 200379c:	44400115 	stw	r17,4(r8)
 20037a0:	d8c02015 	stw	r3,128(sp)
 20037a4:	d8801f15 	stw	r2,124(sp)
 20037a8:	010001c4 	movi	r4,7
 20037ac:	20826516 	blt	r4,r2,2004144 <___vfprintf_internal_r+0x1cb0>
 20037b0:	42000204 	addi	r8,r8,8
 20037b4:	88026116 	blt	r17,zero,200413c <___vfprintf_internal_r+0x1ca8>
 20037b8:	d9003217 	ldw	r4,200(sp)
 20037bc:	2463c83a 	sub	r17,r4,r17
 20037c0:	04407b0e 	bge	zero,r17,20039b0 <___vfprintf_internal_r+0x151c>
 20037c4:	05800404 	movi	r22,16
 20037c8:	d8801f17 	ldw	r2,124(sp)
 20037cc:	b4419d0e 	bge	r22,r17,2003e44 <___vfprintf_internal_r+0x19b0>
 20037d0:	01008074 	movhi	r4,513
 20037d4:	21087784 	addi	r4,r4,8670
 20037d8:	d9002c15 	stw	r4,176(sp)
 20037dc:	070001c4 	movi	fp,7
 20037e0:	dcc02d17 	ldw	r19,180(sp)
 20037e4:	00000306 	br	20037f4 <___vfprintf_internal_r+0x1360>
 20037e8:	42000204 	addi	r8,r8,8
 20037ec:	8c7ffc04 	addi	r17,r17,-16
 20037f0:	b441970e 	bge	r22,r17,2003e50 <___vfprintf_internal_r+0x19bc>
 20037f4:	18c00404 	addi	r3,r3,16
 20037f8:	10800044 	addi	r2,r2,1
 20037fc:	45000015 	stw	r20,0(r8)
 2003800:	45800115 	stw	r22,4(r8)
 2003804:	d8c02015 	stw	r3,128(sp)
 2003808:	d8801f15 	stw	r2,124(sp)
 200380c:	e0bff60e 	bge	fp,r2,20037e8 <__alt_data_end+0xff0037e8>
 2003810:	d9801e04 	addi	r6,sp,120
 2003814:	b80b883a 	mov	r5,r23
 2003818:	9809883a 	mov	r4,r19
 200381c:	2009c740 	call	2009c74 <__sprint_r>
 2003820:	103c201e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003824:	d8c02017 	ldw	r3,128(sp)
 2003828:	d8801f17 	ldw	r2,124(sp)
 200382c:	da000404 	addi	r8,sp,16
 2003830:	003fee06 	br	20037ec <__alt_data_end+0xff0037ec>
 2003834:	d9002d17 	ldw	r4,180(sp)
 2003838:	d9801e04 	addi	r6,sp,120
 200383c:	b80b883a 	mov	r5,r23
 2003840:	2009c740 	call	2009c74 <__sprint_r>
 2003844:	103c171e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003848:	d8c02017 	ldw	r3,128(sp)
 200384c:	df002787 	ldb	fp,158(sp)
 2003850:	da000404 	addi	r8,sp,16
 2003854:	003d3406 	br	2002d28 <__alt_data_end+0xff002d28>
 2003858:	9080040c 	andi	r2,r18,16
 200385c:	10016126 	beq	r2,zero,2003de4 <___vfprintf_internal_r+0x1950>
 2003860:	d9402e17 	ldw	r5,184(sp)
 2003864:	2cc00017 	ldw	r19,0(r5)
 2003868:	29400104 	addi	r5,r5,4
 200386c:	d9402e15 	stw	r5,184(sp)
 2003870:	982dd7fa 	srai	r22,r19,31
 2003874:	b005883a 	mov	r2,r22
 2003878:	003c5a06 	br	20029e4 <__alt_data_end+0xff0029e4>
 200387c:	9080040c 	andi	r2,r18,16
 2003880:	10003526 	beq	r2,zero,2003958 <___vfprintf_internal_r+0x14c4>
 2003884:	d8c02e17 	ldw	r3,184(sp)
 2003888:	d9002a17 	ldw	r4,168(sp)
 200388c:	d8002785 	stb	zero,158(sp)
 2003890:	18800104 	addi	r2,r3,4
 2003894:	1cc00017 	ldw	r19,0(r3)
 2003898:	002d883a 	mov	r22,zero
 200389c:	20003716 	blt	r4,zero,200397c <___vfprintf_internal_r+0x14e8>
 20038a0:	00ffdfc4 	movi	r3,-129
 20038a4:	d8802e15 	stw	r2,184(sp)
 20038a8:	90e4703a 	and	r18,r18,r3
 20038ac:	0039883a 	mov	fp,zero
 20038b0:	983dd426 	beq	r19,zero,2003004 <__alt_data_end+0xff003004>
 20038b4:	00800244 	movi	r2,9
 20038b8:	14fc5336 	bltu	r2,r19,2002a08 <__alt_data_end+0xff002a08>
 20038bc:	d8c02817 	ldw	r3,160(sp)
 20038c0:	dc001dc4 	addi	r16,sp,119
 20038c4:	9cc00c04 	addi	r19,r19,48
 20038c8:	1c07c83a 	sub	r3,r3,r16
 20038cc:	dcc01dc5 	stb	r19,119(sp)
 20038d0:	d8c02b15 	stw	r3,172(sp)
 20038d4:	003cc606 	br	2002bf0 <__alt_data_end+0xff002bf0>
 20038d8:	d8803317 	ldw	r2,204(sp)
 20038dc:	143fffc4 	addi	r16,r2,-1
 20038e0:	043f4d0e 	bge	zero,r16,2003618 <__alt_data_end+0xff003618>
 20038e4:	07000404 	movi	fp,16
 20038e8:	e400810e 	bge	fp,r16,2003af0 <___vfprintf_internal_r+0x165c>
 20038ec:	01408074 	movhi	r5,513
 20038f0:	29487784 	addi	r5,r5,8670
 20038f4:	d9402c15 	stw	r5,176(sp)
 20038f8:	01c001c4 	movi	r7,7
 20038fc:	dcc02d17 	ldw	r19,180(sp)
 2003900:	00000306 	br	2003910 <___vfprintf_internal_r+0x147c>
 2003904:	b5800204 	addi	r22,r22,8
 2003908:	843ffc04 	addi	r16,r16,-16
 200390c:	e4007b0e 	bge	fp,r16,2003afc <___vfprintf_internal_r+0x1668>
 2003910:	18c00404 	addi	r3,r3,16
 2003914:	8c400044 	addi	r17,r17,1
 2003918:	b5000015 	stw	r20,0(r22)
 200391c:	b7000115 	stw	fp,4(r22)
 2003920:	d8c02015 	stw	r3,128(sp)
 2003924:	dc401f15 	stw	r17,124(sp)
 2003928:	3c7ff60e 	bge	r7,r17,2003904 <__alt_data_end+0xff003904>
 200392c:	d9801e04 	addi	r6,sp,120
 2003930:	b80b883a 	mov	r5,r23
 2003934:	9809883a 	mov	r4,r19
 2003938:	d9c03c15 	stw	r7,240(sp)
 200393c:	2009c740 	call	2009c74 <__sprint_r>
 2003940:	d9c03c17 	ldw	r7,240(sp)
 2003944:	103bd71e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003948:	d8c02017 	ldw	r3,128(sp)
 200394c:	dc401f17 	ldw	r17,124(sp)
 2003950:	dd800404 	addi	r22,sp,16
 2003954:	003fec06 	br	2003908 <__alt_data_end+0xff003908>
 2003958:	9080100c 	andi	r2,r18,64
 200395c:	d8002785 	stb	zero,158(sp)
 2003960:	10010e26 	beq	r2,zero,2003d9c <___vfprintf_internal_r+0x1908>
 2003964:	d9402e17 	ldw	r5,184(sp)
 2003968:	d8c02a17 	ldw	r3,168(sp)
 200396c:	002d883a 	mov	r22,zero
 2003970:	28800104 	addi	r2,r5,4
 2003974:	2cc0000b 	ldhu	r19,0(r5)
 2003978:	183fc90e 	bge	r3,zero,20038a0 <__alt_data_end+0xff0038a0>
 200397c:	d8802e15 	stw	r2,184(sp)
 2003980:	0039883a 	mov	fp,zero
 2003984:	9d84b03a 	or	r2,r19,r22
 2003988:	103c1e1e 	bne	r2,zero,2002a04 <__alt_data_end+0xff002a04>
 200398c:	00800044 	movi	r2,1
 2003990:	003e6c06 	br	2003344 <__alt_data_end+0xff003344>
 2003994:	d9002d17 	ldw	r4,180(sp)
 2003998:	d9801e04 	addi	r6,sp,120
 200399c:	b80b883a 	mov	r5,r23
 20039a0:	2009c740 	call	2009c74 <__sprint_r>
 20039a4:	103bbf1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 20039a8:	d8c02017 	ldw	r3,128(sp)
 20039ac:	da000404 	addi	r8,sp,16
 20039b0:	d9003217 	ldw	r4,200(sp)
 20039b4:	d8802617 	ldw	r2,152(sp)
 20039b8:	d9403317 	ldw	r5,204(sp)
 20039bc:	8123883a 	add	r17,r16,r4
 20039c0:	11400216 	blt	r2,r5,20039cc <___vfprintf_internal_r+0x1538>
 20039c4:	9100004c 	andi	r4,r18,1
 20039c8:	20000d26 	beq	r4,zero,2003a00 <___vfprintf_internal_r+0x156c>
 20039cc:	d9003717 	ldw	r4,220(sp)
 20039d0:	d9403417 	ldw	r5,208(sp)
 20039d4:	1907883a 	add	r3,r3,r4
 20039d8:	d9001f17 	ldw	r4,124(sp)
 20039dc:	41400015 	stw	r5,0(r8)
 20039e0:	d9403717 	ldw	r5,220(sp)
 20039e4:	21000044 	addi	r4,r4,1
 20039e8:	d8c02015 	stw	r3,128(sp)
 20039ec:	41400115 	stw	r5,4(r8)
 20039f0:	d9001f15 	stw	r4,124(sp)
 20039f4:	014001c4 	movi	r5,7
 20039f8:	2901e816 	blt	r5,r4,200419c <___vfprintf_internal_r+0x1d08>
 20039fc:	42000204 	addi	r8,r8,8
 2003a00:	d9003317 	ldw	r4,204(sp)
 2003a04:	8121883a 	add	r16,r16,r4
 2003a08:	2085c83a 	sub	r2,r4,r2
 2003a0c:	8461c83a 	sub	r16,r16,r17
 2003a10:	1400010e 	bge	r2,r16,2003a18 <___vfprintf_internal_r+0x1584>
 2003a14:	1021883a 	mov	r16,r2
 2003a18:	04000a0e 	bge	zero,r16,2003a44 <___vfprintf_internal_r+0x15b0>
 2003a1c:	d9001f17 	ldw	r4,124(sp)
 2003a20:	1c07883a 	add	r3,r3,r16
 2003a24:	44400015 	stw	r17,0(r8)
 2003a28:	21000044 	addi	r4,r4,1
 2003a2c:	44000115 	stw	r16,4(r8)
 2003a30:	d8c02015 	stw	r3,128(sp)
 2003a34:	d9001f15 	stw	r4,124(sp)
 2003a38:	014001c4 	movi	r5,7
 2003a3c:	2901fb16 	blt	r5,r4,200422c <___vfprintf_internal_r+0x1d98>
 2003a40:	42000204 	addi	r8,r8,8
 2003a44:	8001f716 	blt	r16,zero,2004224 <___vfprintf_internal_r+0x1d90>
 2003a48:	1421c83a 	sub	r16,r2,r16
 2003a4c:	043d160e 	bge	zero,r16,2002ea8 <__alt_data_end+0xff002ea8>
 2003a50:	04400404 	movi	r17,16
 2003a54:	d8801f17 	ldw	r2,124(sp)
 2003a58:	8c3efb0e 	bge	r17,r16,2003648 <__alt_data_end+0xff003648>
 2003a5c:	01408074 	movhi	r5,513
 2003a60:	29487784 	addi	r5,r5,8670
 2003a64:	d9402c15 	stw	r5,176(sp)
 2003a68:	058001c4 	movi	r22,7
 2003a6c:	dcc02d17 	ldw	r19,180(sp)
 2003a70:	00000306 	br	2003a80 <___vfprintf_internal_r+0x15ec>
 2003a74:	42000204 	addi	r8,r8,8
 2003a78:	843ffc04 	addi	r16,r16,-16
 2003a7c:	8c3ef50e 	bge	r17,r16,2003654 <__alt_data_end+0xff003654>
 2003a80:	18c00404 	addi	r3,r3,16
 2003a84:	10800044 	addi	r2,r2,1
 2003a88:	45000015 	stw	r20,0(r8)
 2003a8c:	44400115 	stw	r17,4(r8)
 2003a90:	d8c02015 	stw	r3,128(sp)
 2003a94:	d8801f15 	stw	r2,124(sp)
 2003a98:	b0bff60e 	bge	r22,r2,2003a74 <__alt_data_end+0xff003a74>
 2003a9c:	d9801e04 	addi	r6,sp,120
 2003aa0:	b80b883a 	mov	r5,r23
 2003aa4:	9809883a 	mov	r4,r19
 2003aa8:	2009c740 	call	2009c74 <__sprint_r>
 2003aac:	103b7d1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003ab0:	d8c02017 	ldw	r3,128(sp)
 2003ab4:	d8801f17 	ldw	r2,124(sp)
 2003ab8:	da000404 	addi	r8,sp,16
 2003abc:	003fee06 	br	2003a78 <__alt_data_end+0xff003a78>
 2003ac0:	9088703a 	and	r4,r18,r2
 2003ac4:	203eab1e 	bne	r4,zero,2003574 <__alt_data_end+0xff003574>
 2003ac8:	dc401f17 	ldw	r17,124(sp)
 2003acc:	40800115 	stw	r2,4(r8)
 2003ad0:	44000015 	stw	r16,0(r8)
 2003ad4:	8c400044 	addi	r17,r17,1
 2003ad8:	d8c02015 	stw	r3,128(sp)
 2003adc:	dc401f15 	stw	r17,124(sp)
 2003ae0:	008001c4 	movi	r2,7
 2003ae4:	14400e16 	blt	r2,r17,2003b20 <___vfprintf_internal_r+0x168c>
 2003ae8:	45800204 	addi	r22,r8,8
 2003aec:	003eca06 	br	2003618 <__alt_data_end+0xff003618>
 2003af0:	01008074 	movhi	r4,513
 2003af4:	21087784 	addi	r4,r4,8670
 2003af8:	d9002c15 	stw	r4,176(sp)
 2003afc:	d8802c17 	ldw	r2,176(sp)
 2003b00:	1c07883a 	add	r3,r3,r16
 2003b04:	8c400044 	addi	r17,r17,1
 2003b08:	b0800015 	stw	r2,0(r22)
 2003b0c:	b4000115 	stw	r16,4(r22)
 2003b10:	d8c02015 	stw	r3,128(sp)
 2003b14:	dc401f15 	stw	r17,124(sp)
 2003b18:	008001c4 	movi	r2,7
 2003b1c:	147ebd0e 	bge	r2,r17,2003614 <__alt_data_end+0xff003614>
 2003b20:	d9002d17 	ldw	r4,180(sp)
 2003b24:	d9801e04 	addi	r6,sp,120
 2003b28:	b80b883a 	mov	r5,r23
 2003b2c:	2009c740 	call	2009c74 <__sprint_r>
 2003b30:	103b5c1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003b34:	d8c02017 	ldw	r3,128(sp)
 2003b38:	dc401f17 	ldw	r17,124(sp)
 2003b3c:	dd800404 	addi	r22,sp,16
 2003b40:	003eb506 	br	2003618 <__alt_data_end+0xff003618>
 2003b44:	d9002d17 	ldw	r4,180(sp)
 2003b48:	d9801e04 	addi	r6,sp,120
 2003b4c:	b80b883a 	mov	r5,r23
 2003b50:	2009c740 	call	2009c74 <__sprint_r>
 2003b54:	103b531e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003b58:	d8c02017 	ldw	r3,128(sp)
 2003b5c:	dc401f17 	ldw	r17,124(sp)
 2003b60:	da000404 	addi	r8,sp,16
 2003b64:	003e8d06 	br	200359c <__alt_data_end+0xff00359c>
 2003b68:	d9002d17 	ldw	r4,180(sp)
 2003b6c:	d9801e04 	addi	r6,sp,120
 2003b70:	b80b883a 	mov	r5,r23
 2003b74:	2009c740 	call	2009c74 <__sprint_r>
 2003b78:	103b4a1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003b7c:	d8c02017 	ldw	r3,128(sp)
 2003b80:	dc401f17 	ldw	r17,124(sp)
 2003b84:	dd800404 	addi	r22,sp,16
 2003b88:	003e8f06 	br	20035c8 <__alt_data_end+0xff0035c8>
 2003b8c:	0027883a 	mov	r19,zero
 2003b90:	003f4a06 	br	20038bc <__alt_data_end+0xff0038bc>
 2003b94:	d9002d17 	ldw	r4,180(sp)
 2003b98:	d9801e04 	addi	r6,sp,120
 2003b9c:	b80b883a 	mov	r5,r23
 2003ba0:	2009c740 	call	2009c74 <__sprint_r>
 2003ba4:	103b3f1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003ba8:	d8c02017 	ldw	r3,128(sp)
 2003bac:	da000404 	addi	r8,sp,16
 2003bb0:	003c7b06 	br	2002da0 <__alt_data_end+0xff002da0>
 2003bb4:	d9402a17 	ldw	r5,168(sp)
 2003bb8:	04e7c83a 	sub	r19,zero,r19
 2003bbc:	07000b44 	movi	fp,45
 2003bc0:	9804c03a 	cmpne	r2,r19,zero
 2003bc4:	05adc83a 	sub	r22,zero,r22
 2003bc8:	df002785 	stb	fp,158(sp)
 2003bcc:	b0adc83a 	sub	r22,r22,r2
 2003bd0:	28017b16 	blt	r5,zero,20041c0 <___vfprintf_internal_r+0x1d2c>
 2003bd4:	00bfdfc4 	movi	r2,-129
 2003bd8:	90a4703a 	and	r18,r18,r2
 2003bdc:	003b8906 	br	2002a04 <__alt_data_end+0xff002a04>
 2003be0:	d9003617 	ldw	r4,216(sp)
 2003be4:	d9403817 	ldw	r5,224(sp)
 2003be8:	da003d15 	stw	r8,244(sp)
 2003bec:	20098980 	call	2009898 <__fpclassifyd>
 2003bf0:	da003d17 	ldw	r8,244(sp)
 2003bf4:	1000f026 	beq	r2,zero,2003fb8 <___vfprintf_internal_r+0x1b24>
 2003bf8:	d9002a17 	ldw	r4,168(sp)
 2003bfc:	05bff7c4 	movi	r22,-33
 2003c00:	00bfffc4 	movi	r2,-1
 2003c04:	8dac703a 	and	r22,r17,r22
 2003c08:	20820026 	beq	r4,r2,200440c <___vfprintf_internal_r+0x1f78>
 2003c0c:	008011c4 	movi	r2,71
 2003c10:	b081f726 	beq	r22,r2,20043f0 <___vfprintf_internal_r+0x1f5c>
 2003c14:	d9003817 	ldw	r4,224(sp)
 2003c18:	90c04014 	ori	r3,r18,256
 2003c1c:	d8c02c15 	stw	r3,176(sp)
 2003c20:	20021516 	blt	r4,zero,2004478 <___vfprintf_internal_r+0x1fe4>
 2003c24:	dcc03817 	ldw	r19,224(sp)
 2003c28:	d8002905 	stb	zero,164(sp)
 2003c2c:	00801984 	movi	r2,102
 2003c30:	8881f926 	beq	r17,r2,2004418 <___vfprintf_internal_r+0x1f84>
 2003c34:	00801184 	movi	r2,70
 2003c38:	88821c26 	beq	r17,r2,20044ac <___vfprintf_internal_r+0x2018>
 2003c3c:	00801144 	movi	r2,69
 2003c40:	b081ef26 	beq	r22,r2,2004400 <___vfprintf_internal_r+0x1f6c>
 2003c44:	d8c02a17 	ldw	r3,168(sp)
 2003c48:	d8802104 	addi	r2,sp,132
 2003c4c:	d8800315 	stw	r2,12(sp)
 2003c50:	d9403617 	ldw	r5,216(sp)
 2003c54:	d8802504 	addi	r2,sp,148
 2003c58:	d9002d17 	ldw	r4,180(sp)
 2003c5c:	d8800215 	stw	r2,8(sp)
 2003c60:	d8802604 	addi	r2,sp,152
 2003c64:	d8c00015 	stw	r3,0(sp)
 2003c68:	d8800115 	stw	r2,4(sp)
 2003c6c:	01c00084 	movi	r7,2
 2003c70:	980d883a 	mov	r6,r19
 2003c74:	d8c03c15 	stw	r3,240(sp)
 2003c78:	da003d15 	stw	r8,244(sp)
 2003c7c:	2004bc40 	call	2004bc4 <_dtoa_r>
 2003c80:	1021883a 	mov	r16,r2
 2003c84:	008019c4 	movi	r2,103
 2003c88:	d8c03c17 	ldw	r3,240(sp)
 2003c8c:	da003d17 	ldw	r8,244(sp)
 2003c90:	88817126 	beq	r17,r2,2004258 <___vfprintf_internal_r+0x1dc4>
 2003c94:	008011c4 	movi	r2,71
 2003c98:	88829126 	beq	r17,r2,20046e0 <___vfprintf_internal_r+0x224c>
 2003c9c:	80f9883a 	add	fp,r16,r3
 2003ca0:	d9003617 	ldw	r4,216(sp)
 2003ca4:	000d883a 	mov	r6,zero
 2003ca8:	000f883a 	mov	r7,zero
 2003cac:	980b883a 	mov	r5,r19
 2003cb0:	da003d15 	stw	r8,244(sp)
 2003cb4:	200dbd40 	call	200dbd4 <__eqdf2>
 2003cb8:	da003d17 	ldw	r8,244(sp)
 2003cbc:	10018d26 	beq	r2,zero,20042f4 <___vfprintf_internal_r+0x1e60>
 2003cc0:	d8802117 	ldw	r2,132(sp)
 2003cc4:	1700062e 	bgeu	r2,fp,2003ce0 <___vfprintf_internal_r+0x184c>
 2003cc8:	01000c04 	movi	r4,48
 2003ccc:	10c00044 	addi	r3,r2,1
 2003cd0:	d8c02115 	stw	r3,132(sp)
 2003cd4:	11000005 	stb	r4,0(r2)
 2003cd8:	d8802117 	ldw	r2,132(sp)
 2003cdc:	173ffb36 	bltu	r2,fp,2003ccc <__alt_data_end+0xff003ccc>
 2003ce0:	1405c83a 	sub	r2,r2,r16
 2003ce4:	d8803315 	stw	r2,204(sp)
 2003ce8:	008011c4 	movi	r2,71
 2003cec:	b0817626 	beq	r22,r2,20042c8 <___vfprintf_internal_r+0x1e34>
 2003cf0:	00801944 	movi	r2,101
 2003cf4:	1442800e 	bge	r2,r17,20046f8 <___vfprintf_internal_r+0x2264>
 2003cf8:	d8c02617 	ldw	r3,152(sp)
 2003cfc:	00801984 	movi	r2,102
 2003d00:	d8c03215 	stw	r3,200(sp)
 2003d04:	8881fe26 	beq	r17,r2,2004500 <___vfprintf_internal_r+0x206c>
 2003d08:	d8c03217 	ldw	r3,200(sp)
 2003d0c:	d9003317 	ldw	r4,204(sp)
 2003d10:	1901dd16 	blt	r3,r4,2004488 <___vfprintf_internal_r+0x1ff4>
 2003d14:	9480004c 	andi	r18,r18,1
 2003d18:	90022b1e 	bne	r18,zero,20045c8 <___vfprintf_internal_r+0x2134>
 2003d1c:	1805883a 	mov	r2,r3
 2003d20:	18028316 	blt	r3,zero,2004730 <___vfprintf_internal_r+0x229c>
 2003d24:	d8c03217 	ldw	r3,200(sp)
 2003d28:	044019c4 	movi	r17,103
 2003d2c:	d8c02b15 	stw	r3,172(sp)
 2003d30:	df002907 	ldb	fp,164(sp)
 2003d34:	e001531e 	bne	fp,zero,2004284 <___vfprintf_internal_r+0x1df0>
 2003d38:	df002783 	ldbu	fp,158(sp)
 2003d3c:	d8802915 	stw	r2,164(sp)
 2003d40:	dc802c17 	ldw	r18,176(sp)
 2003d44:	d8002a15 	stw	zero,168(sp)
 2003d48:	003baf06 	br	2002c08 <__alt_data_end+0xff002c08>
 2003d4c:	d8c02e17 	ldw	r3,184(sp)
 2003d50:	d9002e17 	ldw	r4,184(sp)
 2003d54:	d9402e17 	ldw	r5,184(sp)
 2003d58:	18c00017 	ldw	r3,0(r3)
 2003d5c:	21000117 	ldw	r4,4(r4)
 2003d60:	29400204 	addi	r5,r5,8
 2003d64:	d8c03615 	stw	r3,216(sp)
 2003d68:	d9003815 	stw	r4,224(sp)
 2003d6c:	d9402e15 	stw	r5,184(sp)
 2003d70:	003b5006 	br	2002ab4 <__alt_data_end+0xff002ab4>
 2003d74:	ac400007 	ldb	r17,0(r21)
 2003d78:	003a2806 	br	200261c <__alt_data_end+0xff00261c>
 2003d7c:	9080100c 	andi	r2,r18,64
 2003d80:	1000a826 	beq	r2,zero,2004024 <___vfprintf_internal_r+0x1b90>
 2003d84:	d8c02e17 	ldw	r3,184(sp)
 2003d88:	002d883a 	mov	r22,zero
 2003d8c:	1cc0000b 	ldhu	r19,0(r3)
 2003d90:	18c00104 	addi	r3,r3,4
 2003d94:	d8c02e15 	stw	r3,184(sp)
 2003d98:	003caf06 	br	2003058 <__alt_data_end+0xff003058>
 2003d9c:	d9002e17 	ldw	r4,184(sp)
 2003da0:	d9402a17 	ldw	r5,168(sp)
 2003da4:	002d883a 	mov	r22,zero
 2003da8:	20800104 	addi	r2,r4,4
 2003dac:	24c00017 	ldw	r19,0(r4)
 2003db0:	283ebb0e 	bge	r5,zero,20038a0 <__alt_data_end+0xff0038a0>
 2003db4:	003ef106 	br	200397c <__alt_data_end+0xff00397c>
 2003db8:	9080040c 	andi	r2,r18,16
 2003dbc:	1000921e 	bne	r2,zero,2004008 <___vfprintf_internal_r+0x1b74>
 2003dc0:	9480100c 	andi	r18,r18,64
 2003dc4:	90013926 	beq	r18,zero,20042ac <___vfprintf_internal_r+0x1e18>
 2003dc8:	d9402e17 	ldw	r5,184(sp)
 2003dcc:	d8c02f17 	ldw	r3,188(sp)
 2003dd0:	28800017 	ldw	r2,0(r5)
 2003dd4:	29400104 	addi	r5,r5,4
 2003dd8:	d9402e15 	stw	r5,184(sp)
 2003ddc:	10c0000d 	sth	r3,0(r2)
 2003de0:	0039e406 	br	2002574 <__alt_data_end+0xff002574>
 2003de4:	9080100c 	andi	r2,r18,64
 2003de8:	10008026 	beq	r2,zero,2003fec <___vfprintf_internal_r+0x1b58>
 2003dec:	d8802e17 	ldw	r2,184(sp)
 2003df0:	14c0000f 	ldh	r19,0(r2)
 2003df4:	10800104 	addi	r2,r2,4
 2003df8:	d8802e15 	stw	r2,184(sp)
 2003dfc:	982dd7fa 	srai	r22,r19,31
 2003e00:	b005883a 	mov	r2,r22
 2003e04:	003af706 	br	20029e4 <__alt_data_end+0xff0029e4>
 2003e08:	9080100c 	andi	r2,r18,64
 2003e0c:	d8002785 	stb	zero,158(sp)
 2003e10:	10008a1e 	bne	r2,zero,200403c <___vfprintf_internal_r+0x1ba8>
 2003e14:	d9002e17 	ldw	r4,184(sp)
 2003e18:	d9402a17 	ldw	r5,168(sp)
 2003e1c:	002d883a 	mov	r22,zero
 2003e20:	20800104 	addi	r2,r4,4
 2003e24:	24c00017 	ldw	r19,0(r4)
 2003e28:	283e4b0e 	bge	r5,zero,2003758 <__alt_data_end+0xff003758>
 2003e2c:	9d86b03a 	or	r3,r19,r22
 2003e30:	d8802e15 	stw	r2,184(sp)
 2003e34:	183e4c1e 	bne	r3,zero,2003768 <__alt_data_end+0xff003768>
 2003e38:	0039883a 	mov	fp,zero
 2003e3c:	0005883a 	mov	r2,zero
 2003e40:	003d4006 	br	2003344 <__alt_data_end+0xff003344>
 2003e44:	01408074 	movhi	r5,513
 2003e48:	29487784 	addi	r5,r5,8670
 2003e4c:	d9402c15 	stw	r5,176(sp)
 2003e50:	d9402c17 	ldw	r5,176(sp)
 2003e54:	1c47883a 	add	r3,r3,r17
 2003e58:	10800044 	addi	r2,r2,1
 2003e5c:	41400015 	stw	r5,0(r8)
 2003e60:	44400115 	stw	r17,4(r8)
 2003e64:	d8c02015 	stw	r3,128(sp)
 2003e68:	d8801f15 	stw	r2,124(sp)
 2003e6c:	010001c4 	movi	r4,7
 2003e70:	20bec816 	blt	r4,r2,2003994 <__alt_data_end+0xff003994>
 2003e74:	42000204 	addi	r8,r8,8
 2003e78:	003ecd06 	br	20039b0 <__alt_data_end+0xff0039b0>
 2003e7c:	d9002a17 	ldw	r4,168(sp)
 2003e80:	d8002785 	stb	zero,158(sp)
 2003e84:	203d2d16 	blt	r4,zero,200333c <__alt_data_end+0xff00333c>
 2003e88:	00bfdfc4 	movi	r2,-129
 2003e8c:	90a4703a 	and	r18,r18,r2
 2003e90:	003a6106 	br	2002818 <__alt_data_end+0xff002818>
 2003e94:	01008074 	movhi	r4,513
 2003e98:	21087784 	addi	r4,r4,8670
 2003e9c:	d9002c15 	stw	r4,176(sp)
 2003ea0:	003bea06 	br	2002e4c <__alt_data_end+0xff002e4c>
 2003ea4:	d9002d17 	ldw	r4,180(sp)
 2003ea8:	d9801e04 	addi	r6,sp,120
 2003eac:	b80b883a 	mov	r5,r23
 2003eb0:	2009c740 	call	2009c74 <__sprint_r>
 2003eb4:	103a7b1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003eb8:	d8c02017 	ldw	r3,128(sp)
 2003ebc:	da000404 	addi	r8,sp,16
 2003ec0:	003d4106 	br	20033c8 <__alt_data_end+0xff0033c8>
 2003ec4:	d8801f17 	ldw	r2,124(sp)
 2003ec8:	01408074 	movhi	r5,513
 2003ecc:	01000044 	movi	r4,1
 2003ed0:	18c00044 	addi	r3,r3,1
 2003ed4:	10800044 	addi	r2,r2,1
 2003ed8:	29487704 	addi	r5,r5,8668
 2003edc:	41000115 	stw	r4,4(r8)
 2003ee0:	41400015 	stw	r5,0(r8)
 2003ee4:	d8c02015 	stw	r3,128(sp)
 2003ee8:	d8801f15 	stw	r2,124(sp)
 2003eec:	010001c4 	movi	r4,7
 2003ef0:	20805c16 	blt	r4,r2,2004064 <___vfprintf_internal_r+0x1bd0>
 2003ef4:	42000204 	addi	r8,r8,8
 2003ef8:	8800041e 	bne	r17,zero,2003f0c <___vfprintf_internal_r+0x1a78>
 2003efc:	d8803317 	ldw	r2,204(sp)
 2003f00:	1000021e 	bne	r2,zero,2003f0c <___vfprintf_internal_r+0x1a78>
 2003f04:	9080004c 	andi	r2,r18,1
 2003f08:	103be726 	beq	r2,zero,2002ea8 <__alt_data_end+0xff002ea8>
 2003f0c:	d9003717 	ldw	r4,220(sp)
 2003f10:	d8801f17 	ldw	r2,124(sp)
 2003f14:	d9403417 	ldw	r5,208(sp)
 2003f18:	20c7883a 	add	r3,r4,r3
 2003f1c:	10800044 	addi	r2,r2,1
 2003f20:	41000115 	stw	r4,4(r8)
 2003f24:	41400015 	stw	r5,0(r8)
 2003f28:	d8c02015 	stw	r3,128(sp)
 2003f2c:	d8801f15 	stw	r2,124(sp)
 2003f30:	010001c4 	movi	r4,7
 2003f34:	20812116 	blt	r4,r2,20043bc <___vfprintf_internal_r+0x1f28>
 2003f38:	42000204 	addi	r8,r8,8
 2003f3c:	0463c83a 	sub	r17,zero,r17
 2003f40:	0440730e 	bge	zero,r17,2004110 <___vfprintf_internal_r+0x1c7c>
 2003f44:	05800404 	movi	r22,16
 2003f48:	b440860e 	bge	r22,r17,2004164 <___vfprintf_internal_r+0x1cd0>
 2003f4c:	01408074 	movhi	r5,513
 2003f50:	29487784 	addi	r5,r5,8670
 2003f54:	d9402c15 	stw	r5,176(sp)
 2003f58:	070001c4 	movi	fp,7
 2003f5c:	dcc02d17 	ldw	r19,180(sp)
 2003f60:	00000306 	br	2003f70 <___vfprintf_internal_r+0x1adc>
 2003f64:	42000204 	addi	r8,r8,8
 2003f68:	8c7ffc04 	addi	r17,r17,-16
 2003f6c:	b440800e 	bge	r22,r17,2004170 <___vfprintf_internal_r+0x1cdc>
 2003f70:	18c00404 	addi	r3,r3,16
 2003f74:	10800044 	addi	r2,r2,1
 2003f78:	45000015 	stw	r20,0(r8)
 2003f7c:	45800115 	stw	r22,4(r8)
 2003f80:	d8c02015 	stw	r3,128(sp)
 2003f84:	d8801f15 	stw	r2,124(sp)
 2003f88:	e0bff60e 	bge	fp,r2,2003f64 <__alt_data_end+0xff003f64>
 2003f8c:	d9801e04 	addi	r6,sp,120
 2003f90:	b80b883a 	mov	r5,r23
 2003f94:	9809883a 	mov	r4,r19
 2003f98:	2009c740 	call	2009c74 <__sprint_r>
 2003f9c:	103a411e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2003fa0:	d8c02017 	ldw	r3,128(sp)
 2003fa4:	d8801f17 	ldw	r2,124(sp)
 2003fa8:	da000404 	addi	r8,sp,16
 2003fac:	003fee06 	br	2003f68 <__alt_data_end+0xff003f68>
 2003fb0:	00bfffc4 	movi	r2,-1
 2003fb4:	003a3f06 	br	20028b4 <__alt_data_end+0xff0028b4>
 2003fb8:	008011c4 	movi	r2,71
 2003fbc:	1440b816 	blt	r2,r17,20042a0 <___vfprintf_internal_r+0x1e0c>
 2003fc0:	04008074 	movhi	r16,513
 2003fc4:	84086904 	addi	r16,r16,8612
 2003fc8:	00c000c4 	movi	r3,3
 2003fcc:	00bfdfc4 	movi	r2,-129
 2003fd0:	d8c02915 	stw	r3,164(sp)
 2003fd4:	90a4703a 	and	r18,r18,r2
 2003fd8:	df002783 	ldbu	fp,158(sp)
 2003fdc:	d8c02b15 	stw	r3,172(sp)
 2003fe0:	d8002a15 	stw	zero,168(sp)
 2003fe4:	d8003215 	stw	zero,200(sp)
 2003fe8:	003b0706 	br	2002c08 <__alt_data_end+0xff002c08>
 2003fec:	d8c02e17 	ldw	r3,184(sp)
 2003ff0:	1cc00017 	ldw	r19,0(r3)
 2003ff4:	18c00104 	addi	r3,r3,4
 2003ff8:	d8c02e15 	stw	r3,184(sp)
 2003ffc:	982dd7fa 	srai	r22,r19,31
 2004000:	b005883a 	mov	r2,r22
 2004004:	003a7706 	br	20029e4 <__alt_data_end+0xff0029e4>
 2004008:	d8c02e17 	ldw	r3,184(sp)
 200400c:	d9002f17 	ldw	r4,188(sp)
 2004010:	18800017 	ldw	r2,0(r3)
 2004014:	18c00104 	addi	r3,r3,4
 2004018:	d8c02e15 	stw	r3,184(sp)
 200401c:	11000015 	stw	r4,0(r2)
 2004020:	00395406 	br	2002574 <__alt_data_end+0xff002574>
 2004024:	d9002e17 	ldw	r4,184(sp)
 2004028:	002d883a 	mov	r22,zero
 200402c:	24c00017 	ldw	r19,0(r4)
 2004030:	21000104 	addi	r4,r4,4
 2004034:	d9002e15 	stw	r4,184(sp)
 2004038:	003c0706 	br	2003058 <__alt_data_end+0xff003058>
 200403c:	d9402e17 	ldw	r5,184(sp)
 2004040:	d8c02a17 	ldw	r3,168(sp)
 2004044:	002d883a 	mov	r22,zero
 2004048:	28800104 	addi	r2,r5,4
 200404c:	2cc0000b 	ldhu	r19,0(r5)
 2004050:	183dc10e 	bge	r3,zero,2003758 <__alt_data_end+0xff003758>
 2004054:	003f7506 	br	2003e2c <__alt_data_end+0xff003e2c>
 2004058:	04008074 	movhi	r16,513
 200405c:	84086704 	addi	r16,r16,8604
 2004060:	003aa706 	br	2002b00 <__alt_data_end+0xff002b00>
 2004064:	d9002d17 	ldw	r4,180(sp)
 2004068:	d9801e04 	addi	r6,sp,120
 200406c:	b80b883a 	mov	r5,r23
 2004070:	2009c740 	call	2009c74 <__sprint_r>
 2004074:	103a0b1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2004078:	dc402617 	ldw	r17,152(sp)
 200407c:	d8c02017 	ldw	r3,128(sp)
 2004080:	da000404 	addi	r8,sp,16
 2004084:	003f9c06 	br	2003ef8 <__alt_data_end+0xff003ef8>
 2004088:	ac400043 	ldbu	r17,1(r21)
 200408c:	84000814 	ori	r16,r16,32
 2004090:	ad400044 	addi	r21,r21,1
 2004094:	8c403fcc 	andi	r17,r17,255
 2004098:	8c40201c 	xori	r17,r17,128
 200409c:	8c7fe004 	addi	r17,r17,-128
 20040a0:	00395e06 	br	200261c <__alt_data_end+0xff00261c>
 20040a4:	d8c02e15 	stw	r3,184(sp)
 20040a8:	0039883a 	mov	fp,zero
 20040ac:	003e3506 	br	2003984 <__alt_data_end+0xff003984>
 20040b0:	d9002d17 	ldw	r4,180(sp)
 20040b4:	d9801e04 	addi	r6,sp,120
 20040b8:	b80b883a 	mov	r5,r23
 20040bc:	2009c740 	call	2009c74 <__sprint_r>
 20040c0:	1039f81e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 20040c4:	d8c02017 	ldw	r3,128(sp)
 20040c8:	da000404 	addi	r8,sp,16
 20040cc:	003cd006 	br	2003410 <__alt_data_end+0xff003410>
 20040d0:	8009883a 	mov	r4,r16
 20040d4:	df003d15 	stw	fp,244(sp)
 20040d8:	20023fc0 	call	20023fc <strlen>
 20040dc:	d8802b15 	stw	r2,172(sp)
 20040e0:	da003d17 	ldw	r8,244(sp)
 20040e4:	103c200e 	bge	r2,zero,2003168 <__alt_data_end+0xff003168>
 20040e8:	0005883a 	mov	r2,zero
 20040ec:	003c1e06 	br	2003168 <__alt_data_end+0xff003168>
 20040f0:	d9002d17 	ldw	r4,180(sp)
 20040f4:	d9801e04 	addi	r6,sp,120
 20040f8:	b80b883a 	mov	r5,r23
 20040fc:	2009c740 	call	2009c74 <__sprint_r>
 2004100:	1039e81e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2004104:	d8c02017 	ldw	r3,128(sp)
 2004108:	d8801f17 	ldw	r2,124(sp)
 200410c:	da000404 	addi	r8,sp,16
 2004110:	d9403317 	ldw	r5,204(sp)
 2004114:	10800044 	addi	r2,r2,1
 2004118:	44000015 	stw	r16,0(r8)
 200411c:	28c7883a 	add	r3,r5,r3
 2004120:	003b5b06 	br	2002e90 <__alt_data_end+0xff002e90>
 2004124:	01008074 	movhi	r4,513
 2004128:	21087b84 	addi	r4,r4,8686
 200412c:	d9003515 	stw	r4,212(sp)
 2004130:	003af206 	br	2002cfc <__alt_data_end+0xff002cfc>
 2004134:	013fffc4 	movi	r4,-1
 2004138:	003a0806 	br	200295c <__alt_data_end+0xff00295c>
 200413c:	0023883a 	mov	r17,zero
 2004140:	003d9d06 	br	20037b8 <__alt_data_end+0xff0037b8>
 2004144:	d9002d17 	ldw	r4,180(sp)
 2004148:	d9801e04 	addi	r6,sp,120
 200414c:	b80b883a 	mov	r5,r23
 2004150:	2009c740 	call	2009c74 <__sprint_r>
 2004154:	1039d31e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2004158:	d8c02017 	ldw	r3,128(sp)
 200415c:	da000404 	addi	r8,sp,16
 2004160:	003d9406 	br	20037b4 <__alt_data_end+0xff0037b4>
 2004164:	01008074 	movhi	r4,513
 2004168:	21087784 	addi	r4,r4,8670
 200416c:	d9002c15 	stw	r4,176(sp)
 2004170:	d9002c17 	ldw	r4,176(sp)
 2004174:	1c47883a 	add	r3,r3,r17
 2004178:	10800044 	addi	r2,r2,1
 200417c:	41000015 	stw	r4,0(r8)
 2004180:	44400115 	stw	r17,4(r8)
 2004184:	d8c02015 	stw	r3,128(sp)
 2004188:	d8801f15 	stw	r2,124(sp)
 200418c:	010001c4 	movi	r4,7
 2004190:	20bfd716 	blt	r4,r2,20040f0 <__alt_data_end+0xff0040f0>
 2004194:	42000204 	addi	r8,r8,8
 2004198:	003fdd06 	br	2004110 <__alt_data_end+0xff004110>
 200419c:	d9002d17 	ldw	r4,180(sp)
 20041a0:	d9801e04 	addi	r6,sp,120
 20041a4:	b80b883a 	mov	r5,r23
 20041a8:	2009c740 	call	2009c74 <__sprint_r>
 20041ac:	1039bd1e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 20041b0:	d8802617 	ldw	r2,152(sp)
 20041b4:	d8c02017 	ldw	r3,128(sp)
 20041b8:	da000404 	addi	r8,sp,16
 20041bc:	003e1006 	br	2003a00 <__alt_data_end+0xff003a00>
 20041c0:	00800044 	movi	r2,1
 20041c4:	10803fcc 	andi	r2,r2,255
 20041c8:	00c00044 	movi	r3,1
 20041cc:	10fa0d26 	beq	r2,r3,2002a04 <__alt_data_end+0xff002a04>
 20041d0:	00c00084 	movi	r3,2
 20041d4:	10fbaf26 	beq	r2,r3,2003094 <__alt_data_end+0xff003094>
 20041d8:	003a6d06 	br	2002b90 <__alt_data_end+0xff002b90>
 20041dc:	01008074 	movhi	r4,513
 20041e0:	21087b84 	addi	r4,r4,8686
 20041e4:	d9003515 	stw	r4,212(sp)
 20041e8:	003b5406 	br	2002f3c <__alt_data_end+0xff002f3c>
 20041ec:	d8802a17 	ldw	r2,168(sp)
 20041f0:	00c00184 	movi	r3,6
 20041f4:	1880012e 	bgeu	r3,r2,20041fc <___vfprintf_internal_r+0x1d68>
 20041f8:	1805883a 	mov	r2,r3
 20041fc:	d8802b15 	stw	r2,172(sp)
 2004200:	1000ef16 	blt	r2,zero,20045c0 <___vfprintf_internal_r+0x212c>
 2004204:	04008074 	movhi	r16,513
 2004208:	d8802915 	stw	r2,164(sp)
 200420c:	dcc02e15 	stw	r19,184(sp)
 2004210:	d8002a15 	stw	zero,168(sp)
 2004214:	d8003215 	stw	zero,200(sp)
 2004218:	84087504 	addi	r16,r16,8660
 200421c:	0039883a 	mov	fp,zero
 2004220:	003a8006 	br	2002c24 <__alt_data_end+0xff002c24>
 2004224:	0021883a 	mov	r16,zero
 2004228:	003e0706 	br	2003a48 <__alt_data_end+0xff003a48>
 200422c:	d9002d17 	ldw	r4,180(sp)
 2004230:	d9801e04 	addi	r6,sp,120
 2004234:	b80b883a 	mov	r5,r23
 2004238:	2009c740 	call	2009c74 <__sprint_r>
 200423c:	1039991e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 2004240:	d8802617 	ldw	r2,152(sp)
 2004244:	d9403317 	ldw	r5,204(sp)
 2004248:	d8c02017 	ldw	r3,128(sp)
 200424c:	da000404 	addi	r8,sp,16
 2004250:	2885c83a 	sub	r2,r5,r2
 2004254:	003dfb06 	br	2003a44 <__alt_data_end+0xff003a44>
 2004258:	9080004c 	andi	r2,r18,1
 200425c:	103e8f1e 	bne	r2,zero,2003c9c <__alt_data_end+0xff003c9c>
 2004260:	d8802117 	ldw	r2,132(sp)
 2004264:	003e9e06 	br	2003ce0 <__alt_data_end+0xff003ce0>
 2004268:	1025883a 	mov	r18,r2
 200426c:	0039883a 	mov	fp,zero
 2004270:	00800084 	movi	r2,2
 2004274:	003fd306 	br	20041c4 <__alt_data_end+0xff0041c4>
 2004278:	07000b44 	movi	fp,45
 200427c:	df002785 	stb	fp,158(sp)
 2004280:	003a1b06 	br	2002af0 <__alt_data_end+0xff002af0>
 2004284:	00c00b44 	movi	r3,45
 2004288:	d8c02785 	stb	r3,158(sp)
 200428c:	d8802915 	stw	r2,164(sp)
 2004290:	dc802c17 	ldw	r18,176(sp)
 2004294:	d8002a15 	stw	zero,168(sp)
 2004298:	07000b44 	movi	fp,45
 200429c:	003a5e06 	br	2002c18 <__alt_data_end+0xff002c18>
 20042a0:	04008074 	movhi	r16,513
 20042a4:	84086a04 	addi	r16,r16,8616
 20042a8:	003f4706 	br	2003fc8 <__alt_data_end+0xff003fc8>
 20042ac:	d9002e17 	ldw	r4,184(sp)
 20042b0:	d9402f17 	ldw	r5,188(sp)
 20042b4:	20800017 	ldw	r2,0(r4)
 20042b8:	21000104 	addi	r4,r4,4
 20042bc:	d9002e15 	stw	r4,184(sp)
 20042c0:	11400015 	stw	r5,0(r2)
 20042c4:	0038ab06 	br	2002574 <__alt_data_end+0xff002574>
 20042c8:	dd802617 	ldw	r22,152(sp)
 20042cc:	00bfff44 	movi	r2,-3
 20042d0:	b0801c16 	blt	r22,r2,2004344 <___vfprintf_internal_r+0x1eb0>
 20042d4:	d9402a17 	ldw	r5,168(sp)
 20042d8:	2d801a16 	blt	r5,r22,2004344 <___vfprintf_internal_r+0x1eb0>
 20042dc:	dd803215 	stw	r22,200(sp)
 20042e0:	003e8906 	br	2003d08 <__alt_data_end+0xff003d08>
 20042e4:	01008074 	movhi	r4,513
 20042e8:	21087784 	addi	r4,r4,8670
 20042ec:	d9002c15 	stw	r4,176(sp)
 20042f0:	003c9106 	br	2003538 <__alt_data_end+0xff003538>
 20042f4:	e005883a 	mov	r2,fp
 20042f8:	003e7906 	br	2003ce0 <__alt_data_end+0xff003ce0>
 20042fc:	d9002a17 	ldw	r4,168(sp)
 2004300:	df002783 	ldbu	fp,158(sp)
 2004304:	dcc02e15 	stw	r19,184(sp)
 2004308:	d9002915 	stw	r4,164(sp)
 200430c:	d9002b15 	stw	r4,172(sp)
 2004310:	d8002a15 	stw	zero,168(sp)
 2004314:	d8003215 	stw	zero,200(sp)
 2004318:	003a3b06 	br	2002c08 <__alt_data_end+0xff002c08>
 200431c:	9080004c 	andi	r2,r18,1
 2004320:	0039883a 	mov	fp,zero
 2004324:	10000426 	beq	r2,zero,2004338 <___vfprintf_internal_r+0x1ea4>
 2004328:	00800c04 	movi	r2,48
 200432c:	dc001dc4 	addi	r16,sp,119
 2004330:	d8801dc5 	stb	r2,119(sp)
 2004334:	003b6406 	br	20030c8 <__alt_data_end+0xff0030c8>
 2004338:	d8002b15 	stw	zero,172(sp)
 200433c:	dc001e04 	addi	r16,sp,120
 2004340:	003a2b06 	br	2002bf0 <__alt_data_end+0xff002bf0>
 2004344:	8c7fff84 	addi	r17,r17,-2
 2004348:	b5bfffc4 	addi	r22,r22,-1
 200434c:	dd802615 	stw	r22,152(sp)
 2004350:	dc4022c5 	stb	r17,139(sp)
 2004354:	b000bf16 	blt	r22,zero,2004654 <___vfprintf_internal_r+0x21c0>
 2004358:	00800ac4 	movi	r2,43
 200435c:	d8802305 	stb	r2,140(sp)
 2004360:	00800244 	movi	r2,9
 2004364:	15807016 	blt	r2,r22,2004528 <___vfprintf_internal_r+0x2094>
 2004368:	00800c04 	movi	r2,48
 200436c:	b5800c04 	addi	r22,r22,48
 2004370:	d8802345 	stb	r2,141(sp)
 2004374:	dd802385 	stb	r22,142(sp)
 2004378:	d88023c4 	addi	r2,sp,143
 200437c:	df0022c4 	addi	fp,sp,139
 2004380:	d8c03317 	ldw	r3,204(sp)
 2004384:	1739c83a 	sub	fp,r2,fp
 2004388:	d9003317 	ldw	r4,204(sp)
 200438c:	e0c7883a 	add	r3,fp,r3
 2004390:	df003a15 	stw	fp,232(sp)
 2004394:	d8c02b15 	stw	r3,172(sp)
 2004398:	00800044 	movi	r2,1
 200439c:	1100b30e 	bge	r2,r4,200466c <___vfprintf_internal_r+0x21d8>
 20043a0:	d8c02b17 	ldw	r3,172(sp)
 20043a4:	18c00044 	addi	r3,r3,1
 20043a8:	d8c02b15 	stw	r3,172(sp)
 20043ac:	1805883a 	mov	r2,r3
 20043b0:	1800ac16 	blt	r3,zero,2004664 <___vfprintf_internal_r+0x21d0>
 20043b4:	d8003215 	stw	zero,200(sp)
 20043b8:	003e5d06 	br	2003d30 <__alt_data_end+0xff003d30>
 20043bc:	d9002d17 	ldw	r4,180(sp)
 20043c0:	d9801e04 	addi	r6,sp,120
 20043c4:	b80b883a 	mov	r5,r23
 20043c8:	2009c740 	call	2009c74 <__sprint_r>
 20043cc:	1039351e 	bne	r2,zero,20028a4 <__alt_data_end+0xff0028a4>
 20043d0:	dc402617 	ldw	r17,152(sp)
 20043d4:	d8c02017 	ldw	r3,128(sp)
 20043d8:	d8801f17 	ldw	r2,124(sp)
 20043dc:	da000404 	addi	r8,sp,16
 20043e0:	003ed606 	br	2003f3c <__alt_data_end+0xff003f3c>
 20043e4:	182b883a 	mov	r21,r3
 20043e8:	d8002a15 	stw	zero,168(sp)
 20043ec:	00388c06 	br	2002620 <__alt_data_end+0xff002620>
 20043f0:	d8802a17 	ldw	r2,168(sp)
 20043f4:	103e071e 	bne	r2,zero,2003c14 <__alt_data_end+0xff003c14>
 20043f8:	dc002a15 	stw	r16,168(sp)
 20043fc:	003e0506 	br	2003c14 <__alt_data_end+0xff003c14>
 2004400:	d9002a17 	ldw	r4,168(sp)
 2004404:	20c00044 	addi	r3,r4,1
 2004408:	003e0f06 	br	2003c48 <__alt_data_end+0xff003c48>
 200440c:	01400184 	movi	r5,6
 2004410:	d9402a15 	stw	r5,168(sp)
 2004414:	003dff06 	br	2003c14 <__alt_data_end+0xff003c14>
 2004418:	d8802104 	addi	r2,sp,132
 200441c:	d8800315 	stw	r2,12(sp)
 2004420:	d8802504 	addi	r2,sp,148
 2004424:	d8800215 	stw	r2,8(sp)
 2004428:	d8802604 	addi	r2,sp,152
 200442c:	d8800115 	stw	r2,4(sp)
 2004430:	d8802a17 	ldw	r2,168(sp)
 2004434:	d9403617 	ldw	r5,216(sp)
 2004438:	d9002d17 	ldw	r4,180(sp)
 200443c:	d8800015 	stw	r2,0(sp)
 2004440:	01c000c4 	movi	r7,3
 2004444:	980d883a 	mov	r6,r19
 2004448:	da003d15 	stw	r8,244(sp)
 200444c:	2004bc40 	call	2004bc4 <_dtoa_r>
 2004450:	d8c02a17 	ldw	r3,168(sp)
 2004454:	da003d17 	ldw	r8,244(sp)
 2004458:	1021883a 	mov	r16,r2
 200445c:	10f9883a 	add	fp,r2,r3
 2004460:	81000007 	ldb	r4,0(r16)
 2004464:	00800c04 	movi	r2,48
 2004468:	20805e26 	beq	r4,r2,20045e4 <___vfprintf_internal_r+0x2150>
 200446c:	d8c02617 	ldw	r3,152(sp)
 2004470:	e0f9883a 	add	fp,fp,r3
 2004474:	003e0a06 	br	2003ca0 <__alt_data_end+0xff003ca0>
 2004478:	00c00b44 	movi	r3,45
 200447c:	24e0003c 	xorhi	r19,r4,32768
 2004480:	d8c02905 	stb	r3,164(sp)
 2004484:	003de906 	br	2003c2c <__alt_data_end+0xff003c2c>
 2004488:	d8c03217 	ldw	r3,200(sp)
 200448c:	00c07a0e 	bge	zero,r3,2004678 <___vfprintf_internal_r+0x21e4>
 2004490:	00800044 	movi	r2,1
 2004494:	d9003317 	ldw	r4,204(sp)
 2004498:	1105883a 	add	r2,r2,r4
 200449c:	d8802b15 	stw	r2,172(sp)
 20044a0:	10004e16 	blt	r2,zero,20045dc <___vfprintf_internal_r+0x2148>
 20044a4:	044019c4 	movi	r17,103
 20044a8:	003e2106 	br	2003d30 <__alt_data_end+0xff003d30>
 20044ac:	d9002a17 	ldw	r4,168(sp)
 20044b0:	d8802104 	addi	r2,sp,132
 20044b4:	d8800315 	stw	r2,12(sp)
 20044b8:	d9000015 	stw	r4,0(sp)
 20044bc:	d8802504 	addi	r2,sp,148
 20044c0:	d9403617 	ldw	r5,216(sp)
 20044c4:	d9002d17 	ldw	r4,180(sp)
 20044c8:	d8800215 	stw	r2,8(sp)
 20044cc:	d8802604 	addi	r2,sp,152
 20044d0:	d8800115 	stw	r2,4(sp)
 20044d4:	01c000c4 	movi	r7,3
 20044d8:	980d883a 	mov	r6,r19
 20044dc:	da003d15 	stw	r8,244(sp)
 20044e0:	2004bc40 	call	2004bc4 <_dtoa_r>
 20044e4:	d8c02a17 	ldw	r3,168(sp)
 20044e8:	da003d17 	ldw	r8,244(sp)
 20044ec:	1021883a 	mov	r16,r2
 20044f0:	00801184 	movi	r2,70
 20044f4:	80f9883a 	add	fp,r16,r3
 20044f8:	88bfd926 	beq	r17,r2,2004460 <__alt_data_end+0xff004460>
 20044fc:	003de806 	br	2003ca0 <__alt_data_end+0xff003ca0>
 2004500:	d9002a17 	ldw	r4,168(sp)
 2004504:	00c04d0e 	bge	zero,r3,200463c <___vfprintf_internal_r+0x21a8>
 2004508:	2000441e 	bne	r4,zero,200461c <___vfprintf_internal_r+0x2188>
 200450c:	9480004c 	andi	r18,r18,1
 2004510:	9000421e 	bne	r18,zero,200461c <___vfprintf_internal_r+0x2188>
 2004514:	1805883a 	mov	r2,r3
 2004518:	18006f16 	blt	r3,zero,20046d8 <___vfprintf_internal_r+0x2244>
 200451c:	d8c03217 	ldw	r3,200(sp)
 2004520:	d8c02b15 	stw	r3,172(sp)
 2004524:	003e0206 	br	2003d30 <__alt_data_end+0xff003d30>
 2004528:	df0022c4 	addi	fp,sp,139
 200452c:	dc002a15 	stw	r16,168(sp)
 2004530:	4027883a 	mov	r19,r8
 2004534:	e021883a 	mov	r16,fp
 2004538:	b009883a 	mov	r4,r22
 200453c:	01400284 	movi	r5,10
 2004540:	200c8000 	call	200c800 <__modsi3>
 2004544:	10800c04 	addi	r2,r2,48
 2004548:	843fffc4 	addi	r16,r16,-1
 200454c:	b009883a 	mov	r4,r22
 2004550:	01400284 	movi	r5,10
 2004554:	80800005 	stb	r2,0(r16)
 2004558:	200c77c0 	call	200c77c <__divsi3>
 200455c:	102d883a 	mov	r22,r2
 2004560:	00800244 	movi	r2,9
 2004564:	15bff416 	blt	r2,r22,2004538 <__alt_data_end+0xff004538>
 2004568:	9811883a 	mov	r8,r19
 200456c:	b0800c04 	addi	r2,r22,48
 2004570:	8027883a 	mov	r19,r16
 2004574:	997fffc4 	addi	r5,r19,-1
 2004578:	98bfffc5 	stb	r2,-1(r19)
 200457c:	dc002a17 	ldw	r16,168(sp)
 2004580:	2f006d2e 	bgeu	r5,fp,2004738 <___vfprintf_internal_r+0x22a4>
 2004584:	d9c02384 	addi	r7,sp,142
 2004588:	3ccfc83a 	sub	r7,r7,r19
 200458c:	d9002344 	addi	r4,sp,141
 2004590:	e1cf883a 	add	r7,fp,r7
 2004594:	00000106 	br	200459c <___vfprintf_internal_r+0x2108>
 2004598:	28800003 	ldbu	r2,0(r5)
 200459c:	20800005 	stb	r2,0(r4)
 20045a0:	21000044 	addi	r4,r4,1
 20045a4:	29400044 	addi	r5,r5,1
 20045a8:	393ffb1e 	bne	r7,r4,2004598 <__alt_data_end+0xff004598>
 20045ac:	d8802304 	addi	r2,sp,140
 20045b0:	14c5c83a 	sub	r2,r2,r19
 20045b4:	d8c02344 	addi	r3,sp,141
 20045b8:	1885883a 	add	r2,r3,r2
 20045bc:	003f7006 	br	2004380 <__alt_data_end+0xff004380>
 20045c0:	0005883a 	mov	r2,zero
 20045c4:	003f0f06 	br	2004204 <__alt_data_end+0xff004204>
 20045c8:	d8c03217 	ldw	r3,200(sp)
 20045cc:	18c00044 	addi	r3,r3,1
 20045d0:	d8c02b15 	stw	r3,172(sp)
 20045d4:	1805883a 	mov	r2,r3
 20045d8:	183fb20e 	bge	r3,zero,20044a4 <__alt_data_end+0xff0044a4>
 20045dc:	0005883a 	mov	r2,zero
 20045e0:	003fb006 	br	20044a4 <__alt_data_end+0xff0044a4>
 20045e4:	d9003617 	ldw	r4,216(sp)
 20045e8:	000d883a 	mov	r6,zero
 20045ec:	000f883a 	mov	r7,zero
 20045f0:	980b883a 	mov	r5,r19
 20045f4:	d8c03c15 	stw	r3,240(sp)
 20045f8:	da003d15 	stw	r8,244(sp)
 20045fc:	200dbd40 	call	200dbd4 <__eqdf2>
 2004600:	d8c03c17 	ldw	r3,240(sp)
 2004604:	da003d17 	ldw	r8,244(sp)
 2004608:	103f9826 	beq	r2,zero,200446c <__alt_data_end+0xff00446c>
 200460c:	00800044 	movi	r2,1
 2004610:	10c7c83a 	sub	r3,r2,r3
 2004614:	d8c02615 	stw	r3,152(sp)
 2004618:	003f9506 	br	2004470 <__alt_data_end+0xff004470>
 200461c:	d9002a17 	ldw	r4,168(sp)
 2004620:	d8c03217 	ldw	r3,200(sp)
 2004624:	20800044 	addi	r2,r4,1
 2004628:	1885883a 	add	r2,r3,r2
 200462c:	d8802b15 	stw	r2,172(sp)
 2004630:	103dbf0e 	bge	r2,zero,2003d30 <__alt_data_end+0xff003d30>
 2004634:	0005883a 	mov	r2,zero
 2004638:	003dbd06 	br	2003d30 <__alt_data_end+0xff003d30>
 200463c:	2000201e 	bne	r4,zero,20046c0 <___vfprintf_internal_r+0x222c>
 2004640:	9480004c 	andi	r18,r18,1
 2004644:	90001e1e 	bne	r18,zero,20046c0 <___vfprintf_internal_r+0x222c>
 2004648:	00800044 	movi	r2,1
 200464c:	d8802b15 	stw	r2,172(sp)
 2004650:	003db706 	br	2003d30 <__alt_data_end+0xff003d30>
 2004654:	00800b44 	movi	r2,45
 2004658:	05adc83a 	sub	r22,zero,r22
 200465c:	d8802305 	stb	r2,140(sp)
 2004660:	003f3f06 	br	2004360 <__alt_data_end+0xff004360>
 2004664:	0005883a 	mov	r2,zero
 2004668:	003f5206 	br	20043b4 <__alt_data_end+0xff0043b4>
 200466c:	90a4703a 	and	r18,r18,r2
 2004670:	903f4e26 	beq	r18,zero,20043ac <__alt_data_end+0xff0043ac>
 2004674:	003f4a06 	br	20043a0 <__alt_data_end+0xff0043a0>
 2004678:	00800084 	movi	r2,2
 200467c:	10c5c83a 	sub	r2,r2,r3
 2004680:	003f8406 	br	2004494 <__alt_data_end+0xff004494>
 2004684:	d9402e17 	ldw	r5,184(sp)
 2004688:	d9002e17 	ldw	r4,184(sp)
 200468c:	ac400043 	ldbu	r17,1(r21)
 2004690:	29400017 	ldw	r5,0(r5)
 2004694:	20800104 	addi	r2,r4,4
 2004698:	d8802e15 	stw	r2,184(sp)
 200469c:	d9402a15 	stw	r5,168(sp)
 20046a0:	182b883a 	mov	r21,r3
 20046a4:	283e7b0e 	bge	r5,zero,2004094 <__alt_data_end+0xff004094>
 20046a8:	8c403fcc 	andi	r17,r17,255
 20046ac:	017fffc4 	movi	r5,-1
 20046b0:	8c40201c 	xori	r17,r17,128
 20046b4:	d9402a15 	stw	r5,168(sp)
 20046b8:	8c7fe004 	addi	r17,r17,-128
 20046bc:	0037d706 	br	200261c <__alt_data_end+0xff00261c>
 20046c0:	d8c02a17 	ldw	r3,168(sp)
 20046c4:	18c00084 	addi	r3,r3,2
 20046c8:	d8c02b15 	stw	r3,172(sp)
 20046cc:	1805883a 	mov	r2,r3
 20046d0:	183d970e 	bge	r3,zero,2003d30 <__alt_data_end+0xff003d30>
 20046d4:	003fd706 	br	2004634 <__alt_data_end+0xff004634>
 20046d8:	0005883a 	mov	r2,zero
 20046dc:	003f8f06 	br	200451c <__alt_data_end+0xff00451c>
 20046e0:	9080004c 	andi	r2,r18,1
 20046e4:	103f821e 	bne	r2,zero,20044f0 <__alt_data_end+0xff0044f0>
 20046e8:	d8802117 	ldw	r2,132(sp)
 20046ec:	1405c83a 	sub	r2,r2,r16
 20046f0:	d8803315 	stw	r2,204(sp)
 20046f4:	b47ef426 	beq	r22,r17,20042c8 <__alt_data_end+0xff0042c8>
 20046f8:	dd802617 	ldw	r22,152(sp)
 20046fc:	003f1206 	br	2004348 <__alt_data_end+0xff004348>
 2004700:	d8c02b03 	ldbu	r3,172(sp)
 2004704:	d8c02785 	stb	r3,158(sp)
 2004708:	0038df06 	br	2002a88 <__alt_data_end+0xff002a88>
 200470c:	d8c02b03 	ldbu	r3,172(sp)
 2004710:	d8c02785 	stb	r3,158(sp)
 2004714:	0038aa06 	br	20029c0 <__alt_data_end+0xff0029c0>
 2004718:	d8c02b03 	ldbu	r3,172(sp)
 200471c:	d8c02785 	stb	r3,158(sp)
 2004720:	003a4306 	br	2003030 <__alt_data_end+0xff003030>
 2004724:	d8c02b03 	ldbu	r3,172(sp)
 2004728:	d8c02785 	stb	r3,158(sp)
 200472c:	003af506 	br	2003304 <__alt_data_end+0xff003304>
 2004730:	0005883a 	mov	r2,zero
 2004734:	003d7b06 	br	2003d24 <__alt_data_end+0xff003d24>
 2004738:	d8802344 	addi	r2,sp,141
 200473c:	003f1006 	br	2004380 <__alt_data_end+0xff004380>
 2004740:	d8c02b03 	ldbu	r3,172(sp)
 2004744:	d8c02785 	stb	r3,158(sp)
 2004748:	0038fd06 	br	2002b40 <__alt_data_end+0xff002b40>
 200474c:	d8c02b03 	ldbu	r3,172(sp)
 2004750:	d8c02785 	stb	r3,158(sp)
 2004754:	003a9706 	br	20031b4 <__alt_data_end+0xff0031b4>
 2004758:	d8c02b03 	ldbu	r3,172(sp)
 200475c:	d8c02785 	stb	r3,158(sp)
 2004760:	003a1806 	br	2002fc4 <__alt_data_end+0xff002fc4>
 2004764:	d8c02b03 	ldbu	r3,172(sp)
 2004768:	d8c02785 	stb	r3,158(sp)
 200476c:	003abe06 	br	2003268 <__alt_data_end+0xff003268>

02004770 <__vfprintf_internal>:
 2004770:	00808074 	movhi	r2,513
 2004774:	108fd204 	addi	r2,r2,16200
 2004778:	300f883a 	mov	r7,r6
 200477c:	280d883a 	mov	r6,r5
 2004780:	200b883a 	mov	r5,r4
 2004784:	11000017 	ldw	r4,0(r2)
 2004788:	20024941 	jmpi	2002494 <___vfprintf_internal_r>

0200478c <__sbprintf>:
 200478c:	2880030b 	ldhu	r2,12(r5)
 2004790:	2ac01917 	ldw	r11,100(r5)
 2004794:	2a80038b 	ldhu	r10,14(r5)
 2004798:	2a400717 	ldw	r9,28(r5)
 200479c:	2a000917 	ldw	r8,36(r5)
 20047a0:	defee204 	addi	sp,sp,-1144
 20047a4:	00c10004 	movi	r3,1024
 20047a8:	dc011a15 	stw	r16,1128(sp)
 20047ac:	10bfff4c 	andi	r2,r2,65533
 20047b0:	2821883a 	mov	r16,r5
 20047b4:	d8cb883a 	add	r5,sp,r3
 20047b8:	dc811c15 	stw	r18,1136(sp)
 20047bc:	dc411b15 	stw	r17,1132(sp)
 20047c0:	dfc11d15 	stw	ra,1140(sp)
 20047c4:	2025883a 	mov	r18,r4
 20047c8:	d881030d 	sth	r2,1036(sp)
 20047cc:	dac11915 	stw	r11,1124(sp)
 20047d0:	da81038d 	sth	r10,1038(sp)
 20047d4:	da410715 	stw	r9,1052(sp)
 20047d8:	da010915 	stw	r8,1060(sp)
 20047dc:	dec10015 	stw	sp,1024(sp)
 20047e0:	dec10415 	stw	sp,1040(sp)
 20047e4:	d8c10215 	stw	r3,1032(sp)
 20047e8:	d8c10515 	stw	r3,1044(sp)
 20047ec:	d8010615 	stw	zero,1048(sp)
 20047f0:	20024940 	call	2002494 <___vfprintf_internal_r>
 20047f4:	1023883a 	mov	r17,r2
 20047f8:	10000416 	blt	r2,zero,200480c <__sbprintf+0x80>
 20047fc:	d9410004 	addi	r5,sp,1024
 2004800:	9009883a 	mov	r4,r18
 2004804:	20064680 	call	2006468 <_fflush_r>
 2004808:	10000d1e 	bne	r2,zero,2004840 <__sbprintf+0xb4>
 200480c:	d881030b 	ldhu	r2,1036(sp)
 2004810:	1080100c 	andi	r2,r2,64
 2004814:	10000326 	beq	r2,zero,2004824 <__sbprintf+0x98>
 2004818:	8080030b 	ldhu	r2,12(r16)
 200481c:	10801014 	ori	r2,r2,64
 2004820:	8080030d 	sth	r2,12(r16)
 2004824:	8805883a 	mov	r2,r17
 2004828:	dfc11d17 	ldw	ra,1140(sp)
 200482c:	dc811c17 	ldw	r18,1136(sp)
 2004830:	dc411b17 	ldw	r17,1132(sp)
 2004834:	dc011a17 	ldw	r16,1128(sp)
 2004838:	dec11e04 	addi	sp,sp,1144
 200483c:	f800283a 	ret
 2004840:	047fffc4 	movi	r17,-1
 2004844:	003ff106 	br	200480c <__alt_data_end+0xff00480c>

02004848 <__swsetup_r>:
 2004848:	00808074 	movhi	r2,513
 200484c:	defffd04 	addi	sp,sp,-12
 2004850:	108fd204 	addi	r2,r2,16200
 2004854:	dc400115 	stw	r17,4(sp)
 2004858:	2023883a 	mov	r17,r4
 200485c:	11000017 	ldw	r4,0(r2)
 2004860:	dc000015 	stw	r16,0(sp)
 2004864:	dfc00215 	stw	ra,8(sp)
 2004868:	2821883a 	mov	r16,r5
 200486c:	20000226 	beq	r4,zero,2004878 <__swsetup_r+0x30>
 2004870:	20800e17 	ldw	r2,56(r4)
 2004874:	10003126 	beq	r2,zero,200493c <__swsetup_r+0xf4>
 2004878:	8080030b 	ldhu	r2,12(r16)
 200487c:	10c0020c 	andi	r3,r2,8
 2004880:	1009883a 	mov	r4,r2
 2004884:	18000f26 	beq	r3,zero,20048c4 <__swsetup_r+0x7c>
 2004888:	80c00417 	ldw	r3,16(r16)
 200488c:	18001526 	beq	r3,zero,20048e4 <__swsetup_r+0x9c>
 2004890:	1100004c 	andi	r4,r2,1
 2004894:	20001c1e 	bne	r4,zero,2004908 <__swsetup_r+0xc0>
 2004898:	1080008c 	andi	r2,r2,2
 200489c:	1000291e 	bne	r2,zero,2004944 <__swsetup_r+0xfc>
 20048a0:	80800517 	ldw	r2,20(r16)
 20048a4:	80800215 	stw	r2,8(r16)
 20048a8:	18001c26 	beq	r3,zero,200491c <__swsetup_r+0xd4>
 20048ac:	0005883a 	mov	r2,zero
 20048b0:	dfc00217 	ldw	ra,8(sp)
 20048b4:	dc400117 	ldw	r17,4(sp)
 20048b8:	dc000017 	ldw	r16,0(sp)
 20048bc:	dec00304 	addi	sp,sp,12
 20048c0:	f800283a 	ret
 20048c4:	2080040c 	andi	r2,r4,16
 20048c8:	10002e26 	beq	r2,zero,2004984 <__swsetup_r+0x13c>
 20048cc:	2080010c 	andi	r2,r4,4
 20048d0:	10001e1e 	bne	r2,zero,200494c <__swsetup_r+0x104>
 20048d4:	80c00417 	ldw	r3,16(r16)
 20048d8:	20800214 	ori	r2,r4,8
 20048dc:	8080030d 	sth	r2,12(r16)
 20048e0:	183feb1e 	bne	r3,zero,2004890 <__alt_data_end+0xff004890>
 20048e4:	1100a00c 	andi	r4,r2,640
 20048e8:	01408004 	movi	r5,512
 20048ec:	217fe826 	beq	r4,r5,2004890 <__alt_data_end+0xff004890>
 20048f0:	800b883a 	mov	r5,r16
 20048f4:	8809883a 	mov	r4,r17
 20048f8:	20074040 	call	2007404 <__smakebuf_r>
 20048fc:	8080030b 	ldhu	r2,12(r16)
 2004900:	80c00417 	ldw	r3,16(r16)
 2004904:	003fe206 	br	2004890 <__alt_data_end+0xff004890>
 2004908:	80800517 	ldw	r2,20(r16)
 200490c:	80000215 	stw	zero,8(r16)
 2004910:	0085c83a 	sub	r2,zero,r2
 2004914:	80800615 	stw	r2,24(r16)
 2004918:	183fe41e 	bne	r3,zero,20048ac <__alt_data_end+0xff0048ac>
 200491c:	80c0030b 	ldhu	r3,12(r16)
 2004920:	0005883a 	mov	r2,zero
 2004924:	1900200c 	andi	r4,r3,128
 2004928:	203fe126 	beq	r4,zero,20048b0 <__alt_data_end+0xff0048b0>
 200492c:	18c01014 	ori	r3,r3,64
 2004930:	80c0030d 	sth	r3,12(r16)
 2004934:	00bfffc4 	movi	r2,-1
 2004938:	003fdd06 	br	20048b0 <__alt_data_end+0xff0048b0>
 200493c:	20068540 	call	2006854 <__sinit>
 2004940:	003fcd06 	br	2004878 <__alt_data_end+0xff004878>
 2004944:	0005883a 	mov	r2,zero
 2004948:	003fd606 	br	20048a4 <__alt_data_end+0xff0048a4>
 200494c:	81400c17 	ldw	r5,48(r16)
 2004950:	28000626 	beq	r5,zero,200496c <__swsetup_r+0x124>
 2004954:	80801004 	addi	r2,r16,64
 2004958:	28800326 	beq	r5,r2,2004968 <__swsetup_r+0x120>
 200495c:	8809883a 	mov	r4,r17
 2004960:	20069c80 	call	20069c8 <_free_r>
 2004964:	8100030b 	ldhu	r4,12(r16)
 2004968:	80000c15 	stw	zero,48(r16)
 200496c:	80c00417 	ldw	r3,16(r16)
 2004970:	00bff6c4 	movi	r2,-37
 2004974:	1108703a 	and	r4,r2,r4
 2004978:	80000115 	stw	zero,4(r16)
 200497c:	80c00015 	stw	r3,0(r16)
 2004980:	003fd506 	br	20048d8 <__alt_data_end+0xff0048d8>
 2004984:	00800244 	movi	r2,9
 2004988:	88800015 	stw	r2,0(r17)
 200498c:	20801014 	ori	r2,r4,64
 2004990:	8080030d 	sth	r2,12(r16)
 2004994:	00bfffc4 	movi	r2,-1
 2004998:	003fc506 	br	20048b0 <__alt_data_end+0xff0048b0>

0200499c <quorem>:
 200499c:	defff204 	addi	sp,sp,-56
 20049a0:	ddc00b15 	stw	r23,44(sp)
 20049a4:	20800417 	ldw	r2,16(r4)
 20049a8:	2dc00417 	ldw	r23,16(r5)
 20049ac:	dfc00d15 	stw	ra,52(sp)
 20049b0:	df000c15 	stw	fp,48(sp)
 20049b4:	dd800a15 	stw	r22,40(sp)
 20049b8:	dd400915 	stw	r21,36(sp)
 20049bc:	dd000815 	stw	r20,32(sp)
 20049c0:	dcc00715 	stw	r19,28(sp)
 20049c4:	dc800615 	stw	r18,24(sp)
 20049c8:	dc400515 	stw	r17,20(sp)
 20049cc:	dc000415 	stw	r16,16(sp)
 20049d0:	15c07a16 	blt	r2,r23,2004bbc <quorem+0x220>
 20049d4:	bdffffc4 	addi	r23,r23,-1
 20049d8:	bde9883a 	add	r20,r23,r23
 20049dc:	28c00504 	addi	r3,r5,20
 20049e0:	a529883a 	add	r20,r20,r20
 20049e4:	1d39883a 	add	fp,r3,r20
 20049e8:	24c00504 	addi	r19,r4,20
 20049ec:	d9400215 	stw	r5,8(sp)
 20049f0:	9d29883a 	add	r20,r19,r20
 20049f4:	e1400017 	ldw	r5,0(fp)
 20049f8:	d9000015 	stw	r4,0(sp)
 20049fc:	a1000017 	ldw	r4,0(r20)
 2004a00:	29400044 	addi	r5,r5,1
 2004a04:	d8c00115 	stw	r3,4(sp)
 2004a08:	dd000315 	stw	r20,12(sp)
 2004a0c:	200c8740 	call	200c874 <__udivsi3>
 2004a10:	1025883a 	mov	r18,r2
 2004a14:	10003026 	beq	r2,zero,2004ad8 <quorem+0x13c>
 2004a18:	dc400117 	ldw	r17,4(sp)
 2004a1c:	9829883a 	mov	r20,r19
 2004a20:	002d883a 	mov	r22,zero
 2004a24:	0021883a 	mov	r16,zero
 2004a28:	8d400017 	ldw	r21,0(r17)
 2004a2c:	900b883a 	mov	r5,r18
 2004a30:	8c400104 	addi	r17,r17,4
 2004a34:	a93fffcc 	andi	r4,r21,65535
 2004a38:	200c9300 	call	200c930 <__mulsi3>
 2004a3c:	a808d43a 	srli	r4,r21,16
 2004a40:	900b883a 	mov	r5,r18
 2004a44:	15ad883a 	add	r22,r2,r22
 2004a48:	200c9300 	call	200c930 <__mulsi3>
 2004a4c:	a1000017 	ldw	r4,0(r20)
 2004a50:	b00cd43a 	srli	r6,r22,16
 2004a54:	b0ffffcc 	andi	r3,r22,65535
 2004a58:	217fffcc 	andi	r5,r4,65535
 2004a5c:	2c21883a 	add	r16,r5,r16
 2004a60:	80c7c83a 	sub	r3,r16,r3
 2004a64:	2008d43a 	srli	r4,r4,16
 2004a68:	1185883a 	add	r2,r2,r6
 2004a6c:	1821d43a 	srai	r16,r3,16
 2004a70:	117fffcc 	andi	r5,r2,65535
 2004a74:	2149c83a 	sub	r4,r4,r5
 2004a78:	2421883a 	add	r16,r4,r16
 2004a7c:	8008943a 	slli	r4,r16,16
 2004a80:	18ffffcc 	andi	r3,r3,65535
 2004a84:	102cd43a 	srli	r22,r2,16
 2004a88:	20c8b03a 	or	r4,r4,r3
 2004a8c:	a1000015 	stw	r4,0(r20)
 2004a90:	8021d43a 	srai	r16,r16,16
 2004a94:	a5000104 	addi	r20,r20,4
 2004a98:	e47fe32e 	bgeu	fp,r17,2004a28 <__alt_data_end+0xff004a28>
 2004a9c:	d8c00317 	ldw	r3,12(sp)
 2004aa0:	18800017 	ldw	r2,0(r3)
 2004aa4:	10000c1e 	bne	r2,zero,2004ad8 <quorem+0x13c>
 2004aa8:	18bfff04 	addi	r2,r3,-4
 2004aac:	9880082e 	bgeu	r19,r2,2004ad0 <quorem+0x134>
 2004ab0:	18ffff17 	ldw	r3,-4(r3)
 2004ab4:	18000326 	beq	r3,zero,2004ac4 <quorem+0x128>
 2004ab8:	00000506 	br	2004ad0 <quorem+0x134>
 2004abc:	10c00017 	ldw	r3,0(r2)
 2004ac0:	1800031e 	bne	r3,zero,2004ad0 <quorem+0x134>
 2004ac4:	10bfff04 	addi	r2,r2,-4
 2004ac8:	bdffffc4 	addi	r23,r23,-1
 2004acc:	98bffb36 	bltu	r19,r2,2004abc <__alt_data_end+0xff004abc>
 2004ad0:	d8c00017 	ldw	r3,0(sp)
 2004ad4:	1dc00415 	stw	r23,16(r3)
 2004ad8:	d9400217 	ldw	r5,8(sp)
 2004adc:	d9000017 	ldw	r4,0(sp)
 2004ae0:	2008c000 	call	2008c00 <__mcmp>
 2004ae4:	10002816 	blt	r2,zero,2004b88 <quorem+0x1ec>
 2004ae8:	dc400117 	ldw	r17,4(sp)
 2004aec:	94800044 	addi	r18,r18,1
 2004af0:	980d883a 	mov	r6,r19
 2004af4:	0007883a 	mov	r3,zero
 2004af8:	31000017 	ldw	r4,0(r6)
 2004afc:	89400017 	ldw	r5,0(r17)
 2004b00:	31800104 	addi	r6,r6,4
 2004b04:	20bfffcc 	andi	r2,r4,65535
 2004b08:	10c7883a 	add	r3,r2,r3
 2004b0c:	28bfffcc 	andi	r2,r5,65535
 2004b10:	1885c83a 	sub	r2,r3,r2
 2004b14:	280ad43a 	srli	r5,r5,16
 2004b18:	2008d43a 	srli	r4,r4,16
 2004b1c:	1007d43a 	srai	r3,r2,16
 2004b20:	10bfffcc 	andi	r2,r2,65535
 2004b24:	2149c83a 	sub	r4,r4,r5
 2004b28:	20c9883a 	add	r4,r4,r3
 2004b2c:	200a943a 	slli	r5,r4,16
 2004b30:	8c400104 	addi	r17,r17,4
 2004b34:	2007d43a 	srai	r3,r4,16
 2004b38:	2884b03a 	or	r2,r5,r2
 2004b3c:	30bfff15 	stw	r2,-4(r6)
 2004b40:	e47fed2e 	bgeu	fp,r17,2004af8 <__alt_data_end+0xff004af8>
 2004b44:	bdc5883a 	add	r2,r23,r23
 2004b48:	1085883a 	add	r2,r2,r2
 2004b4c:	9887883a 	add	r3,r19,r2
 2004b50:	18800017 	ldw	r2,0(r3)
 2004b54:	10000c1e 	bne	r2,zero,2004b88 <quorem+0x1ec>
 2004b58:	18bfff04 	addi	r2,r3,-4
 2004b5c:	9880082e 	bgeu	r19,r2,2004b80 <quorem+0x1e4>
 2004b60:	18ffff17 	ldw	r3,-4(r3)
 2004b64:	18000326 	beq	r3,zero,2004b74 <quorem+0x1d8>
 2004b68:	00000506 	br	2004b80 <quorem+0x1e4>
 2004b6c:	10c00017 	ldw	r3,0(r2)
 2004b70:	1800031e 	bne	r3,zero,2004b80 <quorem+0x1e4>
 2004b74:	10bfff04 	addi	r2,r2,-4
 2004b78:	bdffffc4 	addi	r23,r23,-1
 2004b7c:	98bffb36 	bltu	r19,r2,2004b6c <__alt_data_end+0xff004b6c>
 2004b80:	d8c00017 	ldw	r3,0(sp)
 2004b84:	1dc00415 	stw	r23,16(r3)
 2004b88:	9005883a 	mov	r2,r18
 2004b8c:	dfc00d17 	ldw	ra,52(sp)
 2004b90:	df000c17 	ldw	fp,48(sp)
 2004b94:	ddc00b17 	ldw	r23,44(sp)
 2004b98:	dd800a17 	ldw	r22,40(sp)
 2004b9c:	dd400917 	ldw	r21,36(sp)
 2004ba0:	dd000817 	ldw	r20,32(sp)
 2004ba4:	dcc00717 	ldw	r19,28(sp)
 2004ba8:	dc800617 	ldw	r18,24(sp)
 2004bac:	dc400517 	ldw	r17,20(sp)
 2004bb0:	dc000417 	ldw	r16,16(sp)
 2004bb4:	dec00e04 	addi	sp,sp,56
 2004bb8:	f800283a 	ret
 2004bbc:	0005883a 	mov	r2,zero
 2004bc0:	003ff206 	br	2004b8c <__alt_data_end+0xff004b8c>

02004bc4 <_dtoa_r>:
 2004bc4:	20801017 	ldw	r2,64(r4)
 2004bc8:	deffde04 	addi	sp,sp,-136
 2004bcc:	df002015 	stw	fp,128(sp)
 2004bd0:	dcc01b15 	stw	r19,108(sp)
 2004bd4:	dc801a15 	stw	r18,104(sp)
 2004bd8:	dc401915 	stw	r17,100(sp)
 2004bdc:	dc001815 	stw	r16,96(sp)
 2004be0:	dfc02115 	stw	ra,132(sp)
 2004be4:	ddc01f15 	stw	r23,124(sp)
 2004be8:	dd801e15 	stw	r22,120(sp)
 2004bec:	dd401d15 	stw	r21,116(sp)
 2004bf0:	dd001c15 	stw	r20,112(sp)
 2004bf4:	d9c00315 	stw	r7,12(sp)
 2004bf8:	2039883a 	mov	fp,r4
 2004bfc:	3023883a 	mov	r17,r6
 2004c00:	2825883a 	mov	r18,r5
 2004c04:	dc002417 	ldw	r16,144(sp)
 2004c08:	3027883a 	mov	r19,r6
 2004c0c:	10000826 	beq	r2,zero,2004c30 <_dtoa_r+0x6c>
 2004c10:	21801117 	ldw	r6,68(r4)
 2004c14:	00c00044 	movi	r3,1
 2004c18:	100b883a 	mov	r5,r2
 2004c1c:	1986983a 	sll	r3,r3,r6
 2004c20:	11800115 	stw	r6,4(r2)
 2004c24:	10c00215 	stw	r3,8(r2)
 2004c28:	20083240 	call	2008324 <_Bfree>
 2004c2c:	e0001015 	stw	zero,64(fp)
 2004c30:	88002e16 	blt	r17,zero,2004cec <_dtoa_r+0x128>
 2004c34:	80000015 	stw	zero,0(r16)
 2004c38:	889ffc2c 	andhi	r2,r17,32752
 2004c3c:	00dffc34 	movhi	r3,32752
 2004c40:	10c01c26 	beq	r2,r3,2004cb4 <_dtoa_r+0xf0>
 2004c44:	000d883a 	mov	r6,zero
 2004c48:	000f883a 	mov	r7,zero
 2004c4c:	9009883a 	mov	r4,r18
 2004c50:	980b883a 	mov	r5,r19
 2004c54:	200dbd40 	call	200dbd4 <__eqdf2>
 2004c58:	10002b1e 	bne	r2,zero,2004d08 <_dtoa_r+0x144>
 2004c5c:	d9c02317 	ldw	r7,140(sp)
 2004c60:	00800044 	movi	r2,1
 2004c64:	38800015 	stw	r2,0(r7)
 2004c68:	d8802517 	ldw	r2,148(sp)
 2004c6c:	10019e26 	beq	r2,zero,20052e8 <_dtoa_r+0x724>
 2004c70:	d8c02517 	ldw	r3,148(sp)
 2004c74:	00808074 	movhi	r2,513
 2004c78:	10887744 	addi	r2,r2,8669
 2004c7c:	18800015 	stw	r2,0(r3)
 2004c80:	10bfffc4 	addi	r2,r2,-1
 2004c84:	dfc02117 	ldw	ra,132(sp)
 2004c88:	df002017 	ldw	fp,128(sp)
 2004c8c:	ddc01f17 	ldw	r23,124(sp)
 2004c90:	dd801e17 	ldw	r22,120(sp)
 2004c94:	dd401d17 	ldw	r21,116(sp)
 2004c98:	dd001c17 	ldw	r20,112(sp)
 2004c9c:	dcc01b17 	ldw	r19,108(sp)
 2004ca0:	dc801a17 	ldw	r18,104(sp)
 2004ca4:	dc401917 	ldw	r17,100(sp)
 2004ca8:	dc001817 	ldw	r16,96(sp)
 2004cac:	dec02204 	addi	sp,sp,136
 2004cb0:	f800283a 	ret
 2004cb4:	d8c02317 	ldw	r3,140(sp)
 2004cb8:	0089c3c4 	movi	r2,9999
 2004cbc:	18800015 	stw	r2,0(r3)
 2004cc0:	90017726 	beq	r18,zero,20052a0 <_dtoa_r+0x6dc>
 2004cc4:	00808074 	movhi	r2,513
 2004cc8:	10888304 	addi	r2,r2,8716
 2004ccc:	d9002517 	ldw	r4,148(sp)
 2004cd0:	203fec26 	beq	r4,zero,2004c84 <__alt_data_end+0xff004c84>
 2004cd4:	10c000c7 	ldb	r3,3(r2)
 2004cd8:	1801781e 	bne	r3,zero,20052bc <_dtoa_r+0x6f8>
 2004cdc:	10c000c4 	addi	r3,r2,3
 2004ce0:	d9802517 	ldw	r6,148(sp)
 2004ce4:	30c00015 	stw	r3,0(r6)
 2004ce8:	003fe606 	br	2004c84 <__alt_data_end+0xff004c84>
 2004cec:	04e00034 	movhi	r19,32768
 2004cf0:	9cffffc4 	addi	r19,r19,-1
 2004cf4:	00800044 	movi	r2,1
 2004cf8:	8ce6703a 	and	r19,r17,r19
 2004cfc:	80800015 	stw	r2,0(r16)
 2004d00:	9823883a 	mov	r17,r19
 2004d04:	003fcc06 	br	2004c38 <__alt_data_end+0xff004c38>
 2004d08:	d8800204 	addi	r2,sp,8
 2004d0c:	d8800015 	stw	r2,0(sp)
 2004d10:	d9c00104 	addi	r7,sp,4
 2004d14:	900b883a 	mov	r5,r18
 2004d18:	980d883a 	mov	r6,r19
 2004d1c:	e009883a 	mov	r4,fp
 2004d20:	8820d53a 	srli	r16,r17,20
 2004d24:	2008fcc0 	call	2008fcc <__d2b>
 2004d28:	d8800915 	stw	r2,36(sp)
 2004d2c:	8001651e 	bne	r16,zero,20052c4 <_dtoa_r+0x700>
 2004d30:	dd800217 	ldw	r22,8(sp)
 2004d34:	dc000117 	ldw	r16,4(sp)
 2004d38:	00800804 	movi	r2,32
 2004d3c:	b421883a 	add	r16,r22,r16
 2004d40:	80c10c84 	addi	r3,r16,1074
 2004d44:	10c2d10e 	bge	r2,r3,200588c <_dtoa_r+0xcc8>
 2004d48:	00801004 	movi	r2,64
 2004d4c:	81010484 	addi	r4,r16,1042
 2004d50:	10c7c83a 	sub	r3,r2,r3
 2004d54:	9108d83a 	srl	r4,r18,r4
 2004d58:	88e2983a 	sll	r17,r17,r3
 2004d5c:	2448b03a 	or	r4,r4,r17
 2004d60:	200f0f00 	call	200f0f0 <__floatunsidf>
 2004d64:	017f8434 	movhi	r5,65040
 2004d68:	01800044 	movi	r6,1
 2004d6c:	1009883a 	mov	r4,r2
 2004d70:	194b883a 	add	r5,r3,r5
 2004d74:	843fffc4 	addi	r16,r16,-1
 2004d78:	d9801115 	stw	r6,68(sp)
 2004d7c:	000d883a 	mov	r6,zero
 2004d80:	01cffe34 	movhi	r7,16376
 2004d84:	200e6980 	call	200e698 <__subdf3>
 2004d88:	0198dbf4 	movhi	r6,25455
 2004d8c:	01cff4f4 	movhi	r7,16339
 2004d90:	3190d844 	addi	r6,r6,17249
 2004d94:	39e1e9c4 	addi	r7,r7,-30809
 2004d98:	1009883a 	mov	r4,r2
 2004d9c:	180b883a 	mov	r5,r3
 2004da0:	200de2c0 	call	200de2c <__muldf3>
 2004da4:	01a2d874 	movhi	r6,35681
 2004da8:	01cff1f4 	movhi	r7,16327
 2004dac:	31b22cc4 	addi	r6,r6,-14157
 2004db0:	39e28a04 	addi	r7,r7,-30168
 2004db4:	180b883a 	mov	r5,r3
 2004db8:	1009883a 	mov	r4,r2
 2004dbc:	200c9580 	call	200c958 <__adddf3>
 2004dc0:	8009883a 	mov	r4,r16
 2004dc4:	1029883a 	mov	r20,r2
 2004dc8:	1823883a 	mov	r17,r3
 2004dcc:	200f0140 	call	200f014 <__floatsidf>
 2004dd0:	019427f4 	movhi	r6,20639
 2004dd4:	01cff4f4 	movhi	r7,16339
 2004dd8:	319e7ec4 	addi	r6,r6,31227
 2004ddc:	39d104c4 	addi	r7,r7,17427
 2004de0:	1009883a 	mov	r4,r2
 2004de4:	180b883a 	mov	r5,r3
 2004de8:	200de2c0 	call	200de2c <__muldf3>
 2004dec:	100d883a 	mov	r6,r2
 2004df0:	180f883a 	mov	r7,r3
 2004df4:	a009883a 	mov	r4,r20
 2004df8:	880b883a 	mov	r5,r17
 2004dfc:	200c9580 	call	200c958 <__adddf3>
 2004e00:	1009883a 	mov	r4,r2
 2004e04:	180b883a 	mov	r5,r3
 2004e08:	1029883a 	mov	r20,r2
 2004e0c:	1823883a 	mov	r17,r3
 2004e10:	200ef940 	call	200ef94 <__fixdfsi>
 2004e14:	000d883a 	mov	r6,zero
 2004e18:	000f883a 	mov	r7,zero
 2004e1c:	a009883a 	mov	r4,r20
 2004e20:	880b883a 	mov	r5,r17
 2004e24:	d8800515 	stw	r2,20(sp)
 2004e28:	200dd380 	call	200dd38 <__ledf2>
 2004e2c:	10028716 	blt	r2,zero,200584c <_dtoa_r+0xc88>
 2004e30:	d8c00517 	ldw	r3,20(sp)
 2004e34:	00800584 	movi	r2,22
 2004e38:	10c27536 	bltu	r2,r3,2005810 <_dtoa_r+0xc4c>
 2004e3c:	180490fa 	slli	r2,r3,3
 2004e40:	00c08074 	movhi	r3,513
 2004e44:	18c89f04 	addi	r3,r3,8828
 2004e48:	1885883a 	add	r2,r3,r2
 2004e4c:	11000017 	ldw	r4,0(r2)
 2004e50:	11400117 	ldw	r5,4(r2)
 2004e54:	900d883a 	mov	r6,r18
 2004e58:	980f883a 	mov	r7,r19
 2004e5c:	200dc5c0 	call	200dc5c <__gedf2>
 2004e60:	00828d0e 	bge	zero,r2,2005898 <_dtoa_r+0xcd4>
 2004e64:	d9000517 	ldw	r4,20(sp)
 2004e68:	d8000e15 	stw	zero,56(sp)
 2004e6c:	213fffc4 	addi	r4,r4,-1
 2004e70:	d9000515 	stw	r4,20(sp)
 2004e74:	b42dc83a 	sub	r22,r22,r16
 2004e78:	b5bfffc4 	addi	r22,r22,-1
 2004e7c:	b0026f16 	blt	r22,zero,200583c <_dtoa_r+0xc78>
 2004e80:	d8000815 	stw	zero,32(sp)
 2004e84:	d9c00517 	ldw	r7,20(sp)
 2004e88:	38026416 	blt	r7,zero,200581c <_dtoa_r+0xc58>
 2004e8c:	b1ed883a 	add	r22,r22,r7
 2004e90:	d9c00d15 	stw	r7,52(sp)
 2004e94:	d8000a15 	stw	zero,40(sp)
 2004e98:	d9800317 	ldw	r6,12(sp)
 2004e9c:	00800244 	movi	r2,9
 2004ea0:	11811436 	bltu	r2,r6,20052f4 <_dtoa_r+0x730>
 2004ea4:	00800144 	movi	r2,5
 2004ea8:	1184e10e 	bge	r2,r6,2006230 <_dtoa_r+0x166c>
 2004eac:	31bfff04 	addi	r6,r6,-4
 2004eb0:	d9800315 	stw	r6,12(sp)
 2004eb4:	0023883a 	mov	r17,zero
 2004eb8:	d9800317 	ldw	r6,12(sp)
 2004ebc:	008000c4 	movi	r2,3
 2004ec0:	30836726 	beq	r6,r2,2005c60 <_dtoa_r+0x109c>
 2004ec4:	1183410e 	bge	r2,r6,2005bcc <_dtoa_r+0x1008>
 2004ec8:	d9c00317 	ldw	r7,12(sp)
 2004ecc:	00800104 	movi	r2,4
 2004ed0:	38827c26 	beq	r7,r2,20058c4 <_dtoa_r+0xd00>
 2004ed4:	00800144 	movi	r2,5
 2004ed8:	3884c41e 	bne	r7,r2,20061ec <_dtoa_r+0x1628>
 2004edc:	00800044 	movi	r2,1
 2004ee0:	d8800b15 	stw	r2,44(sp)
 2004ee4:	d8c00517 	ldw	r3,20(sp)
 2004ee8:	d9002217 	ldw	r4,136(sp)
 2004eec:	1907883a 	add	r3,r3,r4
 2004ef0:	19800044 	addi	r6,r3,1
 2004ef4:	d8c00c15 	stw	r3,48(sp)
 2004ef8:	d9800615 	stw	r6,24(sp)
 2004efc:	0183a40e 	bge	zero,r6,2005d90 <_dtoa_r+0x11cc>
 2004f00:	d9800617 	ldw	r6,24(sp)
 2004f04:	3021883a 	mov	r16,r6
 2004f08:	e0001115 	stw	zero,68(fp)
 2004f0c:	008005c4 	movi	r2,23
 2004f10:	1184c92e 	bgeu	r2,r6,2006238 <_dtoa_r+0x1674>
 2004f14:	00c00044 	movi	r3,1
 2004f18:	00800104 	movi	r2,4
 2004f1c:	1085883a 	add	r2,r2,r2
 2004f20:	11000504 	addi	r4,r2,20
 2004f24:	180b883a 	mov	r5,r3
 2004f28:	18c00044 	addi	r3,r3,1
 2004f2c:	313ffb2e 	bgeu	r6,r4,2004f1c <__alt_data_end+0xff004f1c>
 2004f30:	e1401115 	stw	r5,68(fp)
 2004f34:	e009883a 	mov	r4,fp
 2004f38:	200827c0 	call	200827c <_Balloc>
 2004f3c:	d8800715 	stw	r2,28(sp)
 2004f40:	e0801015 	stw	r2,64(fp)
 2004f44:	00800384 	movi	r2,14
 2004f48:	1400f736 	bltu	r2,r16,2005328 <_dtoa_r+0x764>
 2004f4c:	8800f626 	beq	r17,zero,2005328 <_dtoa_r+0x764>
 2004f50:	d9c00517 	ldw	r7,20(sp)
 2004f54:	01c39a0e 	bge	zero,r7,2005dc0 <_dtoa_r+0x11fc>
 2004f58:	388003cc 	andi	r2,r7,15
 2004f5c:	100490fa 	slli	r2,r2,3
 2004f60:	382bd13a 	srai	r21,r7,4
 2004f64:	00c08074 	movhi	r3,513
 2004f68:	18c89f04 	addi	r3,r3,8828
 2004f6c:	1885883a 	add	r2,r3,r2
 2004f70:	a8c0040c 	andi	r3,r21,16
 2004f74:	12400017 	ldw	r9,0(r2)
 2004f78:	12000117 	ldw	r8,4(r2)
 2004f7c:	18037926 	beq	r3,zero,2005d64 <_dtoa_r+0x11a0>
 2004f80:	00808074 	movhi	r2,513
 2004f84:	10889504 	addi	r2,r2,8788
 2004f88:	11800817 	ldw	r6,32(r2)
 2004f8c:	11c00917 	ldw	r7,36(r2)
 2004f90:	9009883a 	mov	r4,r18
 2004f94:	980b883a 	mov	r5,r19
 2004f98:	da001715 	stw	r8,92(sp)
 2004f9c:	da401615 	stw	r9,88(sp)
 2004fa0:	200d2040 	call	200d204 <__divdf3>
 2004fa4:	da001717 	ldw	r8,92(sp)
 2004fa8:	da401617 	ldw	r9,88(sp)
 2004fac:	ad4003cc 	andi	r21,r21,15
 2004fb0:	040000c4 	movi	r16,3
 2004fb4:	1023883a 	mov	r17,r2
 2004fb8:	1829883a 	mov	r20,r3
 2004fbc:	a8001126 	beq	r21,zero,2005004 <_dtoa_r+0x440>
 2004fc0:	05c08074 	movhi	r23,513
 2004fc4:	bdc89504 	addi	r23,r23,8788
 2004fc8:	4805883a 	mov	r2,r9
 2004fcc:	4007883a 	mov	r3,r8
 2004fd0:	a980004c 	andi	r6,r21,1
 2004fd4:	1009883a 	mov	r4,r2
 2004fd8:	a82bd07a 	srai	r21,r21,1
 2004fdc:	180b883a 	mov	r5,r3
 2004fe0:	30000426 	beq	r6,zero,2004ff4 <_dtoa_r+0x430>
 2004fe4:	b9800017 	ldw	r6,0(r23)
 2004fe8:	b9c00117 	ldw	r7,4(r23)
 2004fec:	84000044 	addi	r16,r16,1
 2004ff0:	200de2c0 	call	200de2c <__muldf3>
 2004ff4:	bdc00204 	addi	r23,r23,8
 2004ff8:	a83ff51e 	bne	r21,zero,2004fd0 <__alt_data_end+0xff004fd0>
 2004ffc:	1013883a 	mov	r9,r2
 2005000:	1811883a 	mov	r8,r3
 2005004:	480d883a 	mov	r6,r9
 2005008:	400f883a 	mov	r7,r8
 200500c:	8809883a 	mov	r4,r17
 2005010:	a00b883a 	mov	r5,r20
 2005014:	200d2040 	call	200d204 <__divdf3>
 2005018:	d8800f15 	stw	r2,60(sp)
 200501c:	d8c01015 	stw	r3,64(sp)
 2005020:	d8c00e17 	ldw	r3,56(sp)
 2005024:	18000626 	beq	r3,zero,2005040 <_dtoa_r+0x47c>
 2005028:	d9000f17 	ldw	r4,60(sp)
 200502c:	d9401017 	ldw	r5,64(sp)
 2005030:	000d883a 	mov	r6,zero
 2005034:	01cffc34 	movhi	r7,16368
 2005038:	200dd380 	call	200dd38 <__ledf2>
 200503c:	10040b16 	blt	r2,zero,200606c <_dtoa_r+0x14a8>
 2005040:	8009883a 	mov	r4,r16
 2005044:	200f0140 	call	200f014 <__floatsidf>
 2005048:	d9800f17 	ldw	r6,60(sp)
 200504c:	d9c01017 	ldw	r7,64(sp)
 2005050:	1009883a 	mov	r4,r2
 2005054:	180b883a 	mov	r5,r3
 2005058:	200de2c0 	call	200de2c <__muldf3>
 200505c:	000d883a 	mov	r6,zero
 2005060:	01d00734 	movhi	r7,16412
 2005064:	1009883a 	mov	r4,r2
 2005068:	180b883a 	mov	r5,r3
 200506c:	200c9580 	call	200c958 <__adddf3>
 2005070:	1021883a 	mov	r16,r2
 2005074:	d8800617 	ldw	r2,24(sp)
 2005078:	047f3034 	movhi	r17,64704
 200507c:	1c63883a 	add	r17,r3,r17
 2005080:	10031826 	beq	r2,zero,2005ce4 <_dtoa_r+0x1120>
 2005084:	d8c00517 	ldw	r3,20(sp)
 2005088:	db000617 	ldw	r12,24(sp)
 200508c:	d8c01315 	stw	r3,76(sp)
 2005090:	d9000b17 	ldw	r4,44(sp)
 2005094:	20038f26 	beq	r4,zero,2005ed4 <_dtoa_r+0x1310>
 2005098:	60bfffc4 	addi	r2,r12,-1
 200509c:	100490fa 	slli	r2,r2,3
 20050a0:	00c08074 	movhi	r3,513
 20050a4:	18c89f04 	addi	r3,r3,8828
 20050a8:	1885883a 	add	r2,r3,r2
 20050ac:	11800017 	ldw	r6,0(r2)
 20050b0:	11c00117 	ldw	r7,4(r2)
 20050b4:	d8800717 	ldw	r2,28(sp)
 20050b8:	0009883a 	mov	r4,zero
 20050bc:	014ff834 	movhi	r5,16352
 20050c0:	db001615 	stw	r12,88(sp)
 20050c4:	15c00044 	addi	r23,r2,1
 20050c8:	200d2040 	call	200d204 <__divdf3>
 20050cc:	800d883a 	mov	r6,r16
 20050d0:	880f883a 	mov	r7,r17
 20050d4:	1009883a 	mov	r4,r2
 20050d8:	180b883a 	mov	r5,r3
 20050dc:	200e6980 	call	200e698 <__subdf3>
 20050e0:	d9401017 	ldw	r5,64(sp)
 20050e4:	d9000f17 	ldw	r4,60(sp)
 20050e8:	102b883a 	mov	r21,r2
 20050ec:	d8c01215 	stw	r3,72(sp)
 20050f0:	200ef940 	call	200ef94 <__fixdfsi>
 20050f4:	1009883a 	mov	r4,r2
 20050f8:	1029883a 	mov	r20,r2
 20050fc:	200f0140 	call	200f014 <__floatsidf>
 2005100:	d9000f17 	ldw	r4,60(sp)
 2005104:	d9401017 	ldw	r5,64(sp)
 2005108:	100d883a 	mov	r6,r2
 200510c:	180f883a 	mov	r7,r3
 2005110:	200e6980 	call	200e698 <__subdf3>
 2005114:	1823883a 	mov	r17,r3
 2005118:	d8c00717 	ldw	r3,28(sp)
 200511c:	d9401217 	ldw	r5,72(sp)
 2005120:	a2000c04 	addi	r8,r20,48
 2005124:	1021883a 	mov	r16,r2
 2005128:	1a000005 	stb	r8,0(r3)
 200512c:	800d883a 	mov	r6,r16
 2005130:	880f883a 	mov	r7,r17
 2005134:	a809883a 	mov	r4,r21
 2005138:	4029883a 	mov	r20,r8
 200513c:	200dc5c0 	call	200dc5c <__gedf2>
 2005140:	00841d16 	blt	zero,r2,20061b8 <_dtoa_r+0x15f4>
 2005144:	800d883a 	mov	r6,r16
 2005148:	880f883a 	mov	r7,r17
 200514c:	0009883a 	mov	r4,zero
 2005150:	014ffc34 	movhi	r5,16368
 2005154:	200e6980 	call	200e698 <__subdf3>
 2005158:	d9401217 	ldw	r5,72(sp)
 200515c:	100d883a 	mov	r6,r2
 2005160:	180f883a 	mov	r7,r3
 2005164:	a809883a 	mov	r4,r21
 2005168:	200dc5c0 	call	200dc5c <__gedf2>
 200516c:	db001617 	ldw	r12,88(sp)
 2005170:	00840e16 	blt	zero,r2,20061ac <_dtoa_r+0x15e8>
 2005174:	00800044 	movi	r2,1
 2005178:	13006b0e 	bge	r2,r12,2005328 <_dtoa_r+0x764>
 200517c:	d9000717 	ldw	r4,28(sp)
 2005180:	dd800f15 	stw	r22,60(sp)
 2005184:	dcc01015 	stw	r19,64(sp)
 2005188:	2319883a 	add	r12,r4,r12
 200518c:	dcc01217 	ldw	r19,72(sp)
 2005190:	602d883a 	mov	r22,r12
 2005194:	dc801215 	stw	r18,72(sp)
 2005198:	b825883a 	mov	r18,r23
 200519c:	00000906 	br	20051c4 <_dtoa_r+0x600>
 20051a0:	200e6980 	call	200e698 <__subdf3>
 20051a4:	a80d883a 	mov	r6,r21
 20051a8:	980f883a 	mov	r7,r19
 20051ac:	1009883a 	mov	r4,r2
 20051b0:	180b883a 	mov	r5,r3
 20051b4:	200dd380 	call	200dd38 <__ledf2>
 20051b8:	1003e816 	blt	r2,zero,200615c <_dtoa_r+0x1598>
 20051bc:	b825883a 	mov	r18,r23
 20051c0:	bd83e926 	beq	r23,r22,2006168 <_dtoa_r+0x15a4>
 20051c4:	a809883a 	mov	r4,r21
 20051c8:	980b883a 	mov	r5,r19
 20051cc:	000d883a 	mov	r6,zero
 20051d0:	01d00934 	movhi	r7,16420
 20051d4:	200de2c0 	call	200de2c <__muldf3>
 20051d8:	000d883a 	mov	r6,zero
 20051dc:	01d00934 	movhi	r7,16420
 20051e0:	8009883a 	mov	r4,r16
 20051e4:	880b883a 	mov	r5,r17
 20051e8:	102b883a 	mov	r21,r2
 20051ec:	1827883a 	mov	r19,r3
 20051f0:	200de2c0 	call	200de2c <__muldf3>
 20051f4:	180b883a 	mov	r5,r3
 20051f8:	1009883a 	mov	r4,r2
 20051fc:	1821883a 	mov	r16,r3
 2005200:	1023883a 	mov	r17,r2
 2005204:	200ef940 	call	200ef94 <__fixdfsi>
 2005208:	1009883a 	mov	r4,r2
 200520c:	1029883a 	mov	r20,r2
 2005210:	200f0140 	call	200f014 <__floatsidf>
 2005214:	8809883a 	mov	r4,r17
 2005218:	800b883a 	mov	r5,r16
 200521c:	100d883a 	mov	r6,r2
 2005220:	180f883a 	mov	r7,r3
 2005224:	200e6980 	call	200e698 <__subdf3>
 2005228:	a5000c04 	addi	r20,r20,48
 200522c:	a80d883a 	mov	r6,r21
 2005230:	980f883a 	mov	r7,r19
 2005234:	1009883a 	mov	r4,r2
 2005238:	180b883a 	mov	r5,r3
 200523c:	95000005 	stb	r20,0(r18)
 2005240:	1021883a 	mov	r16,r2
 2005244:	1823883a 	mov	r17,r3
 2005248:	200dd380 	call	200dd38 <__ledf2>
 200524c:	bdc00044 	addi	r23,r23,1
 2005250:	800d883a 	mov	r6,r16
 2005254:	880f883a 	mov	r7,r17
 2005258:	0009883a 	mov	r4,zero
 200525c:	014ffc34 	movhi	r5,16368
 2005260:	103fcf0e 	bge	r2,zero,20051a0 <__alt_data_end+0xff0051a0>
 2005264:	d8c01317 	ldw	r3,76(sp)
 2005268:	d8c00515 	stw	r3,20(sp)
 200526c:	d9400917 	ldw	r5,36(sp)
 2005270:	e009883a 	mov	r4,fp
 2005274:	20083240 	call	2008324 <_Bfree>
 2005278:	d9000517 	ldw	r4,20(sp)
 200527c:	d9802317 	ldw	r6,140(sp)
 2005280:	d9c02517 	ldw	r7,148(sp)
 2005284:	b8000005 	stb	zero,0(r23)
 2005288:	20800044 	addi	r2,r4,1
 200528c:	30800015 	stw	r2,0(r6)
 2005290:	3802aa26 	beq	r7,zero,2005d3c <_dtoa_r+0x1178>
 2005294:	3dc00015 	stw	r23,0(r7)
 2005298:	d8800717 	ldw	r2,28(sp)
 200529c:	003e7906 	br	2004c84 <__alt_data_end+0xff004c84>
 20052a0:	00800434 	movhi	r2,16
 20052a4:	10bfffc4 	addi	r2,r2,-1
 20052a8:	88a2703a 	and	r17,r17,r2
 20052ac:	883e851e 	bne	r17,zero,2004cc4 <__alt_data_end+0xff004cc4>
 20052b0:	00808074 	movhi	r2,513
 20052b4:	10888004 	addi	r2,r2,8704
 20052b8:	003e8406 	br	2004ccc <__alt_data_end+0xff004ccc>
 20052bc:	10c00204 	addi	r3,r2,8
 20052c0:	003e8706 	br	2004ce0 <__alt_data_end+0xff004ce0>
 20052c4:	01400434 	movhi	r5,16
 20052c8:	297fffc4 	addi	r5,r5,-1
 20052cc:	994a703a 	and	r5,r19,r5
 20052d0:	9009883a 	mov	r4,r18
 20052d4:	843f0044 	addi	r16,r16,-1023
 20052d8:	294ffc34 	orhi	r5,r5,16368
 20052dc:	dd800217 	ldw	r22,8(sp)
 20052e0:	d8001115 	stw	zero,68(sp)
 20052e4:	003ea506 	br	2004d7c <__alt_data_end+0xff004d7c>
 20052e8:	00808074 	movhi	r2,513
 20052ec:	10887704 	addi	r2,r2,8668
 20052f0:	003e6406 	br	2004c84 <__alt_data_end+0xff004c84>
 20052f4:	e0001115 	stw	zero,68(fp)
 20052f8:	000b883a 	mov	r5,zero
 20052fc:	e009883a 	mov	r4,fp
 2005300:	200827c0 	call	200827c <_Balloc>
 2005304:	01bfffc4 	movi	r6,-1
 2005308:	01c00044 	movi	r7,1
 200530c:	d8800715 	stw	r2,28(sp)
 2005310:	d9800c15 	stw	r6,48(sp)
 2005314:	e0801015 	stw	r2,64(fp)
 2005318:	d8000315 	stw	zero,12(sp)
 200531c:	d9c00b15 	stw	r7,44(sp)
 2005320:	d9800615 	stw	r6,24(sp)
 2005324:	d8002215 	stw	zero,136(sp)
 2005328:	d8800117 	ldw	r2,4(sp)
 200532c:	10008916 	blt	r2,zero,2005554 <_dtoa_r+0x990>
 2005330:	d9000517 	ldw	r4,20(sp)
 2005334:	00c00384 	movi	r3,14
 2005338:	19008616 	blt	r3,r4,2005554 <_dtoa_r+0x990>
 200533c:	200490fa 	slli	r2,r4,3
 2005340:	00c08074 	movhi	r3,513
 2005344:	d9802217 	ldw	r6,136(sp)
 2005348:	18c89f04 	addi	r3,r3,8828
 200534c:	1885883a 	add	r2,r3,r2
 2005350:	14000017 	ldw	r16,0(r2)
 2005354:	14400117 	ldw	r17,4(r2)
 2005358:	30016316 	blt	r6,zero,20058e8 <_dtoa_r+0xd24>
 200535c:	800d883a 	mov	r6,r16
 2005360:	880f883a 	mov	r7,r17
 2005364:	9009883a 	mov	r4,r18
 2005368:	980b883a 	mov	r5,r19
 200536c:	200d2040 	call	200d204 <__divdf3>
 2005370:	180b883a 	mov	r5,r3
 2005374:	1009883a 	mov	r4,r2
 2005378:	200ef940 	call	200ef94 <__fixdfsi>
 200537c:	1009883a 	mov	r4,r2
 2005380:	102b883a 	mov	r21,r2
 2005384:	200f0140 	call	200f014 <__floatsidf>
 2005388:	800d883a 	mov	r6,r16
 200538c:	880f883a 	mov	r7,r17
 2005390:	1009883a 	mov	r4,r2
 2005394:	180b883a 	mov	r5,r3
 2005398:	200de2c0 	call	200de2c <__muldf3>
 200539c:	100d883a 	mov	r6,r2
 20053a0:	180f883a 	mov	r7,r3
 20053a4:	9009883a 	mov	r4,r18
 20053a8:	980b883a 	mov	r5,r19
 20053ac:	200e6980 	call	200e698 <__subdf3>
 20053b0:	d9c00717 	ldw	r7,28(sp)
 20053b4:	1009883a 	mov	r4,r2
 20053b8:	a8800c04 	addi	r2,r21,48
 20053bc:	38800005 	stb	r2,0(r7)
 20053c0:	3dc00044 	addi	r23,r7,1
 20053c4:	d9c00617 	ldw	r7,24(sp)
 20053c8:	01800044 	movi	r6,1
 20053cc:	180b883a 	mov	r5,r3
 20053d0:	2005883a 	mov	r2,r4
 20053d4:	39803826 	beq	r7,r6,20054b8 <_dtoa_r+0x8f4>
 20053d8:	000d883a 	mov	r6,zero
 20053dc:	01d00934 	movhi	r7,16420
 20053e0:	200de2c0 	call	200de2c <__muldf3>
 20053e4:	000d883a 	mov	r6,zero
 20053e8:	000f883a 	mov	r7,zero
 20053ec:	1009883a 	mov	r4,r2
 20053f0:	180b883a 	mov	r5,r3
 20053f4:	1025883a 	mov	r18,r2
 20053f8:	1827883a 	mov	r19,r3
 20053fc:	200dbd40 	call	200dbd4 <__eqdf2>
 2005400:	103f9a26 	beq	r2,zero,200526c <__alt_data_end+0xff00526c>
 2005404:	d9c00617 	ldw	r7,24(sp)
 2005408:	d8c00717 	ldw	r3,28(sp)
 200540c:	b829883a 	mov	r20,r23
 2005410:	38bfffc4 	addi	r2,r7,-1
 2005414:	18ad883a 	add	r22,r3,r2
 2005418:	00000a06 	br	2005444 <_dtoa_r+0x880>
 200541c:	200de2c0 	call	200de2c <__muldf3>
 2005420:	000d883a 	mov	r6,zero
 2005424:	000f883a 	mov	r7,zero
 2005428:	1009883a 	mov	r4,r2
 200542c:	180b883a 	mov	r5,r3
 2005430:	1025883a 	mov	r18,r2
 2005434:	1827883a 	mov	r19,r3
 2005438:	b829883a 	mov	r20,r23
 200543c:	200dbd40 	call	200dbd4 <__eqdf2>
 2005440:	103f8a26 	beq	r2,zero,200526c <__alt_data_end+0xff00526c>
 2005444:	800d883a 	mov	r6,r16
 2005448:	880f883a 	mov	r7,r17
 200544c:	9009883a 	mov	r4,r18
 2005450:	980b883a 	mov	r5,r19
 2005454:	200d2040 	call	200d204 <__divdf3>
 2005458:	180b883a 	mov	r5,r3
 200545c:	1009883a 	mov	r4,r2
 2005460:	200ef940 	call	200ef94 <__fixdfsi>
 2005464:	1009883a 	mov	r4,r2
 2005468:	102b883a 	mov	r21,r2
 200546c:	200f0140 	call	200f014 <__floatsidf>
 2005470:	800d883a 	mov	r6,r16
 2005474:	880f883a 	mov	r7,r17
 2005478:	1009883a 	mov	r4,r2
 200547c:	180b883a 	mov	r5,r3
 2005480:	200de2c0 	call	200de2c <__muldf3>
 2005484:	100d883a 	mov	r6,r2
 2005488:	180f883a 	mov	r7,r3
 200548c:	9009883a 	mov	r4,r18
 2005490:	980b883a 	mov	r5,r19
 2005494:	200e6980 	call	200e698 <__subdf3>
 2005498:	aa000c04 	addi	r8,r21,48
 200549c:	a2000005 	stb	r8,0(r20)
 20054a0:	000d883a 	mov	r6,zero
 20054a4:	01d00934 	movhi	r7,16420
 20054a8:	1009883a 	mov	r4,r2
 20054ac:	180b883a 	mov	r5,r3
 20054b0:	a5c00044 	addi	r23,r20,1
 20054b4:	b53fd91e 	bne	r22,r20,200541c <__alt_data_end+0xff00541c>
 20054b8:	100d883a 	mov	r6,r2
 20054bc:	180f883a 	mov	r7,r3
 20054c0:	1009883a 	mov	r4,r2
 20054c4:	180b883a 	mov	r5,r3
 20054c8:	200c9580 	call	200c958 <__adddf3>
 20054cc:	100d883a 	mov	r6,r2
 20054d0:	180f883a 	mov	r7,r3
 20054d4:	8009883a 	mov	r4,r16
 20054d8:	880b883a 	mov	r5,r17
 20054dc:	1027883a 	mov	r19,r2
 20054e0:	1825883a 	mov	r18,r3
 20054e4:	200dd380 	call	200dd38 <__ledf2>
 20054e8:	10000816 	blt	r2,zero,200550c <_dtoa_r+0x948>
 20054ec:	980d883a 	mov	r6,r19
 20054f0:	900f883a 	mov	r7,r18
 20054f4:	8009883a 	mov	r4,r16
 20054f8:	880b883a 	mov	r5,r17
 20054fc:	200dbd40 	call	200dbd4 <__eqdf2>
 2005500:	103f5a1e 	bne	r2,zero,200526c <__alt_data_end+0xff00526c>
 2005504:	ad40004c 	andi	r21,r21,1
 2005508:	a83f5826 	beq	r21,zero,200526c <__alt_data_end+0xff00526c>
 200550c:	bd3fffc3 	ldbu	r20,-1(r23)
 2005510:	b8bfffc4 	addi	r2,r23,-1
 2005514:	1007883a 	mov	r3,r2
 2005518:	01400e44 	movi	r5,57
 200551c:	d9800717 	ldw	r6,28(sp)
 2005520:	00000506 	br	2005538 <_dtoa_r+0x974>
 2005524:	18ffffc4 	addi	r3,r3,-1
 2005528:	11824726 	beq	r2,r6,2005e48 <_dtoa_r+0x1284>
 200552c:	1d000003 	ldbu	r20,0(r3)
 2005530:	102f883a 	mov	r23,r2
 2005534:	10bfffc4 	addi	r2,r2,-1
 2005538:	a1003fcc 	andi	r4,r20,255
 200553c:	2100201c 	xori	r4,r4,128
 2005540:	213fe004 	addi	r4,r4,-128
 2005544:	217ff726 	beq	r4,r5,2005524 <__alt_data_end+0xff005524>
 2005548:	a2000044 	addi	r8,r20,1
 200554c:	12000005 	stb	r8,0(r2)
 2005550:	003f4606 	br	200526c <__alt_data_end+0xff00526c>
 2005554:	d9000b17 	ldw	r4,44(sp)
 2005558:	2000c826 	beq	r4,zero,200587c <_dtoa_r+0xcb8>
 200555c:	d9800317 	ldw	r6,12(sp)
 2005560:	00c00044 	movi	r3,1
 2005564:	1980f90e 	bge	r3,r6,200594c <_dtoa_r+0xd88>
 2005568:	d8800617 	ldw	r2,24(sp)
 200556c:	d8c00a17 	ldw	r3,40(sp)
 2005570:	157fffc4 	addi	r21,r2,-1
 2005574:	1d41f316 	blt	r3,r21,2005d44 <_dtoa_r+0x1180>
 2005578:	1d6bc83a 	sub	r21,r3,r21
 200557c:	d9c00617 	ldw	r7,24(sp)
 2005580:	3802aa16 	blt	r7,zero,200602c <_dtoa_r+0x1468>
 2005584:	dd000817 	ldw	r20,32(sp)
 2005588:	d8800617 	ldw	r2,24(sp)
 200558c:	d8c00817 	ldw	r3,32(sp)
 2005590:	01400044 	movi	r5,1
 2005594:	e009883a 	mov	r4,fp
 2005598:	1887883a 	add	r3,r3,r2
 200559c:	d8c00815 	stw	r3,32(sp)
 20055a0:	b0ad883a 	add	r22,r22,r2
 20055a4:	20086b00 	call	20086b0 <__i2b>
 20055a8:	1023883a 	mov	r17,r2
 20055ac:	a0000826 	beq	r20,zero,20055d0 <_dtoa_r+0xa0c>
 20055b0:	0580070e 	bge	zero,r22,20055d0 <_dtoa_r+0xa0c>
 20055b4:	a005883a 	mov	r2,r20
 20055b8:	b500b916 	blt	r22,r20,20058a0 <_dtoa_r+0xcdc>
 20055bc:	d9000817 	ldw	r4,32(sp)
 20055c0:	a0a9c83a 	sub	r20,r20,r2
 20055c4:	b0adc83a 	sub	r22,r22,r2
 20055c8:	2089c83a 	sub	r4,r4,r2
 20055cc:	d9000815 	stw	r4,32(sp)
 20055d0:	d9800a17 	ldw	r6,40(sp)
 20055d4:	0181810e 	bge	zero,r6,2005bdc <_dtoa_r+0x1018>
 20055d8:	d9c00b17 	ldw	r7,44(sp)
 20055dc:	3800b326 	beq	r7,zero,20058ac <_dtoa_r+0xce8>
 20055e0:	a800b226 	beq	r21,zero,20058ac <_dtoa_r+0xce8>
 20055e4:	880b883a 	mov	r5,r17
 20055e8:	a80d883a 	mov	r6,r21
 20055ec:	e009883a 	mov	r4,fp
 20055f0:	20089780 	call	2008978 <__pow5mult>
 20055f4:	d9800917 	ldw	r6,36(sp)
 20055f8:	100b883a 	mov	r5,r2
 20055fc:	e009883a 	mov	r4,fp
 2005600:	1023883a 	mov	r17,r2
 2005604:	20086ec0 	call	20086ec <__multiply>
 2005608:	1021883a 	mov	r16,r2
 200560c:	d8800a17 	ldw	r2,40(sp)
 2005610:	d9400917 	ldw	r5,36(sp)
 2005614:	e009883a 	mov	r4,fp
 2005618:	1545c83a 	sub	r2,r2,r21
 200561c:	d8800a15 	stw	r2,40(sp)
 2005620:	20083240 	call	2008324 <_Bfree>
 2005624:	d8c00a17 	ldw	r3,40(sp)
 2005628:	18009f1e 	bne	r3,zero,20058a8 <_dtoa_r+0xce4>
 200562c:	05c00044 	movi	r23,1
 2005630:	e009883a 	mov	r4,fp
 2005634:	b80b883a 	mov	r5,r23
 2005638:	20086b00 	call	20086b0 <__i2b>
 200563c:	d9000d17 	ldw	r4,52(sp)
 2005640:	102b883a 	mov	r21,r2
 2005644:	2000ce26 	beq	r4,zero,2005980 <_dtoa_r+0xdbc>
 2005648:	200d883a 	mov	r6,r4
 200564c:	100b883a 	mov	r5,r2
 2005650:	e009883a 	mov	r4,fp
 2005654:	20089780 	call	2008978 <__pow5mult>
 2005658:	d9800317 	ldw	r6,12(sp)
 200565c:	102b883a 	mov	r21,r2
 2005660:	b981810e 	bge	r23,r6,2005c68 <_dtoa_r+0x10a4>
 2005664:	0027883a 	mov	r19,zero
 2005668:	a8800417 	ldw	r2,16(r21)
 200566c:	05c00804 	movi	r23,32
 2005670:	10800104 	addi	r2,r2,4
 2005674:	1085883a 	add	r2,r2,r2
 2005678:	1085883a 	add	r2,r2,r2
 200567c:	a885883a 	add	r2,r21,r2
 2005680:	11000017 	ldw	r4,0(r2)
 2005684:	20085980 	call	2008598 <__hi0bits>
 2005688:	b885c83a 	sub	r2,r23,r2
 200568c:	1585883a 	add	r2,r2,r22
 2005690:	108007cc 	andi	r2,r2,31
 2005694:	1000b326 	beq	r2,zero,2005964 <_dtoa_r+0xda0>
 2005698:	00c00804 	movi	r3,32
 200569c:	1887c83a 	sub	r3,r3,r2
 20056a0:	01000104 	movi	r4,4
 20056a4:	20c2cd0e 	bge	r4,r3,20061dc <_dtoa_r+0x1618>
 20056a8:	00c00704 	movi	r3,28
 20056ac:	1885c83a 	sub	r2,r3,r2
 20056b0:	d8c00817 	ldw	r3,32(sp)
 20056b4:	a0a9883a 	add	r20,r20,r2
 20056b8:	b0ad883a 	add	r22,r22,r2
 20056bc:	1887883a 	add	r3,r3,r2
 20056c0:	d8c00815 	stw	r3,32(sp)
 20056c4:	d9800817 	ldw	r6,32(sp)
 20056c8:	0180040e 	bge	zero,r6,20056dc <_dtoa_r+0xb18>
 20056cc:	800b883a 	mov	r5,r16
 20056d0:	e009883a 	mov	r4,fp
 20056d4:	2008ab80 	call	2008ab8 <__lshift>
 20056d8:	1021883a 	mov	r16,r2
 20056dc:	0580050e 	bge	zero,r22,20056f4 <_dtoa_r+0xb30>
 20056e0:	a80b883a 	mov	r5,r21
 20056e4:	b00d883a 	mov	r6,r22
 20056e8:	e009883a 	mov	r4,fp
 20056ec:	2008ab80 	call	2008ab8 <__lshift>
 20056f0:	102b883a 	mov	r21,r2
 20056f4:	d9c00e17 	ldw	r7,56(sp)
 20056f8:	3801211e 	bne	r7,zero,2005b80 <_dtoa_r+0xfbc>
 20056fc:	d9800617 	ldw	r6,24(sp)
 2005700:	0181380e 	bge	zero,r6,2005be4 <_dtoa_r+0x1020>
 2005704:	d8c00b17 	ldw	r3,44(sp)
 2005708:	1800ab1e 	bne	r3,zero,20059b8 <_dtoa_r+0xdf4>
 200570c:	dc800717 	ldw	r18,28(sp)
 2005710:	dcc00617 	ldw	r19,24(sp)
 2005714:	9029883a 	mov	r20,r18
 2005718:	00000206 	br	2005724 <_dtoa_r+0xb60>
 200571c:	200834c0 	call	200834c <__multadd>
 2005720:	1021883a 	mov	r16,r2
 2005724:	a80b883a 	mov	r5,r21
 2005728:	8009883a 	mov	r4,r16
 200572c:	200499c0 	call	200499c <quorem>
 2005730:	10800c04 	addi	r2,r2,48
 2005734:	90800005 	stb	r2,0(r18)
 2005738:	94800044 	addi	r18,r18,1
 200573c:	9507c83a 	sub	r3,r18,r20
 2005740:	000f883a 	mov	r7,zero
 2005744:	01800284 	movi	r6,10
 2005748:	800b883a 	mov	r5,r16
 200574c:	e009883a 	mov	r4,fp
 2005750:	1cfff216 	blt	r3,r19,200571c <__alt_data_end+0xff00571c>
 2005754:	1011883a 	mov	r8,r2
 2005758:	d8800617 	ldw	r2,24(sp)
 200575c:	0082370e 	bge	zero,r2,200603c <_dtoa_r+0x1478>
 2005760:	d9000717 	ldw	r4,28(sp)
 2005764:	0025883a 	mov	r18,zero
 2005768:	20af883a 	add	r23,r4,r2
 200576c:	01800044 	movi	r6,1
 2005770:	800b883a 	mov	r5,r16
 2005774:	e009883a 	mov	r4,fp
 2005778:	da001715 	stw	r8,92(sp)
 200577c:	2008ab80 	call	2008ab8 <__lshift>
 2005780:	a80b883a 	mov	r5,r21
 2005784:	1009883a 	mov	r4,r2
 2005788:	d8800915 	stw	r2,36(sp)
 200578c:	2008c000 	call	2008c00 <__mcmp>
 2005790:	da001717 	ldw	r8,92(sp)
 2005794:	0081800e 	bge	zero,r2,2005d98 <_dtoa_r+0x11d4>
 2005798:	b93fffc3 	ldbu	r4,-1(r23)
 200579c:	b8bfffc4 	addi	r2,r23,-1
 20057a0:	1007883a 	mov	r3,r2
 20057a4:	01800e44 	movi	r6,57
 20057a8:	d9c00717 	ldw	r7,28(sp)
 20057ac:	00000506 	br	20057c4 <_dtoa_r+0xc00>
 20057b0:	18ffffc4 	addi	r3,r3,-1
 20057b4:	11c12326 	beq	r2,r7,2005c44 <_dtoa_r+0x1080>
 20057b8:	19000003 	ldbu	r4,0(r3)
 20057bc:	102f883a 	mov	r23,r2
 20057c0:	10bfffc4 	addi	r2,r2,-1
 20057c4:	21403fcc 	andi	r5,r4,255
 20057c8:	2940201c 	xori	r5,r5,128
 20057cc:	297fe004 	addi	r5,r5,-128
 20057d0:	29bff726 	beq	r5,r6,20057b0 <__alt_data_end+0xff0057b0>
 20057d4:	21000044 	addi	r4,r4,1
 20057d8:	11000005 	stb	r4,0(r2)
 20057dc:	a80b883a 	mov	r5,r21
 20057e0:	e009883a 	mov	r4,fp
 20057e4:	20083240 	call	2008324 <_Bfree>
 20057e8:	883ea026 	beq	r17,zero,200526c <__alt_data_end+0xff00526c>
 20057ec:	90000426 	beq	r18,zero,2005800 <_dtoa_r+0xc3c>
 20057f0:	94400326 	beq	r18,r17,2005800 <_dtoa_r+0xc3c>
 20057f4:	900b883a 	mov	r5,r18
 20057f8:	e009883a 	mov	r4,fp
 20057fc:	20083240 	call	2008324 <_Bfree>
 2005800:	880b883a 	mov	r5,r17
 2005804:	e009883a 	mov	r4,fp
 2005808:	20083240 	call	2008324 <_Bfree>
 200580c:	003e9706 	br	200526c <__alt_data_end+0xff00526c>
 2005810:	01800044 	movi	r6,1
 2005814:	d9800e15 	stw	r6,56(sp)
 2005818:	003d9606 	br	2004e74 <__alt_data_end+0xff004e74>
 200581c:	d8800817 	ldw	r2,32(sp)
 2005820:	d8c00517 	ldw	r3,20(sp)
 2005824:	d8000d15 	stw	zero,52(sp)
 2005828:	10c5c83a 	sub	r2,r2,r3
 200582c:	00c9c83a 	sub	r4,zero,r3
 2005830:	d8800815 	stw	r2,32(sp)
 2005834:	d9000a15 	stw	r4,40(sp)
 2005838:	003d9706 	br	2004e98 <__alt_data_end+0xff004e98>
 200583c:	05adc83a 	sub	r22,zero,r22
 2005840:	dd800815 	stw	r22,32(sp)
 2005844:	002d883a 	mov	r22,zero
 2005848:	003d8e06 	br	2004e84 <__alt_data_end+0xff004e84>
 200584c:	d9000517 	ldw	r4,20(sp)
 2005850:	200f0140 	call	200f014 <__floatsidf>
 2005854:	100d883a 	mov	r6,r2
 2005858:	180f883a 	mov	r7,r3
 200585c:	a009883a 	mov	r4,r20
 2005860:	880b883a 	mov	r5,r17
 2005864:	200dbd40 	call	200dbd4 <__eqdf2>
 2005868:	103d7126 	beq	r2,zero,2004e30 <__alt_data_end+0xff004e30>
 200586c:	d9c00517 	ldw	r7,20(sp)
 2005870:	39ffffc4 	addi	r7,r7,-1
 2005874:	d9c00515 	stw	r7,20(sp)
 2005878:	003d6d06 	br	2004e30 <__alt_data_end+0xff004e30>
 200587c:	dd400a17 	ldw	r21,40(sp)
 2005880:	dd000817 	ldw	r20,32(sp)
 2005884:	0023883a 	mov	r17,zero
 2005888:	003f4806 	br	20055ac <__alt_data_end+0xff0055ac>
 200588c:	10e3c83a 	sub	r17,r2,r3
 2005890:	9448983a 	sll	r4,r18,r17
 2005894:	003d3206 	br	2004d60 <__alt_data_end+0xff004d60>
 2005898:	d8000e15 	stw	zero,56(sp)
 200589c:	003d7506 	br	2004e74 <__alt_data_end+0xff004e74>
 20058a0:	b005883a 	mov	r2,r22
 20058a4:	003f4506 	br	20055bc <__alt_data_end+0xff0055bc>
 20058a8:	dc000915 	stw	r16,36(sp)
 20058ac:	d9800a17 	ldw	r6,40(sp)
 20058b0:	d9400917 	ldw	r5,36(sp)
 20058b4:	e009883a 	mov	r4,fp
 20058b8:	20089780 	call	2008978 <__pow5mult>
 20058bc:	1021883a 	mov	r16,r2
 20058c0:	003f5a06 	br	200562c <__alt_data_end+0xff00562c>
 20058c4:	01c00044 	movi	r7,1
 20058c8:	d9c00b15 	stw	r7,44(sp)
 20058cc:	d8802217 	ldw	r2,136(sp)
 20058d0:	0081280e 	bge	zero,r2,2005d74 <_dtoa_r+0x11b0>
 20058d4:	100d883a 	mov	r6,r2
 20058d8:	1021883a 	mov	r16,r2
 20058dc:	d8800c15 	stw	r2,48(sp)
 20058e0:	d8800615 	stw	r2,24(sp)
 20058e4:	003d8806 	br	2004f08 <__alt_data_end+0xff004f08>
 20058e8:	d8800617 	ldw	r2,24(sp)
 20058ec:	00be9b16 	blt	zero,r2,200535c <__alt_data_end+0xff00535c>
 20058f0:	10010f1e 	bne	r2,zero,2005d30 <_dtoa_r+0x116c>
 20058f4:	880b883a 	mov	r5,r17
 20058f8:	000d883a 	mov	r6,zero
 20058fc:	01d00534 	movhi	r7,16404
 2005900:	8009883a 	mov	r4,r16
 2005904:	200de2c0 	call	200de2c <__muldf3>
 2005908:	900d883a 	mov	r6,r18
 200590c:	980f883a 	mov	r7,r19
 2005910:	1009883a 	mov	r4,r2
 2005914:	180b883a 	mov	r5,r3
 2005918:	200dc5c0 	call	200dc5c <__gedf2>
 200591c:	002b883a 	mov	r21,zero
 2005920:	0023883a 	mov	r17,zero
 2005924:	1000bf16 	blt	r2,zero,2005c24 <_dtoa_r+0x1060>
 2005928:	d9802217 	ldw	r6,136(sp)
 200592c:	ddc00717 	ldw	r23,28(sp)
 2005930:	018c303a 	nor	r6,zero,r6
 2005934:	d9800515 	stw	r6,20(sp)
 2005938:	a80b883a 	mov	r5,r21
 200593c:	e009883a 	mov	r4,fp
 2005940:	20083240 	call	2008324 <_Bfree>
 2005944:	883e4926 	beq	r17,zero,200526c <__alt_data_end+0xff00526c>
 2005948:	003fad06 	br	2005800 <__alt_data_end+0xff005800>
 200594c:	d9c01117 	ldw	r7,68(sp)
 2005950:	3801bc26 	beq	r7,zero,2006044 <_dtoa_r+0x1480>
 2005954:	10810cc4 	addi	r2,r2,1075
 2005958:	dd400a17 	ldw	r21,40(sp)
 200595c:	dd000817 	ldw	r20,32(sp)
 2005960:	003f0a06 	br	200558c <__alt_data_end+0xff00558c>
 2005964:	00800704 	movi	r2,28
 2005968:	d9000817 	ldw	r4,32(sp)
 200596c:	a0a9883a 	add	r20,r20,r2
 2005970:	b0ad883a 	add	r22,r22,r2
 2005974:	2089883a 	add	r4,r4,r2
 2005978:	d9000815 	stw	r4,32(sp)
 200597c:	003f5106 	br	20056c4 <__alt_data_end+0xff0056c4>
 2005980:	d8c00317 	ldw	r3,12(sp)
 2005984:	b8c1fc0e 	bge	r23,r3,2006178 <_dtoa_r+0x15b4>
 2005988:	0027883a 	mov	r19,zero
 200598c:	b805883a 	mov	r2,r23
 2005990:	003f3e06 	br	200568c <__alt_data_end+0xff00568c>
 2005994:	880b883a 	mov	r5,r17
 2005998:	e009883a 	mov	r4,fp
 200599c:	000f883a 	mov	r7,zero
 20059a0:	01800284 	movi	r6,10
 20059a4:	200834c0 	call	200834c <__multadd>
 20059a8:	d9000c17 	ldw	r4,48(sp)
 20059ac:	1023883a 	mov	r17,r2
 20059b0:	0102040e 	bge	zero,r4,20061c4 <_dtoa_r+0x1600>
 20059b4:	d9000615 	stw	r4,24(sp)
 20059b8:	0500050e 	bge	zero,r20,20059d0 <_dtoa_r+0xe0c>
 20059bc:	880b883a 	mov	r5,r17
 20059c0:	a00d883a 	mov	r6,r20
 20059c4:	e009883a 	mov	r4,fp
 20059c8:	2008ab80 	call	2008ab8 <__lshift>
 20059cc:	1023883a 	mov	r17,r2
 20059d0:	9801241e 	bne	r19,zero,2005e64 <_dtoa_r+0x12a0>
 20059d4:	8829883a 	mov	r20,r17
 20059d8:	d9000617 	ldw	r4,24(sp)
 20059dc:	dcc00717 	ldw	r19,28(sp)
 20059e0:	9480004c 	andi	r18,r18,1
 20059e4:	20bfffc4 	addi	r2,r4,-1
 20059e8:	9885883a 	add	r2,r19,r2
 20059ec:	d8800415 	stw	r2,16(sp)
 20059f0:	dc800615 	stw	r18,24(sp)
 20059f4:	a80b883a 	mov	r5,r21
 20059f8:	8009883a 	mov	r4,r16
 20059fc:	200499c0 	call	200499c <quorem>
 2005a00:	880b883a 	mov	r5,r17
 2005a04:	8009883a 	mov	r4,r16
 2005a08:	102f883a 	mov	r23,r2
 2005a0c:	2008c000 	call	2008c00 <__mcmp>
 2005a10:	a80b883a 	mov	r5,r21
 2005a14:	a00d883a 	mov	r6,r20
 2005a18:	e009883a 	mov	r4,fp
 2005a1c:	102d883a 	mov	r22,r2
 2005a20:	2008c600 	call	2008c60 <__mdiff>
 2005a24:	1007883a 	mov	r3,r2
 2005a28:	10800317 	ldw	r2,12(r2)
 2005a2c:	bc800c04 	addi	r18,r23,48
 2005a30:	180b883a 	mov	r5,r3
 2005a34:	10004e1e 	bne	r2,zero,2005b70 <_dtoa_r+0xfac>
 2005a38:	8009883a 	mov	r4,r16
 2005a3c:	d8c01615 	stw	r3,88(sp)
 2005a40:	2008c000 	call	2008c00 <__mcmp>
 2005a44:	d8c01617 	ldw	r3,88(sp)
 2005a48:	e009883a 	mov	r4,fp
 2005a4c:	d8801615 	stw	r2,88(sp)
 2005a50:	180b883a 	mov	r5,r3
 2005a54:	20083240 	call	2008324 <_Bfree>
 2005a58:	d8801617 	ldw	r2,88(sp)
 2005a5c:	1000041e 	bne	r2,zero,2005a70 <_dtoa_r+0xeac>
 2005a60:	d9800317 	ldw	r6,12(sp)
 2005a64:	3000021e 	bne	r6,zero,2005a70 <_dtoa_r+0xeac>
 2005a68:	d8c00617 	ldw	r3,24(sp)
 2005a6c:	18003726 	beq	r3,zero,2005b4c <_dtoa_r+0xf88>
 2005a70:	b0002016 	blt	r22,zero,2005af4 <_dtoa_r+0xf30>
 2005a74:	b000041e 	bne	r22,zero,2005a88 <_dtoa_r+0xec4>
 2005a78:	d9000317 	ldw	r4,12(sp)
 2005a7c:	2000021e 	bne	r4,zero,2005a88 <_dtoa_r+0xec4>
 2005a80:	d8c00617 	ldw	r3,24(sp)
 2005a84:	18001b26 	beq	r3,zero,2005af4 <_dtoa_r+0xf30>
 2005a88:	00810716 	blt	zero,r2,2005ea8 <_dtoa_r+0x12e4>
 2005a8c:	d8c00417 	ldw	r3,16(sp)
 2005a90:	9d800044 	addi	r22,r19,1
 2005a94:	9c800005 	stb	r18,0(r19)
 2005a98:	b02f883a 	mov	r23,r22
 2005a9c:	98c10626 	beq	r19,r3,2005eb8 <_dtoa_r+0x12f4>
 2005aa0:	800b883a 	mov	r5,r16
 2005aa4:	000f883a 	mov	r7,zero
 2005aa8:	01800284 	movi	r6,10
 2005aac:	e009883a 	mov	r4,fp
 2005ab0:	200834c0 	call	200834c <__multadd>
 2005ab4:	1021883a 	mov	r16,r2
 2005ab8:	000f883a 	mov	r7,zero
 2005abc:	01800284 	movi	r6,10
 2005ac0:	880b883a 	mov	r5,r17
 2005ac4:	e009883a 	mov	r4,fp
 2005ac8:	8d002526 	beq	r17,r20,2005b60 <_dtoa_r+0xf9c>
 2005acc:	200834c0 	call	200834c <__multadd>
 2005ad0:	a00b883a 	mov	r5,r20
 2005ad4:	000f883a 	mov	r7,zero
 2005ad8:	01800284 	movi	r6,10
 2005adc:	e009883a 	mov	r4,fp
 2005ae0:	1023883a 	mov	r17,r2
 2005ae4:	200834c0 	call	200834c <__multadd>
 2005ae8:	1029883a 	mov	r20,r2
 2005aec:	b027883a 	mov	r19,r22
 2005af0:	003fc006 	br	20059f4 <__alt_data_end+0xff0059f4>
 2005af4:	9011883a 	mov	r8,r18
 2005af8:	00800e0e 	bge	zero,r2,2005b34 <_dtoa_r+0xf70>
 2005afc:	800b883a 	mov	r5,r16
 2005b00:	01800044 	movi	r6,1
 2005b04:	e009883a 	mov	r4,fp
 2005b08:	da001715 	stw	r8,92(sp)
 2005b0c:	2008ab80 	call	2008ab8 <__lshift>
 2005b10:	a80b883a 	mov	r5,r21
 2005b14:	1009883a 	mov	r4,r2
 2005b18:	1021883a 	mov	r16,r2
 2005b1c:	2008c000 	call	2008c00 <__mcmp>
 2005b20:	da001717 	ldw	r8,92(sp)
 2005b24:	0081960e 	bge	zero,r2,2006180 <_dtoa_r+0x15bc>
 2005b28:	00800e44 	movi	r2,57
 2005b2c:	40817026 	beq	r8,r2,20060f0 <_dtoa_r+0x152c>
 2005b30:	ba000c44 	addi	r8,r23,49
 2005b34:	8825883a 	mov	r18,r17
 2005b38:	9dc00044 	addi	r23,r19,1
 2005b3c:	9a000005 	stb	r8,0(r19)
 2005b40:	a023883a 	mov	r17,r20
 2005b44:	dc000915 	stw	r16,36(sp)
 2005b48:	003f2406 	br	20057dc <__alt_data_end+0xff0057dc>
 2005b4c:	00800e44 	movi	r2,57
 2005b50:	9011883a 	mov	r8,r18
 2005b54:	90816626 	beq	r18,r2,20060f0 <_dtoa_r+0x152c>
 2005b58:	05bff516 	blt	zero,r22,2005b30 <__alt_data_end+0xff005b30>
 2005b5c:	003ff506 	br	2005b34 <__alt_data_end+0xff005b34>
 2005b60:	200834c0 	call	200834c <__multadd>
 2005b64:	1023883a 	mov	r17,r2
 2005b68:	1029883a 	mov	r20,r2
 2005b6c:	003fdf06 	br	2005aec <__alt_data_end+0xff005aec>
 2005b70:	e009883a 	mov	r4,fp
 2005b74:	20083240 	call	2008324 <_Bfree>
 2005b78:	00800044 	movi	r2,1
 2005b7c:	003fbc06 	br	2005a70 <__alt_data_end+0xff005a70>
 2005b80:	a80b883a 	mov	r5,r21
 2005b84:	8009883a 	mov	r4,r16
 2005b88:	2008c000 	call	2008c00 <__mcmp>
 2005b8c:	103edb0e 	bge	r2,zero,20056fc <__alt_data_end+0xff0056fc>
 2005b90:	800b883a 	mov	r5,r16
 2005b94:	000f883a 	mov	r7,zero
 2005b98:	01800284 	movi	r6,10
 2005b9c:	e009883a 	mov	r4,fp
 2005ba0:	200834c0 	call	200834c <__multadd>
 2005ba4:	1021883a 	mov	r16,r2
 2005ba8:	d8800517 	ldw	r2,20(sp)
 2005bac:	d8c00b17 	ldw	r3,44(sp)
 2005bb0:	10bfffc4 	addi	r2,r2,-1
 2005bb4:	d8800515 	stw	r2,20(sp)
 2005bb8:	183f761e 	bne	r3,zero,2005994 <__alt_data_end+0xff005994>
 2005bbc:	d9000c17 	ldw	r4,48(sp)
 2005bc0:	0101730e 	bge	zero,r4,2006190 <_dtoa_r+0x15cc>
 2005bc4:	d9000615 	stw	r4,24(sp)
 2005bc8:	003ed006 	br	200570c <__alt_data_end+0xff00570c>
 2005bcc:	00800084 	movi	r2,2
 2005bd0:	3081861e 	bne	r6,r2,20061ec <_dtoa_r+0x1628>
 2005bd4:	d8000b15 	stw	zero,44(sp)
 2005bd8:	003f3c06 	br	20058cc <__alt_data_end+0xff0058cc>
 2005bdc:	dc000917 	ldw	r16,36(sp)
 2005be0:	003e9206 	br	200562c <__alt_data_end+0xff00562c>
 2005be4:	d9c00317 	ldw	r7,12(sp)
 2005be8:	00800084 	movi	r2,2
 2005bec:	11fec50e 	bge	r2,r7,2005704 <__alt_data_end+0xff005704>
 2005bf0:	d9000617 	ldw	r4,24(sp)
 2005bf4:	20013c1e 	bne	r4,zero,20060e8 <_dtoa_r+0x1524>
 2005bf8:	a80b883a 	mov	r5,r21
 2005bfc:	000f883a 	mov	r7,zero
 2005c00:	01800144 	movi	r6,5
 2005c04:	e009883a 	mov	r4,fp
 2005c08:	200834c0 	call	200834c <__multadd>
 2005c0c:	100b883a 	mov	r5,r2
 2005c10:	8009883a 	mov	r4,r16
 2005c14:	102b883a 	mov	r21,r2
 2005c18:	2008c000 	call	2008c00 <__mcmp>
 2005c1c:	dc000915 	stw	r16,36(sp)
 2005c20:	00bf410e 	bge	zero,r2,2005928 <__alt_data_end+0xff005928>
 2005c24:	d9c00717 	ldw	r7,28(sp)
 2005c28:	00800c44 	movi	r2,49
 2005c2c:	38800005 	stb	r2,0(r7)
 2005c30:	d8800517 	ldw	r2,20(sp)
 2005c34:	3dc00044 	addi	r23,r7,1
 2005c38:	10800044 	addi	r2,r2,1
 2005c3c:	d8800515 	stw	r2,20(sp)
 2005c40:	003f3d06 	br	2005938 <__alt_data_end+0xff005938>
 2005c44:	d9800517 	ldw	r6,20(sp)
 2005c48:	d9c00717 	ldw	r7,28(sp)
 2005c4c:	00800c44 	movi	r2,49
 2005c50:	31800044 	addi	r6,r6,1
 2005c54:	d9800515 	stw	r6,20(sp)
 2005c58:	38800005 	stb	r2,0(r7)
 2005c5c:	003edf06 	br	20057dc <__alt_data_end+0xff0057dc>
 2005c60:	d8000b15 	stw	zero,44(sp)
 2005c64:	003c9f06 	br	2004ee4 <__alt_data_end+0xff004ee4>
 2005c68:	903e7e1e 	bne	r18,zero,2005664 <__alt_data_end+0xff005664>
 2005c6c:	00800434 	movhi	r2,16
 2005c70:	10bfffc4 	addi	r2,r2,-1
 2005c74:	9884703a 	and	r2,r19,r2
 2005c78:	1000ea1e 	bne	r2,zero,2006024 <_dtoa_r+0x1460>
 2005c7c:	9cdffc2c 	andhi	r19,r19,32752
 2005c80:	9800e826 	beq	r19,zero,2006024 <_dtoa_r+0x1460>
 2005c84:	d9c00817 	ldw	r7,32(sp)
 2005c88:	b5800044 	addi	r22,r22,1
 2005c8c:	04c00044 	movi	r19,1
 2005c90:	39c00044 	addi	r7,r7,1
 2005c94:	d9c00815 	stw	r7,32(sp)
 2005c98:	d8800d17 	ldw	r2,52(sp)
 2005c9c:	103e721e 	bne	r2,zero,2005668 <__alt_data_end+0xff005668>
 2005ca0:	00800044 	movi	r2,1
 2005ca4:	003e7906 	br	200568c <__alt_data_end+0xff00568c>
 2005ca8:	8009883a 	mov	r4,r16
 2005cac:	200f0140 	call	200f014 <__floatsidf>
 2005cb0:	d9800f17 	ldw	r6,60(sp)
 2005cb4:	d9c01017 	ldw	r7,64(sp)
 2005cb8:	1009883a 	mov	r4,r2
 2005cbc:	180b883a 	mov	r5,r3
 2005cc0:	200de2c0 	call	200de2c <__muldf3>
 2005cc4:	000d883a 	mov	r6,zero
 2005cc8:	01d00734 	movhi	r7,16412
 2005ccc:	1009883a 	mov	r4,r2
 2005cd0:	180b883a 	mov	r5,r3
 2005cd4:	200c9580 	call	200c958 <__adddf3>
 2005cd8:	047f3034 	movhi	r17,64704
 2005cdc:	1021883a 	mov	r16,r2
 2005ce0:	1c63883a 	add	r17,r3,r17
 2005ce4:	d9000f17 	ldw	r4,60(sp)
 2005ce8:	d9401017 	ldw	r5,64(sp)
 2005cec:	000d883a 	mov	r6,zero
 2005cf0:	01d00534 	movhi	r7,16404
 2005cf4:	200e6980 	call	200e698 <__subdf3>
 2005cf8:	800d883a 	mov	r6,r16
 2005cfc:	880f883a 	mov	r7,r17
 2005d00:	1009883a 	mov	r4,r2
 2005d04:	180b883a 	mov	r5,r3
 2005d08:	102b883a 	mov	r21,r2
 2005d0c:	1829883a 	mov	r20,r3
 2005d10:	200dc5c0 	call	200dc5c <__gedf2>
 2005d14:	00806c16 	blt	zero,r2,2005ec8 <_dtoa_r+0x1304>
 2005d18:	89e0003c 	xorhi	r7,r17,32768
 2005d1c:	800d883a 	mov	r6,r16
 2005d20:	a809883a 	mov	r4,r21
 2005d24:	a00b883a 	mov	r5,r20
 2005d28:	200dd380 	call	200dd38 <__ledf2>
 2005d2c:	103d7e0e 	bge	r2,zero,2005328 <__alt_data_end+0xff005328>
 2005d30:	002b883a 	mov	r21,zero
 2005d34:	0023883a 	mov	r17,zero
 2005d38:	003efb06 	br	2005928 <__alt_data_end+0xff005928>
 2005d3c:	d8800717 	ldw	r2,28(sp)
 2005d40:	003bd006 	br	2004c84 <__alt_data_end+0xff004c84>
 2005d44:	d9000a17 	ldw	r4,40(sp)
 2005d48:	d9800d17 	ldw	r6,52(sp)
 2005d4c:	dd400a15 	stw	r21,40(sp)
 2005d50:	a905c83a 	sub	r2,r21,r4
 2005d54:	308d883a 	add	r6,r6,r2
 2005d58:	d9800d15 	stw	r6,52(sp)
 2005d5c:	002b883a 	mov	r21,zero
 2005d60:	003e0606 	br	200557c <__alt_data_end+0xff00557c>
 2005d64:	9023883a 	mov	r17,r18
 2005d68:	9829883a 	mov	r20,r19
 2005d6c:	04000084 	movi	r16,2
 2005d70:	003c9206 	br	2004fbc <__alt_data_end+0xff004fbc>
 2005d74:	04000044 	movi	r16,1
 2005d78:	dc000c15 	stw	r16,48(sp)
 2005d7c:	dc000615 	stw	r16,24(sp)
 2005d80:	dc002215 	stw	r16,136(sp)
 2005d84:	e0001115 	stw	zero,68(fp)
 2005d88:	000b883a 	mov	r5,zero
 2005d8c:	003c6906 	br	2004f34 <__alt_data_end+0xff004f34>
 2005d90:	3021883a 	mov	r16,r6
 2005d94:	003ffb06 	br	2005d84 <__alt_data_end+0xff005d84>
 2005d98:	1000021e 	bne	r2,zero,2005da4 <_dtoa_r+0x11e0>
 2005d9c:	4200004c 	andi	r8,r8,1
 2005da0:	403e7d1e 	bne	r8,zero,2005798 <__alt_data_end+0xff005798>
 2005da4:	01000c04 	movi	r4,48
 2005da8:	00000106 	br	2005db0 <_dtoa_r+0x11ec>
 2005dac:	102f883a 	mov	r23,r2
 2005db0:	b8bfffc4 	addi	r2,r23,-1
 2005db4:	10c00007 	ldb	r3,0(r2)
 2005db8:	193ffc26 	beq	r3,r4,2005dac <__alt_data_end+0xff005dac>
 2005dbc:	003e8706 	br	20057dc <__alt_data_end+0xff0057dc>
 2005dc0:	d8800517 	ldw	r2,20(sp)
 2005dc4:	00a3c83a 	sub	r17,zero,r2
 2005dc8:	8800a426 	beq	r17,zero,200605c <_dtoa_r+0x1498>
 2005dcc:	888003cc 	andi	r2,r17,15
 2005dd0:	100490fa 	slli	r2,r2,3
 2005dd4:	00c08074 	movhi	r3,513
 2005dd8:	18c89f04 	addi	r3,r3,8828
 2005ddc:	1885883a 	add	r2,r3,r2
 2005de0:	11800017 	ldw	r6,0(r2)
 2005de4:	11c00117 	ldw	r7,4(r2)
 2005de8:	9009883a 	mov	r4,r18
 2005dec:	980b883a 	mov	r5,r19
 2005df0:	8823d13a 	srai	r17,r17,4
 2005df4:	200de2c0 	call	200de2c <__muldf3>
 2005df8:	d8800f15 	stw	r2,60(sp)
 2005dfc:	d8c01015 	stw	r3,64(sp)
 2005e00:	8800e826 	beq	r17,zero,20061a4 <_dtoa_r+0x15e0>
 2005e04:	05008074 	movhi	r20,513
 2005e08:	a5089504 	addi	r20,r20,8788
 2005e0c:	04000084 	movi	r16,2
 2005e10:	8980004c 	andi	r6,r17,1
 2005e14:	1009883a 	mov	r4,r2
 2005e18:	8823d07a 	srai	r17,r17,1
 2005e1c:	180b883a 	mov	r5,r3
 2005e20:	30000426 	beq	r6,zero,2005e34 <_dtoa_r+0x1270>
 2005e24:	a1800017 	ldw	r6,0(r20)
 2005e28:	a1c00117 	ldw	r7,4(r20)
 2005e2c:	84000044 	addi	r16,r16,1
 2005e30:	200de2c0 	call	200de2c <__muldf3>
 2005e34:	a5000204 	addi	r20,r20,8
 2005e38:	883ff51e 	bne	r17,zero,2005e10 <__alt_data_end+0xff005e10>
 2005e3c:	d8800f15 	stw	r2,60(sp)
 2005e40:	d8c01015 	stw	r3,64(sp)
 2005e44:	003c7606 	br	2005020 <__alt_data_end+0xff005020>
 2005e48:	00c00c04 	movi	r3,48
 2005e4c:	10c00005 	stb	r3,0(r2)
 2005e50:	d8c00517 	ldw	r3,20(sp)
 2005e54:	bd3fffc3 	ldbu	r20,-1(r23)
 2005e58:	18c00044 	addi	r3,r3,1
 2005e5c:	d8c00515 	stw	r3,20(sp)
 2005e60:	003db906 	br	2005548 <__alt_data_end+0xff005548>
 2005e64:	89400117 	ldw	r5,4(r17)
 2005e68:	e009883a 	mov	r4,fp
 2005e6c:	200827c0 	call	200827c <_Balloc>
 2005e70:	89800417 	ldw	r6,16(r17)
 2005e74:	89400304 	addi	r5,r17,12
 2005e78:	11000304 	addi	r4,r2,12
 2005e7c:	31800084 	addi	r6,r6,2
 2005e80:	318d883a 	add	r6,r6,r6
 2005e84:	318d883a 	add	r6,r6,r6
 2005e88:	1027883a 	mov	r19,r2
 2005e8c:	2007eb00 	call	2007eb0 <memcpy>
 2005e90:	01800044 	movi	r6,1
 2005e94:	980b883a 	mov	r5,r19
 2005e98:	e009883a 	mov	r4,fp
 2005e9c:	2008ab80 	call	2008ab8 <__lshift>
 2005ea0:	1029883a 	mov	r20,r2
 2005ea4:	003ecc06 	br	20059d8 <__alt_data_end+0xff0059d8>
 2005ea8:	00800e44 	movi	r2,57
 2005eac:	90809026 	beq	r18,r2,20060f0 <_dtoa_r+0x152c>
 2005eb0:	92000044 	addi	r8,r18,1
 2005eb4:	003f1f06 	br	2005b34 <__alt_data_end+0xff005b34>
 2005eb8:	9011883a 	mov	r8,r18
 2005ebc:	8825883a 	mov	r18,r17
 2005ec0:	a023883a 	mov	r17,r20
 2005ec4:	003e2906 	br	200576c <__alt_data_end+0xff00576c>
 2005ec8:	002b883a 	mov	r21,zero
 2005ecc:	0023883a 	mov	r17,zero
 2005ed0:	003f5406 	br	2005c24 <__alt_data_end+0xff005c24>
 2005ed4:	61bfffc4 	addi	r6,r12,-1
 2005ed8:	300490fa 	slli	r2,r6,3
 2005edc:	00c08074 	movhi	r3,513
 2005ee0:	18c89f04 	addi	r3,r3,8828
 2005ee4:	1885883a 	add	r2,r3,r2
 2005ee8:	11000017 	ldw	r4,0(r2)
 2005eec:	11400117 	ldw	r5,4(r2)
 2005ef0:	d8800717 	ldw	r2,28(sp)
 2005ef4:	880f883a 	mov	r7,r17
 2005ef8:	d9801215 	stw	r6,72(sp)
 2005efc:	800d883a 	mov	r6,r16
 2005f00:	db001615 	stw	r12,88(sp)
 2005f04:	15c00044 	addi	r23,r2,1
 2005f08:	200de2c0 	call	200de2c <__muldf3>
 2005f0c:	d9401017 	ldw	r5,64(sp)
 2005f10:	d9000f17 	ldw	r4,60(sp)
 2005f14:	d8c01515 	stw	r3,84(sp)
 2005f18:	d8801415 	stw	r2,80(sp)
 2005f1c:	200ef940 	call	200ef94 <__fixdfsi>
 2005f20:	1009883a 	mov	r4,r2
 2005f24:	1021883a 	mov	r16,r2
 2005f28:	200f0140 	call	200f014 <__floatsidf>
 2005f2c:	d9000f17 	ldw	r4,60(sp)
 2005f30:	d9401017 	ldw	r5,64(sp)
 2005f34:	100d883a 	mov	r6,r2
 2005f38:	180f883a 	mov	r7,r3
 2005f3c:	200e6980 	call	200e698 <__subdf3>
 2005f40:	1829883a 	mov	r20,r3
 2005f44:	d8c00717 	ldw	r3,28(sp)
 2005f48:	84000c04 	addi	r16,r16,48
 2005f4c:	1023883a 	mov	r17,r2
 2005f50:	1c000005 	stb	r16,0(r3)
 2005f54:	db001617 	ldw	r12,88(sp)
 2005f58:	00800044 	movi	r2,1
 2005f5c:	60802226 	beq	r12,r2,2005fe8 <_dtoa_r+0x1424>
 2005f60:	d9c00717 	ldw	r7,28(sp)
 2005f64:	8805883a 	mov	r2,r17
 2005f68:	b82b883a 	mov	r21,r23
 2005f6c:	3b19883a 	add	r12,r7,r12
 2005f70:	6023883a 	mov	r17,r12
 2005f74:	a007883a 	mov	r3,r20
 2005f78:	dc800f15 	stw	r18,60(sp)
 2005f7c:	000d883a 	mov	r6,zero
 2005f80:	01d00934 	movhi	r7,16420
 2005f84:	1009883a 	mov	r4,r2
 2005f88:	180b883a 	mov	r5,r3
 2005f8c:	200de2c0 	call	200de2c <__muldf3>
 2005f90:	180b883a 	mov	r5,r3
 2005f94:	1009883a 	mov	r4,r2
 2005f98:	1829883a 	mov	r20,r3
 2005f9c:	1025883a 	mov	r18,r2
 2005fa0:	200ef940 	call	200ef94 <__fixdfsi>
 2005fa4:	1009883a 	mov	r4,r2
 2005fa8:	1021883a 	mov	r16,r2
 2005fac:	200f0140 	call	200f014 <__floatsidf>
 2005fb0:	100d883a 	mov	r6,r2
 2005fb4:	180f883a 	mov	r7,r3
 2005fb8:	9009883a 	mov	r4,r18
 2005fbc:	a00b883a 	mov	r5,r20
 2005fc0:	84000c04 	addi	r16,r16,48
 2005fc4:	200e6980 	call	200e698 <__subdf3>
 2005fc8:	ad400044 	addi	r21,r21,1
 2005fcc:	ac3fffc5 	stb	r16,-1(r21)
 2005fd0:	ac7fea1e 	bne	r21,r17,2005f7c <__alt_data_end+0xff005f7c>
 2005fd4:	1023883a 	mov	r17,r2
 2005fd8:	d8801217 	ldw	r2,72(sp)
 2005fdc:	dc800f17 	ldw	r18,60(sp)
 2005fe0:	1829883a 	mov	r20,r3
 2005fe4:	b8af883a 	add	r23,r23,r2
 2005fe8:	d9001417 	ldw	r4,80(sp)
 2005fec:	d9401517 	ldw	r5,84(sp)
 2005ff0:	000d883a 	mov	r6,zero
 2005ff4:	01cff834 	movhi	r7,16352
 2005ff8:	200c9580 	call	200c958 <__adddf3>
 2005ffc:	880d883a 	mov	r6,r17
 2006000:	a00f883a 	mov	r7,r20
 2006004:	1009883a 	mov	r4,r2
 2006008:	180b883a 	mov	r5,r3
 200600c:	200dd380 	call	200dd38 <__ledf2>
 2006010:	10003e0e 	bge	r2,zero,200610c <_dtoa_r+0x1548>
 2006014:	d9001317 	ldw	r4,76(sp)
 2006018:	bd3fffc3 	ldbu	r20,-1(r23)
 200601c:	d9000515 	stw	r4,20(sp)
 2006020:	003d3b06 	br	2005510 <__alt_data_end+0xff005510>
 2006024:	0027883a 	mov	r19,zero
 2006028:	003f1b06 	br	2005c98 <__alt_data_end+0xff005c98>
 200602c:	d8800817 	ldw	r2,32(sp)
 2006030:	11e9c83a 	sub	r20,r2,r7
 2006034:	0005883a 	mov	r2,zero
 2006038:	003d5406 	br	200558c <__alt_data_end+0xff00558c>
 200603c:	00800044 	movi	r2,1
 2006040:	003dc706 	br	2005760 <__alt_data_end+0xff005760>
 2006044:	d8c00217 	ldw	r3,8(sp)
 2006048:	00800d84 	movi	r2,54
 200604c:	dd400a17 	ldw	r21,40(sp)
 2006050:	10c5c83a 	sub	r2,r2,r3
 2006054:	dd000817 	ldw	r20,32(sp)
 2006058:	003d4c06 	br	200558c <__alt_data_end+0xff00558c>
 200605c:	dc800f15 	stw	r18,60(sp)
 2006060:	dcc01015 	stw	r19,64(sp)
 2006064:	04000084 	movi	r16,2
 2006068:	003bed06 	br	2005020 <__alt_data_end+0xff005020>
 200606c:	d9000617 	ldw	r4,24(sp)
 2006070:	203f0d26 	beq	r4,zero,2005ca8 <__alt_data_end+0xff005ca8>
 2006074:	d9800c17 	ldw	r6,48(sp)
 2006078:	01bcab0e 	bge	zero,r6,2005328 <__alt_data_end+0xff005328>
 200607c:	d9401017 	ldw	r5,64(sp)
 2006080:	d9000f17 	ldw	r4,60(sp)
 2006084:	000d883a 	mov	r6,zero
 2006088:	01d00934 	movhi	r7,16420
 200608c:	200de2c0 	call	200de2c <__muldf3>
 2006090:	81000044 	addi	r4,r16,1
 2006094:	d8800f15 	stw	r2,60(sp)
 2006098:	d8c01015 	stw	r3,64(sp)
 200609c:	200f0140 	call	200f014 <__floatsidf>
 20060a0:	d9800f17 	ldw	r6,60(sp)
 20060a4:	d9c01017 	ldw	r7,64(sp)
 20060a8:	1009883a 	mov	r4,r2
 20060ac:	180b883a 	mov	r5,r3
 20060b0:	200de2c0 	call	200de2c <__muldf3>
 20060b4:	01d00734 	movhi	r7,16412
 20060b8:	000d883a 	mov	r6,zero
 20060bc:	1009883a 	mov	r4,r2
 20060c0:	180b883a 	mov	r5,r3
 20060c4:	200c9580 	call	200c958 <__adddf3>
 20060c8:	d9c00517 	ldw	r7,20(sp)
 20060cc:	047f3034 	movhi	r17,64704
 20060d0:	1021883a 	mov	r16,r2
 20060d4:	39ffffc4 	addi	r7,r7,-1
 20060d8:	d9c01315 	stw	r7,76(sp)
 20060dc:	1c63883a 	add	r17,r3,r17
 20060e0:	db000c17 	ldw	r12,48(sp)
 20060e4:	003bea06 	br	2005090 <__alt_data_end+0xff005090>
 20060e8:	dc000915 	stw	r16,36(sp)
 20060ec:	003e0e06 	br	2005928 <__alt_data_end+0xff005928>
 20060f0:	01000e44 	movi	r4,57
 20060f4:	8825883a 	mov	r18,r17
 20060f8:	9dc00044 	addi	r23,r19,1
 20060fc:	99000005 	stb	r4,0(r19)
 2006100:	a023883a 	mov	r17,r20
 2006104:	dc000915 	stw	r16,36(sp)
 2006108:	003da406 	br	200579c <__alt_data_end+0xff00579c>
 200610c:	d9801417 	ldw	r6,80(sp)
 2006110:	d9c01517 	ldw	r7,84(sp)
 2006114:	0009883a 	mov	r4,zero
 2006118:	014ff834 	movhi	r5,16352
 200611c:	200e6980 	call	200e698 <__subdf3>
 2006120:	880d883a 	mov	r6,r17
 2006124:	a00f883a 	mov	r7,r20
 2006128:	1009883a 	mov	r4,r2
 200612c:	180b883a 	mov	r5,r3
 2006130:	200dc5c0 	call	200dc5c <__gedf2>
 2006134:	00bc7c0e 	bge	zero,r2,2005328 <__alt_data_end+0xff005328>
 2006138:	01000c04 	movi	r4,48
 200613c:	00000106 	br	2006144 <_dtoa_r+0x1580>
 2006140:	102f883a 	mov	r23,r2
 2006144:	b8bfffc4 	addi	r2,r23,-1
 2006148:	10c00007 	ldb	r3,0(r2)
 200614c:	193ffc26 	beq	r3,r4,2006140 <__alt_data_end+0xff006140>
 2006150:	d9801317 	ldw	r6,76(sp)
 2006154:	d9800515 	stw	r6,20(sp)
 2006158:	003c4406 	br	200526c <__alt_data_end+0xff00526c>
 200615c:	d9801317 	ldw	r6,76(sp)
 2006160:	d9800515 	stw	r6,20(sp)
 2006164:	003cea06 	br	2005510 <__alt_data_end+0xff005510>
 2006168:	dd800f17 	ldw	r22,60(sp)
 200616c:	dcc01017 	ldw	r19,64(sp)
 2006170:	dc801217 	ldw	r18,72(sp)
 2006174:	003c6c06 	br	2005328 <__alt_data_end+0xff005328>
 2006178:	903e031e 	bne	r18,zero,2005988 <__alt_data_end+0xff005988>
 200617c:	003ebb06 	br	2005c6c <__alt_data_end+0xff005c6c>
 2006180:	103e6c1e 	bne	r2,zero,2005b34 <__alt_data_end+0xff005b34>
 2006184:	4080004c 	andi	r2,r8,1
 2006188:	103e6a26 	beq	r2,zero,2005b34 <__alt_data_end+0xff005b34>
 200618c:	003e6606 	br	2005b28 <__alt_data_end+0xff005b28>
 2006190:	d8c00317 	ldw	r3,12(sp)
 2006194:	00800084 	movi	r2,2
 2006198:	10c02916 	blt	r2,r3,2006240 <_dtoa_r+0x167c>
 200619c:	d9000c17 	ldw	r4,48(sp)
 20061a0:	003e8806 	br	2005bc4 <__alt_data_end+0xff005bc4>
 20061a4:	04000084 	movi	r16,2
 20061a8:	003b9d06 	br	2005020 <__alt_data_end+0xff005020>
 20061ac:	d9001317 	ldw	r4,76(sp)
 20061b0:	d9000515 	stw	r4,20(sp)
 20061b4:	003cd606 	br	2005510 <__alt_data_end+0xff005510>
 20061b8:	d8801317 	ldw	r2,76(sp)
 20061bc:	d8800515 	stw	r2,20(sp)
 20061c0:	003c2a06 	br	200526c <__alt_data_end+0xff00526c>
 20061c4:	d9800317 	ldw	r6,12(sp)
 20061c8:	00800084 	movi	r2,2
 20061cc:	11801516 	blt	r2,r6,2006224 <_dtoa_r+0x1660>
 20061d0:	d9c00c17 	ldw	r7,48(sp)
 20061d4:	d9c00615 	stw	r7,24(sp)
 20061d8:	003df706 	br	20059b8 <__alt_data_end+0xff0059b8>
 20061dc:	193d3926 	beq	r3,r4,20056c4 <__alt_data_end+0xff0056c4>
 20061e0:	00c00f04 	movi	r3,60
 20061e4:	1885c83a 	sub	r2,r3,r2
 20061e8:	003ddf06 	br	2005968 <__alt_data_end+0xff005968>
 20061ec:	e009883a 	mov	r4,fp
 20061f0:	e0001115 	stw	zero,68(fp)
 20061f4:	000b883a 	mov	r5,zero
 20061f8:	200827c0 	call	200827c <_Balloc>
 20061fc:	d8800715 	stw	r2,28(sp)
 2006200:	d8c00717 	ldw	r3,28(sp)
 2006204:	00bfffc4 	movi	r2,-1
 2006208:	01000044 	movi	r4,1
 200620c:	d8800c15 	stw	r2,48(sp)
 2006210:	e0c01015 	stw	r3,64(fp)
 2006214:	d9000b15 	stw	r4,44(sp)
 2006218:	d8800615 	stw	r2,24(sp)
 200621c:	d8002215 	stw	zero,136(sp)
 2006220:	003c4106 	br	2005328 <__alt_data_end+0xff005328>
 2006224:	d8c00c17 	ldw	r3,48(sp)
 2006228:	d8c00615 	stw	r3,24(sp)
 200622c:	003e7006 	br	2005bf0 <__alt_data_end+0xff005bf0>
 2006230:	04400044 	movi	r17,1
 2006234:	003b2006 	br	2004eb8 <__alt_data_end+0xff004eb8>
 2006238:	000b883a 	mov	r5,zero
 200623c:	003b3d06 	br	2004f34 <__alt_data_end+0xff004f34>
 2006240:	d8800c17 	ldw	r2,48(sp)
 2006244:	d8800615 	stw	r2,24(sp)
 2006248:	003e6906 	br	2005bf0 <__alt_data_end+0xff005bf0>

0200624c <__sflush_r>:
 200624c:	2880030b 	ldhu	r2,12(r5)
 2006250:	defffb04 	addi	sp,sp,-20
 2006254:	dcc00315 	stw	r19,12(sp)
 2006258:	dc400115 	stw	r17,4(sp)
 200625c:	dfc00415 	stw	ra,16(sp)
 2006260:	dc800215 	stw	r18,8(sp)
 2006264:	dc000015 	stw	r16,0(sp)
 2006268:	10c0020c 	andi	r3,r2,8
 200626c:	2823883a 	mov	r17,r5
 2006270:	2027883a 	mov	r19,r4
 2006274:	1800311e 	bne	r3,zero,200633c <__sflush_r+0xf0>
 2006278:	28c00117 	ldw	r3,4(r5)
 200627c:	10820014 	ori	r2,r2,2048
 2006280:	2880030d 	sth	r2,12(r5)
 2006284:	00c04b0e 	bge	zero,r3,20063b4 <__sflush_r+0x168>
 2006288:	8a000a17 	ldw	r8,40(r17)
 200628c:	40002326 	beq	r8,zero,200631c <__sflush_r+0xd0>
 2006290:	9c000017 	ldw	r16,0(r19)
 2006294:	10c4000c 	andi	r3,r2,4096
 2006298:	98000015 	stw	zero,0(r19)
 200629c:	18004826 	beq	r3,zero,20063c0 <__sflush_r+0x174>
 20062a0:	89801417 	ldw	r6,80(r17)
 20062a4:	10c0010c 	andi	r3,r2,4
 20062a8:	18000626 	beq	r3,zero,20062c4 <__sflush_r+0x78>
 20062ac:	88c00117 	ldw	r3,4(r17)
 20062b0:	88800c17 	ldw	r2,48(r17)
 20062b4:	30cdc83a 	sub	r6,r6,r3
 20062b8:	10000226 	beq	r2,zero,20062c4 <__sflush_r+0x78>
 20062bc:	88800f17 	ldw	r2,60(r17)
 20062c0:	308dc83a 	sub	r6,r6,r2
 20062c4:	89400717 	ldw	r5,28(r17)
 20062c8:	000f883a 	mov	r7,zero
 20062cc:	9809883a 	mov	r4,r19
 20062d0:	403ee83a 	callr	r8
 20062d4:	00ffffc4 	movi	r3,-1
 20062d8:	10c04426 	beq	r2,r3,20063ec <__sflush_r+0x1a0>
 20062dc:	88c0030b 	ldhu	r3,12(r17)
 20062e0:	89000417 	ldw	r4,16(r17)
 20062e4:	88000115 	stw	zero,4(r17)
 20062e8:	197dffcc 	andi	r5,r3,63487
 20062ec:	8940030d 	sth	r5,12(r17)
 20062f0:	89000015 	stw	r4,0(r17)
 20062f4:	18c4000c 	andi	r3,r3,4096
 20062f8:	18002c1e 	bne	r3,zero,20063ac <__sflush_r+0x160>
 20062fc:	89400c17 	ldw	r5,48(r17)
 2006300:	9c000015 	stw	r16,0(r19)
 2006304:	28000526 	beq	r5,zero,200631c <__sflush_r+0xd0>
 2006308:	88801004 	addi	r2,r17,64
 200630c:	28800226 	beq	r5,r2,2006318 <__sflush_r+0xcc>
 2006310:	9809883a 	mov	r4,r19
 2006314:	20069c80 	call	20069c8 <_free_r>
 2006318:	88000c15 	stw	zero,48(r17)
 200631c:	0005883a 	mov	r2,zero
 2006320:	dfc00417 	ldw	ra,16(sp)
 2006324:	dcc00317 	ldw	r19,12(sp)
 2006328:	dc800217 	ldw	r18,8(sp)
 200632c:	dc400117 	ldw	r17,4(sp)
 2006330:	dc000017 	ldw	r16,0(sp)
 2006334:	dec00504 	addi	sp,sp,20
 2006338:	f800283a 	ret
 200633c:	2c800417 	ldw	r18,16(r5)
 2006340:	903ff626 	beq	r18,zero,200631c <__alt_data_end+0xff00631c>
 2006344:	2c000017 	ldw	r16,0(r5)
 2006348:	108000cc 	andi	r2,r2,3
 200634c:	2c800015 	stw	r18,0(r5)
 2006350:	84a1c83a 	sub	r16,r16,r18
 2006354:	1000131e 	bne	r2,zero,20063a4 <__sflush_r+0x158>
 2006358:	28800517 	ldw	r2,20(r5)
 200635c:	88800215 	stw	r2,8(r17)
 2006360:	04000316 	blt	zero,r16,2006370 <__sflush_r+0x124>
 2006364:	003fed06 	br	200631c <__alt_data_end+0xff00631c>
 2006368:	90a5883a 	add	r18,r18,r2
 200636c:	043feb0e 	bge	zero,r16,200631c <__alt_data_end+0xff00631c>
 2006370:	88800917 	ldw	r2,36(r17)
 2006374:	89400717 	ldw	r5,28(r17)
 2006378:	800f883a 	mov	r7,r16
 200637c:	900d883a 	mov	r6,r18
 2006380:	9809883a 	mov	r4,r19
 2006384:	103ee83a 	callr	r2
 2006388:	80a1c83a 	sub	r16,r16,r2
 200638c:	00bff616 	blt	zero,r2,2006368 <__alt_data_end+0xff006368>
 2006390:	88c0030b 	ldhu	r3,12(r17)
 2006394:	00bfffc4 	movi	r2,-1
 2006398:	18c01014 	ori	r3,r3,64
 200639c:	88c0030d 	sth	r3,12(r17)
 20063a0:	003fdf06 	br	2006320 <__alt_data_end+0xff006320>
 20063a4:	0005883a 	mov	r2,zero
 20063a8:	003fec06 	br	200635c <__alt_data_end+0xff00635c>
 20063ac:	88801415 	stw	r2,80(r17)
 20063b0:	003fd206 	br	20062fc <__alt_data_end+0xff0062fc>
 20063b4:	28c00f17 	ldw	r3,60(r5)
 20063b8:	00ffb316 	blt	zero,r3,2006288 <__alt_data_end+0xff006288>
 20063bc:	003fd706 	br	200631c <__alt_data_end+0xff00631c>
 20063c0:	89400717 	ldw	r5,28(r17)
 20063c4:	000d883a 	mov	r6,zero
 20063c8:	01c00044 	movi	r7,1
 20063cc:	9809883a 	mov	r4,r19
 20063d0:	403ee83a 	callr	r8
 20063d4:	100d883a 	mov	r6,r2
 20063d8:	00bfffc4 	movi	r2,-1
 20063dc:	30801426 	beq	r6,r2,2006430 <__sflush_r+0x1e4>
 20063e0:	8880030b 	ldhu	r2,12(r17)
 20063e4:	8a000a17 	ldw	r8,40(r17)
 20063e8:	003fae06 	br	20062a4 <__alt_data_end+0xff0062a4>
 20063ec:	98c00017 	ldw	r3,0(r19)
 20063f0:	183fba26 	beq	r3,zero,20062dc <__alt_data_end+0xff0062dc>
 20063f4:	01000744 	movi	r4,29
 20063f8:	19000626 	beq	r3,r4,2006414 <__sflush_r+0x1c8>
 20063fc:	01000584 	movi	r4,22
 2006400:	19000426 	beq	r3,r4,2006414 <__sflush_r+0x1c8>
 2006404:	88c0030b 	ldhu	r3,12(r17)
 2006408:	18c01014 	ori	r3,r3,64
 200640c:	88c0030d 	sth	r3,12(r17)
 2006410:	003fc306 	br	2006320 <__alt_data_end+0xff006320>
 2006414:	8880030b 	ldhu	r2,12(r17)
 2006418:	88c00417 	ldw	r3,16(r17)
 200641c:	88000115 	stw	zero,4(r17)
 2006420:	10bdffcc 	andi	r2,r2,63487
 2006424:	8880030d 	sth	r2,12(r17)
 2006428:	88c00015 	stw	r3,0(r17)
 200642c:	003fb306 	br	20062fc <__alt_data_end+0xff0062fc>
 2006430:	98800017 	ldw	r2,0(r19)
 2006434:	103fea26 	beq	r2,zero,20063e0 <__alt_data_end+0xff0063e0>
 2006438:	00c00744 	movi	r3,29
 200643c:	10c00226 	beq	r2,r3,2006448 <__sflush_r+0x1fc>
 2006440:	00c00584 	movi	r3,22
 2006444:	10c0031e 	bne	r2,r3,2006454 <__sflush_r+0x208>
 2006448:	9c000015 	stw	r16,0(r19)
 200644c:	0005883a 	mov	r2,zero
 2006450:	003fb306 	br	2006320 <__alt_data_end+0xff006320>
 2006454:	88c0030b 	ldhu	r3,12(r17)
 2006458:	3005883a 	mov	r2,r6
 200645c:	18c01014 	ori	r3,r3,64
 2006460:	88c0030d 	sth	r3,12(r17)
 2006464:	003fae06 	br	2006320 <__alt_data_end+0xff006320>

02006468 <_fflush_r>:
 2006468:	defffd04 	addi	sp,sp,-12
 200646c:	dc000115 	stw	r16,4(sp)
 2006470:	dfc00215 	stw	ra,8(sp)
 2006474:	2021883a 	mov	r16,r4
 2006478:	20000226 	beq	r4,zero,2006484 <_fflush_r+0x1c>
 200647c:	20800e17 	ldw	r2,56(r4)
 2006480:	10000c26 	beq	r2,zero,20064b4 <_fflush_r+0x4c>
 2006484:	2880030f 	ldh	r2,12(r5)
 2006488:	1000051e 	bne	r2,zero,20064a0 <_fflush_r+0x38>
 200648c:	0005883a 	mov	r2,zero
 2006490:	dfc00217 	ldw	ra,8(sp)
 2006494:	dc000117 	ldw	r16,4(sp)
 2006498:	dec00304 	addi	sp,sp,12
 200649c:	f800283a 	ret
 20064a0:	8009883a 	mov	r4,r16
 20064a4:	dfc00217 	ldw	ra,8(sp)
 20064a8:	dc000117 	ldw	r16,4(sp)
 20064ac:	dec00304 	addi	sp,sp,12
 20064b0:	200624c1 	jmpi	200624c <__sflush_r>
 20064b4:	d9400015 	stw	r5,0(sp)
 20064b8:	20068540 	call	2006854 <__sinit>
 20064bc:	d9400017 	ldw	r5,0(sp)
 20064c0:	003ff006 	br	2006484 <__alt_data_end+0xff006484>

020064c4 <fflush>:
 20064c4:	20000526 	beq	r4,zero,20064dc <fflush+0x18>
 20064c8:	00808074 	movhi	r2,513
 20064cc:	108fd204 	addi	r2,r2,16200
 20064d0:	200b883a 	mov	r5,r4
 20064d4:	11000017 	ldw	r4,0(r2)
 20064d8:	20064681 	jmpi	2006468 <_fflush_r>
 20064dc:	00808074 	movhi	r2,513
 20064e0:	108fd104 	addi	r2,r2,16196
 20064e4:	11000017 	ldw	r4,0(r2)
 20064e8:	01408034 	movhi	r5,512
 20064ec:	29591a04 	addi	r5,r5,25704
 20064f0:	20072641 	jmpi	2007264 <_fwalk_reent>

020064f4 <__fp_unlock>:
 20064f4:	0005883a 	mov	r2,zero
 20064f8:	f800283a 	ret

020064fc <_cleanup_r>:
 20064fc:	01408074 	movhi	r5,513
 2006500:	296d0004 	addi	r5,r5,-19456
 2006504:	20072641 	jmpi	2007264 <_fwalk_reent>

02006508 <__sinit.part.1>:
 2006508:	defff704 	addi	sp,sp,-36
 200650c:	00c08034 	movhi	r3,512
 2006510:	dfc00815 	stw	ra,32(sp)
 2006514:	ddc00715 	stw	r23,28(sp)
 2006518:	dd800615 	stw	r22,24(sp)
 200651c:	dd400515 	stw	r21,20(sp)
 2006520:	dd000415 	stw	r20,16(sp)
 2006524:	dcc00315 	stw	r19,12(sp)
 2006528:	dc800215 	stw	r18,8(sp)
 200652c:	dc400115 	stw	r17,4(sp)
 2006530:	dc000015 	stw	r16,0(sp)
 2006534:	18d93f04 	addi	r3,r3,25852
 2006538:	24000117 	ldw	r16,4(r4)
 200653c:	20c00f15 	stw	r3,60(r4)
 2006540:	2080bb04 	addi	r2,r4,748
 2006544:	00c000c4 	movi	r3,3
 2006548:	20c0b915 	stw	r3,740(r4)
 200654c:	2080ba15 	stw	r2,744(r4)
 2006550:	2000b815 	stw	zero,736(r4)
 2006554:	05c00204 	movi	r23,8
 2006558:	00800104 	movi	r2,4
 200655c:	2025883a 	mov	r18,r4
 2006560:	b80d883a 	mov	r6,r23
 2006564:	81001704 	addi	r4,r16,92
 2006568:	000b883a 	mov	r5,zero
 200656c:	80000015 	stw	zero,0(r16)
 2006570:	80000115 	stw	zero,4(r16)
 2006574:	80000215 	stw	zero,8(r16)
 2006578:	8080030d 	sth	r2,12(r16)
 200657c:	80001915 	stw	zero,100(r16)
 2006580:	8000038d 	sth	zero,14(r16)
 2006584:	80000415 	stw	zero,16(r16)
 2006588:	80000515 	stw	zero,20(r16)
 200658c:	80000615 	stw	zero,24(r16)
 2006590:	20081540 	call	2008154 <memset>
 2006594:	05808074 	movhi	r22,513
 2006598:	94400217 	ldw	r17,8(r18)
 200659c:	05408074 	movhi	r21,513
 20065a0:	05008074 	movhi	r20,513
 20065a4:	04c08074 	movhi	r19,513
 20065a8:	b5a65804 	addi	r22,r22,-26272
 20065ac:	ad666f04 	addi	r21,r21,-26180
 20065b0:	a5268e04 	addi	r20,r20,-26056
 20065b4:	9ce6a504 	addi	r19,r19,-25964
 20065b8:	85800815 	stw	r22,32(r16)
 20065bc:	85400915 	stw	r21,36(r16)
 20065c0:	85000a15 	stw	r20,40(r16)
 20065c4:	84c00b15 	stw	r19,44(r16)
 20065c8:	84000715 	stw	r16,28(r16)
 20065cc:	00800284 	movi	r2,10
 20065d0:	8880030d 	sth	r2,12(r17)
 20065d4:	00800044 	movi	r2,1
 20065d8:	b80d883a 	mov	r6,r23
 20065dc:	89001704 	addi	r4,r17,92
 20065e0:	000b883a 	mov	r5,zero
 20065e4:	88000015 	stw	zero,0(r17)
 20065e8:	88000115 	stw	zero,4(r17)
 20065ec:	88000215 	stw	zero,8(r17)
 20065f0:	88001915 	stw	zero,100(r17)
 20065f4:	8880038d 	sth	r2,14(r17)
 20065f8:	88000415 	stw	zero,16(r17)
 20065fc:	88000515 	stw	zero,20(r17)
 2006600:	88000615 	stw	zero,24(r17)
 2006604:	20081540 	call	2008154 <memset>
 2006608:	94000317 	ldw	r16,12(r18)
 200660c:	00800484 	movi	r2,18
 2006610:	8c400715 	stw	r17,28(r17)
 2006614:	8d800815 	stw	r22,32(r17)
 2006618:	8d400915 	stw	r21,36(r17)
 200661c:	8d000a15 	stw	r20,40(r17)
 2006620:	8cc00b15 	stw	r19,44(r17)
 2006624:	8080030d 	sth	r2,12(r16)
 2006628:	00800084 	movi	r2,2
 200662c:	80000015 	stw	zero,0(r16)
 2006630:	80000115 	stw	zero,4(r16)
 2006634:	80000215 	stw	zero,8(r16)
 2006638:	80001915 	stw	zero,100(r16)
 200663c:	8080038d 	sth	r2,14(r16)
 2006640:	80000415 	stw	zero,16(r16)
 2006644:	80000515 	stw	zero,20(r16)
 2006648:	80000615 	stw	zero,24(r16)
 200664c:	b80d883a 	mov	r6,r23
 2006650:	000b883a 	mov	r5,zero
 2006654:	81001704 	addi	r4,r16,92
 2006658:	20081540 	call	2008154 <memset>
 200665c:	00800044 	movi	r2,1
 2006660:	84000715 	stw	r16,28(r16)
 2006664:	85800815 	stw	r22,32(r16)
 2006668:	85400915 	stw	r21,36(r16)
 200666c:	85000a15 	stw	r20,40(r16)
 2006670:	84c00b15 	stw	r19,44(r16)
 2006674:	90800e15 	stw	r2,56(r18)
 2006678:	dfc00817 	ldw	ra,32(sp)
 200667c:	ddc00717 	ldw	r23,28(sp)
 2006680:	dd800617 	ldw	r22,24(sp)
 2006684:	dd400517 	ldw	r21,20(sp)
 2006688:	dd000417 	ldw	r20,16(sp)
 200668c:	dcc00317 	ldw	r19,12(sp)
 2006690:	dc800217 	ldw	r18,8(sp)
 2006694:	dc400117 	ldw	r17,4(sp)
 2006698:	dc000017 	ldw	r16,0(sp)
 200669c:	dec00904 	addi	sp,sp,36
 20066a0:	f800283a 	ret

020066a4 <__fp_lock>:
 20066a4:	0005883a 	mov	r2,zero
 20066a8:	f800283a 	ret

020066ac <__sfmoreglue>:
 20066ac:	defffc04 	addi	sp,sp,-16
 20066b0:	dc800215 	stw	r18,8(sp)
 20066b4:	2825883a 	mov	r18,r5
 20066b8:	dc000015 	stw	r16,0(sp)
 20066bc:	01401a04 	movi	r5,104
 20066c0:	2021883a 	mov	r16,r4
 20066c4:	913fffc4 	addi	r4,r18,-1
 20066c8:	dfc00315 	stw	ra,12(sp)
 20066cc:	dc400115 	stw	r17,4(sp)
 20066d0:	200c9300 	call	200c930 <__mulsi3>
 20066d4:	8009883a 	mov	r4,r16
 20066d8:	11401d04 	addi	r5,r2,116
 20066dc:	1023883a 	mov	r17,r2
 20066e0:	20075c00 	call	20075c0 <_malloc_r>
 20066e4:	1021883a 	mov	r16,r2
 20066e8:	10000726 	beq	r2,zero,2006708 <__sfmoreglue+0x5c>
 20066ec:	11000304 	addi	r4,r2,12
 20066f0:	10000015 	stw	zero,0(r2)
 20066f4:	14800115 	stw	r18,4(r2)
 20066f8:	11000215 	stw	r4,8(r2)
 20066fc:	89801a04 	addi	r6,r17,104
 2006700:	000b883a 	mov	r5,zero
 2006704:	20081540 	call	2008154 <memset>
 2006708:	8005883a 	mov	r2,r16
 200670c:	dfc00317 	ldw	ra,12(sp)
 2006710:	dc800217 	ldw	r18,8(sp)
 2006714:	dc400117 	ldw	r17,4(sp)
 2006718:	dc000017 	ldw	r16,0(sp)
 200671c:	dec00404 	addi	sp,sp,16
 2006720:	f800283a 	ret

02006724 <__sfp>:
 2006724:	defffb04 	addi	sp,sp,-20
 2006728:	dc000015 	stw	r16,0(sp)
 200672c:	04008074 	movhi	r16,513
 2006730:	840fd104 	addi	r16,r16,16196
 2006734:	dcc00315 	stw	r19,12(sp)
 2006738:	2027883a 	mov	r19,r4
 200673c:	81000017 	ldw	r4,0(r16)
 2006740:	dfc00415 	stw	ra,16(sp)
 2006744:	dc800215 	stw	r18,8(sp)
 2006748:	20800e17 	ldw	r2,56(r4)
 200674c:	dc400115 	stw	r17,4(sp)
 2006750:	1000021e 	bne	r2,zero,200675c <__sfp+0x38>
 2006754:	20065080 	call	2006508 <__sinit.part.1>
 2006758:	81000017 	ldw	r4,0(r16)
 200675c:	2480b804 	addi	r18,r4,736
 2006760:	047fffc4 	movi	r17,-1
 2006764:	91000117 	ldw	r4,4(r18)
 2006768:	94000217 	ldw	r16,8(r18)
 200676c:	213fffc4 	addi	r4,r4,-1
 2006770:	20000a16 	blt	r4,zero,200679c <__sfp+0x78>
 2006774:	8080030f 	ldh	r2,12(r16)
 2006778:	10000c26 	beq	r2,zero,20067ac <__sfp+0x88>
 200677c:	80c01d04 	addi	r3,r16,116
 2006780:	00000206 	br	200678c <__sfp+0x68>
 2006784:	18bfe60f 	ldh	r2,-104(r3)
 2006788:	10000826 	beq	r2,zero,20067ac <__sfp+0x88>
 200678c:	213fffc4 	addi	r4,r4,-1
 2006790:	1c3ffd04 	addi	r16,r3,-12
 2006794:	18c01a04 	addi	r3,r3,104
 2006798:	247ffa1e 	bne	r4,r17,2006784 <__alt_data_end+0xff006784>
 200679c:	90800017 	ldw	r2,0(r18)
 20067a0:	10001d26 	beq	r2,zero,2006818 <__sfp+0xf4>
 20067a4:	1025883a 	mov	r18,r2
 20067a8:	003fee06 	br	2006764 <__alt_data_end+0xff006764>
 20067ac:	00bfffc4 	movi	r2,-1
 20067b0:	8080038d 	sth	r2,14(r16)
 20067b4:	00800044 	movi	r2,1
 20067b8:	8080030d 	sth	r2,12(r16)
 20067bc:	80001915 	stw	zero,100(r16)
 20067c0:	80000015 	stw	zero,0(r16)
 20067c4:	80000215 	stw	zero,8(r16)
 20067c8:	80000115 	stw	zero,4(r16)
 20067cc:	80000415 	stw	zero,16(r16)
 20067d0:	80000515 	stw	zero,20(r16)
 20067d4:	80000615 	stw	zero,24(r16)
 20067d8:	01800204 	movi	r6,8
 20067dc:	000b883a 	mov	r5,zero
 20067e0:	81001704 	addi	r4,r16,92
 20067e4:	20081540 	call	2008154 <memset>
 20067e8:	8005883a 	mov	r2,r16
 20067ec:	80000c15 	stw	zero,48(r16)
 20067f0:	80000d15 	stw	zero,52(r16)
 20067f4:	80001115 	stw	zero,68(r16)
 20067f8:	80001215 	stw	zero,72(r16)
 20067fc:	dfc00417 	ldw	ra,16(sp)
 2006800:	dcc00317 	ldw	r19,12(sp)
 2006804:	dc800217 	ldw	r18,8(sp)
 2006808:	dc400117 	ldw	r17,4(sp)
 200680c:	dc000017 	ldw	r16,0(sp)
 2006810:	dec00504 	addi	sp,sp,20
 2006814:	f800283a 	ret
 2006818:	01400104 	movi	r5,4
 200681c:	9809883a 	mov	r4,r19
 2006820:	20066ac0 	call	20066ac <__sfmoreglue>
 2006824:	90800015 	stw	r2,0(r18)
 2006828:	103fde1e 	bne	r2,zero,20067a4 <__alt_data_end+0xff0067a4>
 200682c:	00800304 	movi	r2,12
 2006830:	98800015 	stw	r2,0(r19)
 2006834:	0005883a 	mov	r2,zero
 2006838:	003ff006 	br	20067fc <__alt_data_end+0xff0067fc>

0200683c <_cleanup>:
 200683c:	00808074 	movhi	r2,513
 2006840:	108fd104 	addi	r2,r2,16196
 2006844:	11000017 	ldw	r4,0(r2)
 2006848:	01408074 	movhi	r5,513
 200684c:	296d0004 	addi	r5,r5,-19456
 2006850:	20072641 	jmpi	2007264 <_fwalk_reent>

02006854 <__sinit>:
 2006854:	20800e17 	ldw	r2,56(r4)
 2006858:	10000126 	beq	r2,zero,2006860 <__sinit+0xc>
 200685c:	f800283a 	ret
 2006860:	20065081 	jmpi	2006508 <__sinit.part.1>

02006864 <__sfp_lock_acquire>:
 2006864:	f800283a 	ret

02006868 <__sfp_lock_release>:
 2006868:	f800283a 	ret

0200686c <__sinit_lock_acquire>:
 200686c:	f800283a 	ret

02006870 <__sinit_lock_release>:
 2006870:	f800283a 	ret

02006874 <__fp_lock_all>:
 2006874:	00808074 	movhi	r2,513
 2006878:	108fd204 	addi	r2,r2,16200
 200687c:	11000017 	ldw	r4,0(r2)
 2006880:	01408034 	movhi	r5,512
 2006884:	2959a904 	addi	r5,r5,26276
 2006888:	20071a01 	jmpi	20071a0 <_fwalk>

0200688c <__fp_unlock_all>:
 200688c:	00808074 	movhi	r2,513
 2006890:	108fd204 	addi	r2,r2,16200
 2006894:	11000017 	ldw	r4,0(r2)
 2006898:	01408034 	movhi	r5,512
 200689c:	29593d04 	addi	r5,r5,25844
 20068a0:	20071a01 	jmpi	20071a0 <_fwalk>

020068a4 <_malloc_trim_r>:
 20068a4:	defffb04 	addi	sp,sp,-20
 20068a8:	dcc00315 	stw	r19,12(sp)
 20068ac:	04c08074 	movhi	r19,513
 20068b0:	dc800215 	stw	r18,8(sp)
 20068b4:	dc400115 	stw	r17,4(sp)
 20068b8:	dc000015 	stw	r16,0(sp)
 20068bc:	dfc00415 	stw	ra,16(sp)
 20068c0:	2821883a 	mov	r16,r5
 20068c4:	9cca4d04 	addi	r19,r19,10548
 20068c8:	2025883a 	mov	r18,r4
 20068cc:	200f7980 	call	200f798 <__malloc_lock>
 20068d0:	98800217 	ldw	r2,8(r19)
 20068d4:	14400117 	ldw	r17,4(r2)
 20068d8:	00bfff04 	movi	r2,-4
 20068dc:	88a2703a 	and	r17,r17,r2
 20068e0:	8c21c83a 	sub	r16,r17,r16
 20068e4:	8403fbc4 	addi	r16,r16,4079
 20068e8:	8020d33a 	srli	r16,r16,12
 20068ec:	0083ffc4 	movi	r2,4095
 20068f0:	843fffc4 	addi	r16,r16,-1
 20068f4:	8020933a 	slli	r16,r16,12
 20068f8:	1400060e 	bge	r2,r16,2006914 <_malloc_trim_r+0x70>
 20068fc:	000b883a 	mov	r5,zero
 2006900:	9009883a 	mov	r4,r18
 2006904:	200990c0 	call	200990c <_sbrk_r>
 2006908:	98c00217 	ldw	r3,8(r19)
 200690c:	1c47883a 	add	r3,r3,r17
 2006910:	10c00a26 	beq	r2,r3,200693c <_malloc_trim_r+0x98>
 2006914:	9009883a 	mov	r4,r18
 2006918:	200f7bc0 	call	200f7bc <__malloc_unlock>
 200691c:	0005883a 	mov	r2,zero
 2006920:	dfc00417 	ldw	ra,16(sp)
 2006924:	dcc00317 	ldw	r19,12(sp)
 2006928:	dc800217 	ldw	r18,8(sp)
 200692c:	dc400117 	ldw	r17,4(sp)
 2006930:	dc000017 	ldw	r16,0(sp)
 2006934:	dec00504 	addi	sp,sp,20
 2006938:	f800283a 	ret
 200693c:	040bc83a 	sub	r5,zero,r16
 2006940:	9009883a 	mov	r4,r18
 2006944:	200990c0 	call	200990c <_sbrk_r>
 2006948:	00ffffc4 	movi	r3,-1
 200694c:	10c00d26 	beq	r2,r3,2006984 <_malloc_trim_r+0xe0>
 2006950:	00c08074 	movhi	r3,513
 2006954:	18d6ab04 	addi	r3,r3,23212
 2006958:	18800017 	ldw	r2,0(r3)
 200695c:	99000217 	ldw	r4,8(r19)
 2006960:	8c23c83a 	sub	r17,r17,r16
 2006964:	8c400054 	ori	r17,r17,1
 2006968:	1421c83a 	sub	r16,r2,r16
 200696c:	24400115 	stw	r17,4(r4)
 2006970:	9009883a 	mov	r4,r18
 2006974:	1c000015 	stw	r16,0(r3)
 2006978:	200f7bc0 	call	200f7bc <__malloc_unlock>
 200697c:	00800044 	movi	r2,1
 2006980:	003fe706 	br	2006920 <__alt_data_end+0xff006920>
 2006984:	000b883a 	mov	r5,zero
 2006988:	9009883a 	mov	r4,r18
 200698c:	200990c0 	call	200990c <_sbrk_r>
 2006990:	99000217 	ldw	r4,8(r19)
 2006994:	014003c4 	movi	r5,15
 2006998:	1107c83a 	sub	r3,r2,r4
 200699c:	28ffdd0e 	bge	r5,r3,2006914 <__alt_data_end+0xff006914>
 20069a0:	01408074 	movhi	r5,513
 20069a4:	294fd404 	addi	r5,r5,16208
 20069a8:	29400017 	ldw	r5,0(r5)
 20069ac:	18c00054 	ori	r3,r3,1
 20069b0:	20c00115 	stw	r3,4(r4)
 20069b4:	00c08074 	movhi	r3,513
 20069b8:	1145c83a 	sub	r2,r2,r5
 20069bc:	18d6ab04 	addi	r3,r3,23212
 20069c0:	18800015 	stw	r2,0(r3)
 20069c4:	003fd306 	br	2006914 <__alt_data_end+0xff006914>

020069c8 <_free_r>:
 20069c8:	28004126 	beq	r5,zero,2006ad0 <_free_r+0x108>
 20069cc:	defffd04 	addi	sp,sp,-12
 20069d0:	dc400115 	stw	r17,4(sp)
 20069d4:	dc000015 	stw	r16,0(sp)
 20069d8:	2023883a 	mov	r17,r4
 20069dc:	2821883a 	mov	r16,r5
 20069e0:	dfc00215 	stw	ra,8(sp)
 20069e4:	200f7980 	call	200f798 <__malloc_lock>
 20069e8:	81ffff17 	ldw	r7,-4(r16)
 20069ec:	00bfff84 	movi	r2,-2
 20069f0:	01008074 	movhi	r4,513
 20069f4:	81bffe04 	addi	r6,r16,-8
 20069f8:	3884703a 	and	r2,r7,r2
 20069fc:	210a4d04 	addi	r4,r4,10548
 2006a00:	308b883a 	add	r5,r6,r2
 2006a04:	2a400117 	ldw	r9,4(r5)
 2006a08:	22000217 	ldw	r8,8(r4)
 2006a0c:	00ffff04 	movi	r3,-4
 2006a10:	48c6703a 	and	r3,r9,r3
 2006a14:	2a005726 	beq	r5,r8,2006b74 <_free_r+0x1ac>
 2006a18:	28c00115 	stw	r3,4(r5)
 2006a1c:	39c0004c 	andi	r7,r7,1
 2006a20:	3800091e 	bne	r7,zero,2006a48 <_free_r+0x80>
 2006a24:	823ffe17 	ldw	r8,-8(r16)
 2006a28:	22400204 	addi	r9,r4,8
 2006a2c:	320dc83a 	sub	r6,r6,r8
 2006a30:	31c00217 	ldw	r7,8(r6)
 2006a34:	1205883a 	add	r2,r2,r8
 2006a38:	3a406526 	beq	r7,r9,2006bd0 <_free_r+0x208>
 2006a3c:	32000317 	ldw	r8,12(r6)
 2006a40:	3a000315 	stw	r8,12(r7)
 2006a44:	41c00215 	stw	r7,8(r8)
 2006a48:	28cf883a 	add	r7,r5,r3
 2006a4c:	39c00117 	ldw	r7,4(r7)
 2006a50:	39c0004c 	andi	r7,r7,1
 2006a54:	38003a26 	beq	r7,zero,2006b40 <_free_r+0x178>
 2006a58:	10c00054 	ori	r3,r2,1
 2006a5c:	30c00115 	stw	r3,4(r6)
 2006a60:	3087883a 	add	r3,r6,r2
 2006a64:	18800015 	stw	r2,0(r3)
 2006a68:	00c07fc4 	movi	r3,511
 2006a6c:	18801936 	bltu	r3,r2,2006ad4 <_free_r+0x10c>
 2006a70:	1004d0fa 	srli	r2,r2,3
 2006a74:	01c00044 	movi	r7,1
 2006a78:	21400117 	ldw	r5,4(r4)
 2006a7c:	10c00044 	addi	r3,r2,1
 2006a80:	18c7883a 	add	r3,r3,r3
 2006a84:	1005d0ba 	srai	r2,r2,2
 2006a88:	18c7883a 	add	r3,r3,r3
 2006a8c:	18c7883a 	add	r3,r3,r3
 2006a90:	1907883a 	add	r3,r3,r4
 2006a94:	3884983a 	sll	r2,r7,r2
 2006a98:	19c00017 	ldw	r7,0(r3)
 2006a9c:	1a3ffe04 	addi	r8,r3,-8
 2006aa0:	1144b03a 	or	r2,r2,r5
 2006aa4:	32000315 	stw	r8,12(r6)
 2006aa8:	31c00215 	stw	r7,8(r6)
 2006aac:	20800115 	stw	r2,4(r4)
 2006ab0:	19800015 	stw	r6,0(r3)
 2006ab4:	39800315 	stw	r6,12(r7)
 2006ab8:	8809883a 	mov	r4,r17
 2006abc:	dfc00217 	ldw	ra,8(sp)
 2006ac0:	dc400117 	ldw	r17,4(sp)
 2006ac4:	dc000017 	ldw	r16,0(sp)
 2006ac8:	dec00304 	addi	sp,sp,12
 2006acc:	200f7bc1 	jmpi	200f7bc <__malloc_unlock>
 2006ad0:	f800283a 	ret
 2006ad4:	100ad27a 	srli	r5,r2,9
 2006ad8:	00c00104 	movi	r3,4
 2006adc:	19404a36 	bltu	r3,r5,2006c08 <_free_r+0x240>
 2006ae0:	100ad1ba 	srli	r5,r2,6
 2006ae4:	28c00e44 	addi	r3,r5,57
 2006ae8:	18c7883a 	add	r3,r3,r3
 2006aec:	29400e04 	addi	r5,r5,56
 2006af0:	18c7883a 	add	r3,r3,r3
 2006af4:	18c7883a 	add	r3,r3,r3
 2006af8:	1909883a 	add	r4,r3,r4
 2006afc:	20c00017 	ldw	r3,0(r4)
 2006b00:	01c08074 	movhi	r7,513
 2006b04:	213ffe04 	addi	r4,r4,-8
 2006b08:	39ca4d04 	addi	r7,r7,10548
 2006b0c:	20c04426 	beq	r4,r3,2006c20 <_free_r+0x258>
 2006b10:	01ffff04 	movi	r7,-4
 2006b14:	19400117 	ldw	r5,4(r3)
 2006b18:	29ca703a 	and	r5,r5,r7
 2006b1c:	1140022e 	bgeu	r2,r5,2006b28 <_free_r+0x160>
 2006b20:	18c00217 	ldw	r3,8(r3)
 2006b24:	20fffb1e 	bne	r4,r3,2006b14 <__alt_data_end+0xff006b14>
 2006b28:	19000317 	ldw	r4,12(r3)
 2006b2c:	31000315 	stw	r4,12(r6)
 2006b30:	30c00215 	stw	r3,8(r6)
 2006b34:	21800215 	stw	r6,8(r4)
 2006b38:	19800315 	stw	r6,12(r3)
 2006b3c:	003fde06 	br	2006ab8 <__alt_data_end+0xff006ab8>
 2006b40:	29c00217 	ldw	r7,8(r5)
 2006b44:	10c5883a 	add	r2,r2,r3
 2006b48:	00c08074 	movhi	r3,513
 2006b4c:	18ca4f04 	addi	r3,r3,10556
 2006b50:	38c03b26 	beq	r7,r3,2006c40 <_free_r+0x278>
 2006b54:	2a000317 	ldw	r8,12(r5)
 2006b58:	11400054 	ori	r5,r2,1
 2006b5c:	3087883a 	add	r3,r6,r2
 2006b60:	3a000315 	stw	r8,12(r7)
 2006b64:	41c00215 	stw	r7,8(r8)
 2006b68:	31400115 	stw	r5,4(r6)
 2006b6c:	18800015 	stw	r2,0(r3)
 2006b70:	003fbd06 	br	2006a68 <__alt_data_end+0xff006a68>
 2006b74:	39c0004c 	andi	r7,r7,1
 2006b78:	10c5883a 	add	r2,r2,r3
 2006b7c:	3800071e 	bne	r7,zero,2006b9c <_free_r+0x1d4>
 2006b80:	81fffe17 	ldw	r7,-8(r16)
 2006b84:	31cdc83a 	sub	r6,r6,r7
 2006b88:	30c00317 	ldw	r3,12(r6)
 2006b8c:	31400217 	ldw	r5,8(r6)
 2006b90:	11c5883a 	add	r2,r2,r7
 2006b94:	28c00315 	stw	r3,12(r5)
 2006b98:	19400215 	stw	r5,8(r3)
 2006b9c:	10c00054 	ori	r3,r2,1
 2006ba0:	30c00115 	stw	r3,4(r6)
 2006ba4:	00c08074 	movhi	r3,513
 2006ba8:	18cfd504 	addi	r3,r3,16212
 2006bac:	18c00017 	ldw	r3,0(r3)
 2006bb0:	21800215 	stw	r6,8(r4)
 2006bb4:	10ffc036 	bltu	r2,r3,2006ab8 <__alt_data_end+0xff006ab8>
 2006bb8:	00808074 	movhi	r2,513
 2006bbc:	1096a204 	addi	r2,r2,23176
 2006bc0:	11400017 	ldw	r5,0(r2)
 2006bc4:	8809883a 	mov	r4,r17
 2006bc8:	20068a40 	call	20068a4 <_malloc_trim_r>
 2006bcc:	003fba06 	br	2006ab8 <__alt_data_end+0xff006ab8>
 2006bd0:	28c9883a 	add	r4,r5,r3
 2006bd4:	21000117 	ldw	r4,4(r4)
 2006bd8:	2100004c 	andi	r4,r4,1
 2006bdc:	2000391e 	bne	r4,zero,2006cc4 <_free_r+0x2fc>
 2006be0:	29c00217 	ldw	r7,8(r5)
 2006be4:	29000317 	ldw	r4,12(r5)
 2006be8:	1885883a 	add	r2,r3,r2
 2006bec:	10c00054 	ori	r3,r2,1
 2006bf0:	39000315 	stw	r4,12(r7)
 2006bf4:	21c00215 	stw	r7,8(r4)
 2006bf8:	30c00115 	stw	r3,4(r6)
 2006bfc:	308d883a 	add	r6,r6,r2
 2006c00:	30800015 	stw	r2,0(r6)
 2006c04:	003fac06 	br	2006ab8 <__alt_data_end+0xff006ab8>
 2006c08:	00c00504 	movi	r3,20
 2006c0c:	19401536 	bltu	r3,r5,2006c64 <_free_r+0x29c>
 2006c10:	28c01704 	addi	r3,r5,92
 2006c14:	18c7883a 	add	r3,r3,r3
 2006c18:	294016c4 	addi	r5,r5,91
 2006c1c:	003fb406 	br	2006af0 <__alt_data_end+0xff006af0>
 2006c20:	280bd0ba 	srai	r5,r5,2
 2006c24:	00c00044 	movi	r3,1
 2006c28:	38800117 	ldw	r2,4(r7)
 2006c2c:	194a983a 	sll	r5,r3,r5
 2006c30:	2007883a 	mov	r3,r4
 2006c34:	2884b03a 	or	r2,r5,r2
 2006c38:	38800115 	stw	r2,4(r7)
 2006c3c:	003fbb06 	br	2006b2c <__alt_data_end+0xff006b2c>
 2006c40:	21800515 	stw	r6,20(r4)
 2006c44:	21800415 	stw	r6,16(r4)
 2006c48:	10c00054 	ori	r3,r2,1
 2006c4c:	31c00315 	stw	r7,12(r6)
 2006c50:	31c00215 	stw	r7,8(r6)
 2006c54:	30c00115 	stw	r3,4(r6)
 2006c58:	308d883a 	add	r6,r6,r2
 2006c5c:	30800015 	stw	r2,0(r6)
 2006c60:	003f9506 	br	2006ab8 <__alt_data_end+0xff006ab8>
 2006c64:	00c01504 	movi	r3,84
 2006c68:	19400536 	bltu	r3,r5,2006c80 <_free_r+0x2b8>
 2006c6c:	100ad33a 	srli	r5,r2,12
 2006c70:	28c01bc4 	addi	r3,r5,111
 2006c74:	18c7883a 	add	r3,r3,r3
 2006c78:	29401b84 	addi	r5,r5,110
 2006c7c:	003f9c06 	br	2006af0 <__alt_data_end+0xff006af0>
 2006c80:	00c05504 	movi	r3,340
 2006c84:	19400536 	bltu	r3,r5,2006c9c <_free_r+0x2d4>
 2006c88:	100ad3fa 	srli	r5,r2,15
 2006c8c:	28c01e04 	addi	r3,r5,120
 2006c90:	18c7883a 	add	r3,r3,r3
 2006c94:	29401dc4 	addi	r5,r5,119
 2006c98:	003f9506 	br	2006af0 <__alt_data_end+0xff006af0>
 2006c9c:	00c15504 	movi	r3,1364
 2006ca0:	19400536 	bltu	r3,r5,2006cb8 <_free_r+0x2f0>
 2006ca4:	100ad4ba 	srli	r5,r2,18
 2006ca8:	28c01f44 	addi	r3,r5,125
 2006cac:	18c7883a 	add	r3,r3,r3
 2006cb0:	29401f04 	addi	r5,r5,124
 2006cb4:	003f8e06 	br	2006af0 <__alt_data_end+0xff006af0>
 2006cb8:	00c03f84 	movi	r3,254
 2006cbc:	01401f84 	movi	r5,126
 2006cc0:	003f8b06 	br	2006af0 <__alt_data_end+0xff006af0>
 2006cc4:	10c00054 	ori	r3,r2,1
 2006cc8:	30c00115 	stw	r3,4(r6)
 2006ccc:	308d883a 	add	r6,r6,r2
 2006cd0:	30800015 	stw	r2,0(r6)
 2006cd4:	003f7806 	br	2006ab8 <__alt_data_end+0xff006ab8>

02006cd8 <__sfvwrite_r>:
 2006cd8:	30800217 	ldw	r2,8(r6)
 2006cdc:	10006726 	beq	r2,zero,2006e7c <__sfvwrite_r+0x1a4>
 2006ce0:	28c0030b 	ldhu	r3,12(r5)
 2006ce4:	defff404 	addi	sp,sp,-48
 2006ce8:	dd400715 	stw	r21,28(sp)
 2006cec:	dd000615 	stw	r20,24(sp)
 2006cf0:	dc000215 	stw	r16,8(sp)
 2006cf4:	dfc00b15 	stw	ra,44(sp)
 2006cf8:	df000a15 	stw	fp,40(sp)
 2006cfc:	ddc00915 	stw	r23,36(sp)
 2006d00:	dd800815 	stw	r22,32(sp)
 2006d04:	dcc00515 	stw	r19,20(sp)
 2006d08:	dc800415 	stw	r18,16(sp)
 2006d0c:	dc400315 	stw	r17,12(sp)
 2006d10:	1880020c 	andi	r2,r3,8
 2006d14:	2821883a 	mov	r16,r5
 2006d18:	202b883a 	mov	r21,r4
 2006d1c:	3029883a 	mov	r20,r6
 2006d20:	10002726 	beq	r2,zero,2006dc0 <__sfvwrite_r+0xe8>
 2006d24:	28800417 	ldw	r2,16(r5)
 2006d28:	10002526 	beq	r2,zero,2006dc0 <__sfvwrite_r+0xe8>
 2006d2c:	1880008c 	andi	r2,r3,2
 2006d30:	a4400017 	ldw	r17,0(r20)
 2006d34:	10002a26 	beq	r2,zero,2006de0 <__sfvwrite_r+0x108>
 2006d38:	05a00034 	movhi	r22,32768
 2006d3c:	0027883a 	mov	r19,zero
 2006d40:	0025883a 	mov	r18,zero
 2006d44:	b5bf0004 	addi	r22,r22,-1024
 2006d48:	980d883a 	mov	r6,r19
 2006d4c:	a809883a 	mov	r4,r21
 2006d50:	90004626 	beq	r18,zero,2006e6c <__sfvwrite_r+0x194>
 2006d54:	900f883a 	mov	r7,r18
 2006d58:	b480022e 	bgeu	r22,r18,2006d64 <__sfvwrite_r+0x8c>
 2006d5c:	01e00034 	movhi	r7,32768
 2006d60:	39ff0004 	addi	r7,r7,-1024
 2006d64:	80800917 	ldw	r2,36(r16)
 2006d68:	81400717 	ldw	r5,28(r16)
 2006d6c:	103ee83a 	callr	r2
 2006d70:	00805a0e 	bge	zero,r2,2006edc <__sfvwrite_r+0x204>
 2006d74:	a0c00217 	ldw	r3,8(r20)
 2006d78:	98a7883a 	add	r19,r19,r2
 2006d7c:	90a5c83a 	sub	r18,r18,r2
 2006d80:	1885c83a 	sub	r2,r3,r2
 2006d84:	a0800215 	stw	r2,8(r20)
 2006d88:	103fef1e 	bne	r2,zero,2006d48 <__alt_data_end+0xff006d48>
 2006d8c:	0005883a 	mov	r2,zero
 2006d90:	dfc00b17 	ldw	ra,44(sp)
 2006d94:	df000a17 	ldw	fp,40(sp)
 2006d98:	ddc00917 	ldw	r23,36(sp)
 2006d9c:	dd800817 	ldw	r22,32(sp)
 2006da0:	dd400717 	ldw	r21,28(sp)
 2006da4:	dd000617 	ldw	r20,24(sp)
 2006da8:	dcc00517 	ldw	r19,20(sp)
 2006dac:	dc800417 	ldw	r18,16(sp)
 2006db0:	dc400317 	ldw	r17,12(sp)
 2006db4:	dc000217 	ldw	r16,8(sp)
 2006db8:	dec00c04 	addi	sp,sp,48
 2006dbc:	f800283a 	ret
 2006dc0:	800b883a 	mov	r5,r16
 2006dc4:	a809883a 	mov	r4,r21
 2006dc8:	20048480 	call	2004848 <__swsetup_r>
 2006dcc:	1000ee1e 	bne	r2,zero,2007188 <__sfvwrite_r+0x4b0>
 2006dd0:	80c0030b 	ldhu	r3,12(r16)
 2006dd4:	a4400017 	ldw	r17,0(r20)
 2006dd8:	1880008c 	andi	r2,r3,2
 2006ddc:	103fd61e 	bne	r2,zero,2006d38 <__alt_data_end+0xff006d38>
 2006de0:	1880004c 	andi	r2,r3,1
 2006de4:	1000421e 	bne	r2,zero,2006ef0 <__sfvwrite_r+0x218>
 2006de8:	0039883a 	mov	fp,zero
 2006dec:	0025883a 	mov	r18,zero
 2006df0:	90001a26 	beq	r18,zero,2006e5c <__sfvwrite_r+0x184>
 2006df4:	1880800c 	andi	r2,r3,512
 2006df8:	84c00217 	ldw	r19,8(r16)
 2006dfc:	10002126 	beq	r2,zero,2006e84 <__sfvwrite_r+0x1ac>
 2006e00:	982f883a 	mov	r23,r19
 2006e04:	94c09636 	bltu	r18,r19,2007060 <__sfvwrite_r+0x388>
 2006e08:	1881200c 	andi	r2,r3,1152
 2006e0c:	1000a11e 	bne	r2,zero,2007094 <__sfvwrite_r+0x3bc>
 2006e10:	81000017 	ldw	r4,0(r16)
 2006e14:	b80d883a 	mov	r6,r23
 2006e18:	e00b883a 	mov	r5,fp
 2006e1c:	2007ff80 	call	2007ff8 <memmove>
 2006e20:	80c00217 	ldw	r3,8(r16)
 2006e24:	81000017 	ldw	r4,0(r16)
 2006e28:	9005883a 	mov	r2,r18
 2006e2c:	1ce7c83a 	sub	r19,r3,r19
 2006e30:	25cf883a 	add	r7,r4,r23
 2006e34:	84c00215 	stw	r19,8(r16)
 2006e38:	81c00015 	stw	r7,0(r16)
 2006e3c:	a0c00217 	ldw	r3,8(r20)
 2006e40:	e0b9883a 	add	fp,fp,r2
 2006e44:	90a5c83a 	sub	r18,r18,r2
 2006e48:	18a7c83a 	sub	r19,r3,r2
 2006e4c:	a4c00215 	stw	r19,8(r20)
 2006e50:	983fce26 	beq	r19,zero,2006d8c <__alt_data_end+0xff006d8c>
 2006e54:	80c0030b 	ldhu	r3,12(r16)
 2006e58:	903fe61e 	bne	r18,zero,2006df4 <__alt_data_end+0xff006df4>
 2006e5c:	8f000017 	ldw	fp,0(r17)
 2006e60:	8c800117 	ldw	r18,4(r17)
 2006e64:	8c400204 	addi	r17,r17,8
 2006e68:	003fe106 	br	2006df0 <__alt_data_end+0xff006df0>
 2006e6c:	8cc00017 	ldw	r19,0(r17)
 2006e70:	8c800117 	ldw	r18,4(r17)
 2006e74:	8c400204 	addi	r17,r17,8
 2006e78:	003fb306 	br	2006d48 <__alt_data_end+0xff006d48>
 2006e7c:	0005883a 	mov	r2,zero
 2006e80:	f800283a 	ret
 2006e84:	81000017 	ldw	r4,0(r16)
 2006e88:	80800417 	ldw	r2,16(r16)
 2006e8c:	11005a36 	bltu	r2,r4,2006ff8 <__sfvwrite_r+0x320>
 2006e90:	85c00517 	ldw	r23,20(r16)
 2006e94:	95c05836 	bltu	r18,r23,2006ff8 <__sfvwrite_r+0x320>
 2006e98:	00a00034 	movhi	r2,32768
 2006e9c:	10bfffc4 	addi	r2,r2,-1
 2006ea0:	9009883a 	mov	r4,r18
 2006ea4:	1480012e 	bgeu	r2,r18,2006eac <__sfvwrite_r+0x1d4>
 2006ea8:	1009883a 	mov	r4,r2
 2006eac:	b80b883a 	mov	r5,r23
 2006eb0:	200c77c0 	call	200c77c <__divsi3>
 2006eb4:	b80b883a 	mov	r5,r23
 2006eb8:	1009883a 	mov	r4,r2
 2006ebc:	200c9300 	call	200c930 <__mulsi3>
 2006ec0:	81400717 	ldw	r5,28(r16)
 2006ec4:	80c00917 	ldw	r3,36(r16)
 2006ec8:	100f883a 	mov	r7,r2
 2006ecc:	e00d883a 	mov	r6,fp
 2006ed0:	a809883a 	mov	r4,r21
 2006ed4:	183ee83a 	callr	r3
 2006ed8:	00bfd816 	blt	zero,r2,2006e3c <__alt_data_end+0xff006e3c>
 2006edc:	8080030b 	ldhu	r2,12(r16)
 2006ee0:	10801014 	ori	r2,r2,64
 2006ee4:	8080030d 	sth	r2,12(r16)
 2006ee8:	00bfffc4 	movi	r2,-1
 2006eec:	003fa806 	br	2006d90 <__alt_data_end+0xff006d90>
 2006ef0:	0027883a 	mov	r19,zero
 2006ef4:	0011883a 	mov	r8,zero
 2006ef8:	0039883a 	mov	fp,zero
 2006efc:	0025883a 	mov	r18,zero
 2006f00:	90001f26 	beq	r18,zero,2006f80 <__sfvwrite_r+0x2a8>
 2006f04:	40005a26 	beq	r8,zero,2007070 <__sfvwrite_r+0x398>
 2006f08:	982d883a 	mov	r22,r19
 2006f0c:	94c0012e 	bgeu	r18,r19,2006f14 <__sfvwrite_r+0x23c>
 2006f10:	902d883a 	mov	r22,r18
 2006f14:	81000017 	ldw	r4,0(r16)
 2006f18:	80800417 	ldw	r2,16(r16)
 2006f1c:	b02f883a 	mov	r23,r22
 2006f20:	81c00517 	ldw	r7,20(r16)
 2006f24:	1100032e 	bgeu	r2,r4,2006f34 <__sfvwrite_r+0x25c>
 2006f28:	80c00217 	ldw	r3,8(r16)
 2006f2c:	38c7883a 	add	r3,r7,r3
 2006f30:	1d801816 	blt	r3,r22,2006f94 <__sfvwrite_r+0x2bc>
 2006f34:	b1c03e16 	blt	r22,r7,2007030 <__sfvwrite_r+0x358>
 2006f38:	80800917 	ldw	r2,36(r16)
 2006f3c:	81400717 	ldw	r5,28(r16)
 2006f40:	e00d883a 	mov	r6,fp
 2006f44:	da000115 	stw	r8,4(sp)
 2006f48:	a809883a 	mov	r4,r21
 2006f4c:	103ee83a 	callr	r2
 2006f50:	102f883a 	mov	r23,r2
 2006f54:	da000117 	ldw	r8,4(sp)
 2006f58:	00bfe00e 	bge	zero,r2,2006edc <__alt_data_end+0xff006edc>
 2006f5c:	9de7c83a 	sub	r19,r19,r23
 2006f60:	98001f26 	beq	r19,zero,2006fe0 <__sfvwrite_r+0x308>
 2006f64:	a0800217 	ldw	r2,8(r20)
 2006f68:	e5f9883a 	add	fp,fp,r23
 2006f6c:	95e5c83a 	sub	r18,r18,r23
 2006f70:	15efc83a 	sub	r23,r2,r23
 2006f74:	a5c00215 	stw	r23,8(r20)
 2006f78:	b83f8426 	beq	r23,zero,2006d8c <__alt_data_end+0xff006d8c>
 2006f7c:	903fe11e 	bne	r18,zero,2006f04 <__alt_data_end+0xff006f04>
 2006f80:	8f000017 	ldw	fp,0(r17)
 2006f84:	8c800117 	ldw	r18,4(r17)
 2006f88:	0011883a 	mov	r8,zero
 2006f8c:	8c400204 	addi	r17,r17,8
 2006f90:	003fdb06 	br	2006f00 <__alt_data_end+0xff006f00>
 2006f94:	180d883a 	mov	r6,r3
 2006f98:	e00b883a 	mov	r5,fp
 2006f9c:	da000115 	stw	r8,4(sp)
 2006fa0:	d8c00015 	stw	r3,0(sp)
 2006fa4:	2007ff80 	call	2007ff8 <memmove>
 2006fa8:	d8c00017 	ldw	r3,0(sp)
 2006fac:	80800017 	ldw	r2,0(r16)
 2006fb0:	800b883a 	mov	r5,r16
 2006fb4:	a809883a 	mov	r4,r21
 2006fb8:	10c5883a 	add	r2,r2,r3
 2006fbc:	80800015 	stw	r2,0(r16)
 2006fc0:	d8c00015 	stw	r3,0(sp)
 2006fc4:	20064680 	call	2006468 <_fflush_r>
 2006fc8:	d8c00017 	ldw	r3,0(sp)
 2006fcc:	da000117 	ldw	r8,4(sp)
 2006fd0:	103fc21e 	bne	r2,zero,2006edc <__alt_data_end+0xff006edc>
 2006fd4:	182f883a 	mov	r23,r3
 2006fd8:	9de7c83a 	sub	r19,r19,r23
 2006fdc:	983fe11e 	bne	r19,zero,2006f64 <__alt_data_end+0xff006f64>
 2006fe0:	800b883a 	mov	r5,r16
 2006fe4:	a809883a 	mov	r4,r21
 2006fe8:	20064680 	call	2006468 <_fflush_r>
 2006fec:	103fbb1e 	bne	r2,zero,2006edc <__alt_data_end+0xff006edc>
 2006ff0:	0011883a 	mov	r8,zero
 2006ff4:	003fdb06 	br	2006f64 <__alt_data_end+0xff006f64>
 2006ff8:	94c0012e 	bgeu	r18,r19,2007000 <__sfvwrite_r+0x328>
 2006ffc:	9027883a 	mov	r19,r18
 2007000:	980d883a 	mov	r6,r19
 2007004:	e00b883a 	mov	r5,fp
 2007008:	2007ff80 	call	2007ff8 <memmove>
 200700c:	80800217 	ldw	r2,8(r16)
 2007010:	80c00017 	ldw	r3,0(r16)
 2007014:	14c5c83a 	sub	r2,r2,r19
 2007018:	1cc7883a 	add	r3,r3,r19
 200701c:	80800215 	stw	r2,8(r16)
 2007020:	80c00015 	stw	r3,0(r16)
 2007024:	10004326 	beq	r2,zero,2007134 <__sfvwrite_r+0x45c>
 2007028:	9805883a 	mov	r2,r19
 200702c:	003f8306 	br	2006e3c <__alt_data_end+0xff006e3c>
 2007030:	b00d883a 	mov	r6,r22
 2007034:	e00b883a 	mov	r5,fp
 2007038:	da000115 	stw	r8,4(sp)
 200703c:	2007ff80 	call	2007ff8 <memmove>
 2007040:	80800217 	ldw	r2,8(r16)
 2007044:	80c00017 	ldw	r3,0(r16)
 2007048:	da000117 	ldw	r8,4(sp)
 200704c:	1585c83a 	sub	r2,r2,r22
 2007050:	1dad883a 	add	r22,r3,r22
 2007054:	80800215 	stw	r2,8(r16)
 2007058:	85800015 	stw	r22,0(r16)
 200705c:	003fbf06 	br	2006f5c <__alt_data_end+0xff006f5c>
 2007060:	81000017 	ldw	r4,0(r16)
 2007064:	9027883a 	mov	r19,r18
 2007068:	902f883a 	mov	r23,r18
 200706c:	003f6906 	br	2006e14 <__alt_data_end+0xff006e14>
 2007070:	900d883a 	mov	r6,r18
 2007074:	01400284 	movi	r5,10
 2007078:	e009883a 	mov	r4,fp
 200707c:	2007dcc0 	call	2007dcc <memchr>
 2007080:	10003e26 	beq	r2,zero,200717c <__sfvwrite_r+0x4a4>
 2007084:	10800044 	addi	r2,r2,1
 2007088:	1727c83a 	sub	r19,r2,fp
 200708c:	02000044 	movi	r8,1
 2007090:	003f9d06 	br	2006f08 <__alt_data_end+0xff006f08>
 2007094:	80800517 	ldw	r2,20(r16)
 2007098:	81400417 	ldw	r5,16(r16)
 200709c:	81c00017 	ldw	r7,0(r16)
 20070a0:	10a7883a 	add	r19,r2,r2
 20070a4:	9885883a 	add	r2,r19,r2
 20070a8:	1026d7fa 	srli	r19,r2,31
 20070ac:	396dc83a 	sub	r22,r7,r5
 20070b0:	b1000044 	addi	r4,r22,1
 20070b4:	9885883a 	add	r2,r19,r2
 20070b8:	1027d07a 	srai	r19,r2,1
 20070bc:	2485883a 	add	r2,r4,r18
 20070c0:	980d883a 	mov	r6,r19
 20070c4:	9880022e 	bgeu	r19,r2,20070d0 <__sfvwrite_r+0x3f8>
 20070c8:	1027883a 	mov	r19,r2
 20070cc:	100d883a 	mov	r6,r2
 20070d0:	18c1000c 	andi	r3,r3,1024
 20070d4:	18001c26 	beq	r3,zero,2007148 <__sfvwrite_r+0x470>
 20070d8:	300b883a 	mov	r5,r6
 20070dc:	a809883a 	mov	r4,r21
 20070e0:	20075c00 	call	20075c0 <_malloc_r>
 20070e4:	102f883a 	mov	r23,r2
 20070e8:	10002926 	beq	r2,zero,2007190 <__sfvwrite_r+0x4b8>
 20070ec:	81400417 	ldw	r5,16(r16)
 20070f0:	b00d883a 	mov	r6,r22
 20070f4:	1009883a 	mov	r4,r2
 20070f8:	2007eb00 	call	2007eb0 <memcpy>
 20070fc:	8080030b 	ldhu	r2,12(r16)
 2007100:	00fedfc4 	movi	r3,-1153
 2007104:	10c4703a 	and	r2,r2,r3
 2007108:	10802014 	ori	r2,r2,128
 200710c:	8080030d 	sth	r2,12(r16)
 2007110:	bd89883a 	add	r4,r23,r22
 2007114:	9d8fc83a 	sub	r7,r19,r22
 2007118:	85c00415 	stw	r23,16(r16)
 200711c:	84c00515 	stw	r19,20(r16)
 2007120:	81000015 	stw	r4,0(r16)
 2007124:	9027883a 	mov	r19,r18
 2007128:	81c00215 	stw	r7,8(r16)
 200712c:	902f883a 	mov	r23,r18
 2007130:	003f3806 	br	2006e14 <__alt_data_end+0xff006e14>
 2007134:	800b883a 	mov	r5,r16
 2007138:	a809883a 	mov	r4,r21
 200713c:	20064680 	call	2006468 <_fflush_r>
 2007140:	103fb926 	beq	r2,zero,2007028 <__alt_data_end+0xff007028>
 2007144:	003f6506 	br	2006edc <__alt_data_end+0xff006edc>
 2007148:	a809883a 	mov	r4,r21
 200714c:	20093340 	call	2009334 <_realloc_r>
 2007150:	102f883a 	mov	r23,r2
 2007154:	103fee1e 	bne	r2,zero,2007110 <__alt_data_end+0xff007110>
 2007158:	81400417 	ldw	r5,16(r16)
 200715c:	a809883a 	mov	r4,r21
 2007160:	20069c80 	call	20069c8 <_free_r>
 2007164:	8080030b 	ldhu	r2,12(r16)
 2007168:	00ffdfc4 	movi	r3,-129
 200716c:	1884703a 	and	r2,r3,r2
 2007170:	00c00304 	movi	r3,12
 2007174:	a8c00015 	stw	r3,0(r21)
 2007178:	003f5906 	br	2006ee0 <__alt_data_end+0xff006ee0>
 200717c:	94c00044 	addi	r19,r18,1
 2007180:	02000044 	movi	r8,1
 2007184:	003f6006 	br	2006f08 <__alt_data_end+0xff006f08>
 2007188:	00bfffc4 	movi	r2,-1
 200718c:	003f0006 	br	2006d90 <__alt_data_end+0xff006d90>
 2007190:	00800304 	movi	r2,12
 2007194:	a8800015 	stw	r2,0(r21)
 2007198:	8080030b 	ldhu	r2,12(r16)
 200719c:	003f5006 	br	2006ee0 <__alt_data_end+0xff006ee0>

020071a0 <_fwalk>:
 20071a0:	defff704 	addi	sp,sp,-36
 20071a4:	dd000415 	stw	r20,16(sp)
 20071a8:	dfc00815 	stw	ra,32(sp)
 20071ac:	ddc00715 	stw	r23,28(sp)
 20071b0:	dd800615 	stw	r22,24(sp)
 20071b4:	dd400515 	stw	r21,20(sp)
 20071b8:	dcc00315 	stw	r19,12(sp)
 20071bc:	dc800215 	stw	r18,8(sp)
 20071c0:	dc400115 	stw	r17,4(sp)
 20071c4:	dc000015 	stw	r16,0(sp)
 20071c8:	2500b804 	addi	r20,r4,736
 20071cc:	a0002326 	beq	r20,zero,200725c <_fwalk+0xbc>
 20071d0:	282b883a 	mov	r21,r5
 20071d4:	002f883a 	mov	r23,zero
 20071d8:	05800044 	movi	r22,1
 20071dc:	04ffffc4 	movi	r19,-1
 20071e0:	a4400117 	ldw	r17,4(r20)
 20071e4:	a4800217 	ldw	r18,8(r20)
 20071e8:	8c7fffc4 	addi	r17,r17,-1
 20071ec:	88000d16 	blt	r17,zero,2007224 <_fwalk+0x84>
 20071f0:	94000304 	addi	r16,r18,12
 20071f4:	94800384 	addi	r18,r18,14
 20071f8:	8080000b 	ldhu	r2,0(r16)
 20071fc:	8c7fffc4 	addi	r17,r17,-1
 2007200:	813ffd04 	addi	r4,r16,-12
 2007204:	b080042e 	bgeu	r22,r2,2007218 <_fwalk+0x78>
 2007208:	9080000f 	ldh	r2,0(r18)
 200720c:	14c00226 	beq	r2,r19,2007218 <_fwalk+0x78>
 2007210:	a83ee83a 	callr	r21
 2007214:	b8aeb03a 	or	r23,r23,r2
 2007218:	84001a04 	addi	r16,r16,104
 200721c:	94801a04 	addi	r18,r18,104
 2007220:	8cfff51e 	bne	r17,r19,20071f8 <__alt_data_end+0xff0071f8>
 2007224:	a5000017 	ldw	r20,0(r20)
 2007228:	a03fed1e 	bne	r20,zero,20071e0 <__alt_data_end+0xff0071e0>
 200722c:	b805883a 	mov	r2,r23
 2007230:	dfc00817 	ldw	ra,32(sp)
 2007234:	ddc00717 	ldw	r23,28(sp)
 2007238:	dd800617 	ldw	r22,24(sp)
 200723c:	dd400517 	ldw	r21,20(sp)
 2007240:	dd000417 	ldw	r20,16(sp)
 2007244:	dcc00317 	ldw	r19,12(sp)
 2007248:	dc800217 	ldw	r18,8(sp)
 200724c:	dc400117 	ldw	r17,4(sp)
 2007250:	dc000017 	ldw	r16,0(sp)
 2007254:	dec00904 	addi	sp,sp,36
 2007258:	f800283a 	ret
 200725c:	002f883a 	mov	r23,zero
 2007260:	003ff206 	br	200722c <__alt_data_end+0xff00722c>

02007264 <_fwalk_reent>:
 2007264:	defff704 	addi	sp,sp,-36
 2007268:	dd000415 	stw	r20,16(sp)
 200726c:	dfc00815 	stw	ra,32(sp)
 2007270:	ddc00715 	stw	r23,28(sp)
 2007274:	dd800615 	stw	r22,24(sp)
 2007278:	dd400515 	stw	r21,20(sp)
 200727c:	dcc00315 	stw	r19,12(sp)
 2007280:	dc800215 	stw	r18,8(sp)
 2007284:	dc400115 	stw	r17,4(sp)
 2007288:	dc000015 	stw	r16,0(sp)
 200728c:	2500b804 	addi	r20,r4,736
 2007290:	a0002326 	beq	r20,zero,2007320 <_fwalk_reent+0xbc>
 2007294:	282b883a 	mov	r21,r5
 2007298:	2027883a 	mov	r19,r4
 200729c:	002f883a 	mov	r23,zero
 20072a0:	05800044 	movi	r22,1
 20072a4:	04bfffc4 	movi	r18,-1
 20072a8:	a4400117 	ldw	r17,4(r20)
 20072ac:	a4000217 	ldw	r16,8(r20)
 20072b0:	8c7fffc4 	addi	r17,r17,-1
 20072b4:	88000c16 	blt	r17,zero,20072e8 <_fwalk_reent+0x84>
 20072b8:	84000304 	addi	r16,r16,12
 20072bc:	8080000b 	ldhu	r2,0(r16)
 20072c0:	8c7fffc4 	addi	r17,r17,-1
 20072c4:	817ffd04 	addi	r5,r16,-12
 20072c8:	b080052e 	bgeu	r22,r2,20072e0 <_fwalk_reent+0x7c>
 20072cc:	8080008f 	ldh	r2,2(r16)
 20072d0:	9809883a 	mov	r4,r19
 20072d4:	14800226 	beq	r2,r18,20072e0 <_fwalk_reent+0x7c>
 20072d8:	a83ee83a 	callr	r21
 20072dc:	b8aeb03a 	or	r23,r23,r2
 20072e0:	84001a04 	addi	r16,r16,104
 20072e4:	8cbff51e 	bne	r17,r18,20072bc <__alt_data_end+0xff0072bc>
 20072e8:	a5000017 	ldw	r20,0(r20)
 20072ec:	a03fee1e 	bne	r20,zero,20072a8 <__alt_data_end+0xff0072a8>
 20072f0:	b805883a 	mov	r2,r23
 20072f4:	dfc00817 	ldw	ra,32(sp)
 20072f8:	ddc00717 	ldw	r23,28(sp)
 20072fc:	dd800617 	ldw	r22,24(sp)
 2007300:	dd400517 	ldw	r21,20(sp)
 2007304:	dd000417 	ldw	r20,16(sp)
 2007308:	dcc00317 	ldw	r19,12(sp)
 200730c:	dc800217 	ldw	r18,8(sp)
 2007310:	dc400117 	ldw	r17,4(sp)
 2007314:	dc000017 	ldw	r16,0(sp)
 2007318:	dec00904 	addi	sp,sp,36
 200731c:	f800283a 	ret
 2007320:	002f883a 	mov	r23,zero
 2007324:	003ff206 	br	20072f0 <__alt_data_end+0xff0072f0>

02007328 <_setlocale_r>:
 2007328:	30001b26 	beq	r6,zero,2007398 <_setlocale_r+0x70>
 200732c:	01408074 	movhi	r5,513
 2007330:	defffe04 	addi	sp,sp,-8
 2007334:	29488504 	addi	r5,r5,8724
 2007338:	3009883a 	mov	r4,r6
 200733c:	dc000015 	stw	r16,0(sp)
 2007340:	dfc00115 	stw	ra,4(sp)
 2007344:	3021883a 	mov	r16,r6
 2007348:	2009a9c0 	call	2009a9c <strcmp>
 200734c:	1000061e 	bne	r2,zero,2007368 <_setlocale_r+0x40>
 2007350:	00808074 	movhi	r2,513
 2007354:	10888404 	addi	r2,r2,8720
 2007358:	dfc00117 	ldw	ra,4(sp)
 200735c:	dc000017 	ldw	r16,0(sp)
 2007360:	dec00204 	addi	sp,sp,8
 2007364:	f800283a 	ret
 2007368:	01408074 	movhi	r5,513
 200736c:	29488404 	addi	r5,r5,8720
 2007370:	8009883a 	mov	r4,r16
 2007374:	2009a9c0 	call	2009a9c <strcmp>
 2007378:	103ff526 	beq	r2,zero,2007350 <__alt_data_end+0xff007350>
 200737c:	01408074 	movhi	r5,513
 2007380:	29486f04 	addi	r5,r5,8636
 2007384:	8009883a 	mov	r4,r16
 2007388:	2009a9c0 	call	2009a9c <strcmp>
 200738c:	103ff026 	beq	r2,zero,2007350 <__alt_data_end+0xff007350>
 2007390:	0005883a 	mov	r2,zero
 2007394:	003ff006 	br	2007358 <__alt_data_end+0xff007358>
 2007398:	00808074 	movhi	r2,513
 200739c:	10888404 	addi	r2,r2,8720
 20073a0:	f800283a 	ret

020073a4 <__locale_charset>:
 20073a4:	00808074 	movhi	r2,513
 20073a8:	108a3704 	addi	r2,r2,10460
 20073ac:	f800283a 	ret

020073b0 <__locale_mb_cur_max>:
 20073b0:	00808074 	movhi	r2,513
 20073b4:	108fd304 	addi	r2,r2,16204
 20073b8:	10800017 	ldw	r2,0(r2)
 20073bc:	f800283a 	ret

020073c0 <__locale_msgcharset>:
 20073c0:	00808074 	movhi	r2,513
 20073c4:	108a2f04 	addi	r2,r2,10428
 20073c8:	f800283a 	ret

020073cc <__locale_cjk_lang>:
 20073cc:	0005883a 	mov	r2,zero
 20073d0:	f800283a 	ret

020073d4 <_localeconv_r>:
 20073d4:	00808074 	movhi	r2,513
 20073d8:	108a3f04 	addi	r2,r2,10492
 20073dc:	f800283a 	ret

020073e0 <setlocale>:
 20073e0:	00808074 	movhi	r2,513
 20073e4:	108fd204 	addi	r2,r2,16200
 20073e8:	280d883a 	mov	r6,r5
 20073ec:	200b883a 	mov	r5,r4
 20073f0:	11000017 	ldw	r4,0(r2)
 20073f4:	20073281 	jmpi	2007328 <_setlocale_r>

020073f8 <localeconv>:
 20073f8:	00808074 	movhi	r2,513
 20073fc:	108a3f04 	addi	r2,r2,10492
 2007400:	f800283a 	ret

02007404 <__smakebuf_r>:
 2007404:	2880030b 	ldhu	r2,12(r5)
 2007408:	10c0008c 	andi	r3,r2,2
 200740c:	1800411e 	bne	r3,zero,2007514 <__smakebuf_r+0x110>
 2007410:	deffec04 	addi	sp,sp,-80
 2007414:	dc000f15 	stw	r16,60(sp)
 2007418:	2821883a 	mov	r16,r5
 200741c:	2940038f 	ldh	r5,14(r5)
 2007420:	dc401015 	stw	r17,64(sp)
 2007424:	dfc01315 	stw	ra,76(sp)
 2007428:	dcc01215 	stw	r19,72(sp)
 200742c:	dc801115 	stw	r18,68(sp)
 2007430:	2023883a 	mov	r17,r4
 2007434:	28001c16 	blt	r5,zero,20074a8 <__smakebuf_r+0xa4>
 2007438:	d80d883a 	mov	r6,sp
 200743c:	200b70c0 	call	200b70c <_fstat_r>
 2007440:	10001816 	blt	r2,zero,20074a4 <__smakebuf_r+0xa0>
 2007444:	d8800117 	ldw	r2,4(sp)
 2007448:	00e00014 	movui	r3,32768
 200744c:	10bc000c 	andi	r2,r2,61440
 2007450:	14c80020 	cmpeqi	r19,r2,8192
 2007454:	10c03726 	beq	r2,r3,2007534 <__smakebuf_r+0x130>
 2007458:	80c0030b 	ldhu	r3,12(r16)
 200745c:	18c20014 	ori	r3,r3,2048
 2007460:	80c0030d 	sth	r3,12(r16)
 2007464:	00c80004 	movi	r3,8192
 2007468:	10c0521e 	bne	r2,r3,20075b4 <__smakebuf_r+0x1b0>
 200746c:	8140038f 	ldh	r5,14(r16)
 2007470:	8809883a 	mov	r4,r17
 2007474:	200b7680 	call	200b768 <_isatty_r>
 2007478:	10004c26 	beq	r2,zero,20075ac <__smakebuf_r+0x1a8>
 200747c:	8080030b 	ldhu	r2,12(r16)
 2007480:	80c010c4 	addi	r3,r16,67
 2007484:	80c00015 	stw	r3,0(r16)
 2007488:	10800054 	ori	r2,r2,1
 200748c:	8080030d 	sth	r2,12(r16)
 2007490:	00800044 	movi	r2,1
 2007494:	80c00415 	stw	r3,16(r16)
 2007498:	80800515 	stw	r2,20(r16)
 200749c:	04810004 	movi	r18,1024
 20074a0:	00000706 	br	20074c0 <__smakebuf_r+0xbc>
 20074a4:	8080030b 	ldhu	r2,12(r16)
 20074a8:	10c0200c 	andi	r3,r2,128
 20074ac:	18001f1e 	bne	r3,zero,200752c <__smakebuf_r+0x128>
 20074b0:	04810004 	movi	r18,1024
 20074b4:	10820014 	ori	r2,r2,2048
 20074b8:	8080030d 	sth	r2,12(r16)
 20074bc:	0027883a 	mov	r19,zero
 20074c0:	900b883a 	mov	r5,r18
 20074c4:	8809883a 	mov	r4,r17
 20074c8:	20075c00 	call	20075c0 <_malloc_r>
 20074cc:	10002c26 	beq	r2,zero,2007580 <__smakebuf_r+0x17c>
 20074d0:	80c0030b 	ldhu	r3,12(r16)
 20074d4:	01008034 	movhi	r4,512
 20074d8:	21193f04 	addi	r4,r4,25852
 20074dc:	89000f15 	stw	r4,60(r17)
 20074e0:	18c02014 	ori	r3,r3,128
 20074e4:	80c0030d 	sth	r3,12(r16)
 20074e8:	80800015 	stw	r2,0(r16)
 20074ec:	80800415 	stw	r2,16(r16)
 20074f0:	84800515 	stw	r18,20(r16)
 20074f4:	98001a1e 	bne	r19,zero,2007560 <__smakebuf_r+0x15c>
 20074f8:	dfc01317 	ldw	ra,76(sp)
 20074fc:	dcc01217 	ldw	r19,72(sp)
 2007500:	dc801117 	ldw	r18,68(sp)
 2007504:	dc401017 	ldw	r17,64(sp)
 2007508:	dc000f17 	ldw	r16,60(sp)
 200750c:	dec01404 	addi	sp,sp,80
 2007510:	f800283a 	ret
 2007514:	288010c4 	addi	r2,r5,67
 2007518:	28800015 	stw	r2,0(r5)
 200751c:	28800415 	stw	r2,16(r5)
 2007520:	00800044 	movi	r2,1
 2007524:	28800515 	stw	r2,20(r5)
 2007528:	f800283a 	ret
 200752c:	04801004 	movi	r18,64
 2007530:	003fe006 	br	20074b4 <__alt_data_end+0xff0074b4>
 2007534:	81000a17 	ldw	r4,40(r16)
 2007538:	00c08074 	movhi	r3,513
 200753c:	18e68e04 	addi	r3,r3,-26056
 2007540:	20ffc51e 	bne	r4,r3,2007458 <__alt_data_end+0xff007458>
 2007544:	8080030b 	ldhu	r2,12(r16)
 2007548:	04810004 	movi	r18,1024
 200754c:	84801315 	stw	r18,76(r16)
 2007550:	1484b03a 	or	r2,r2,r18
 2007554:	8080030d 	sth	r2,12(r16)
 2007558:	0027883a 	mov	r19,zero
 200755c:	003fd806 	br	20074c0 <__alt_data_end+0xff0074c0>
 2007560:	8140038f 	ldh	r5,14(r16)
 2007564:	8809883a 	mov	r4,r17
 2007568:	200b7680 	call	200b768 <_isatty_r>
 200756c:	103fe226 	beq	r2,zero,20074f8 <__alt_data_end+0xff0074f8>
 2007570:	8080030b 	ldhu	r2,12(r16)
 2007574:	10800054 	ori	r2,r2,1
 2007578:	8080030d 	sth	r2,12(r16)
 200757c:	003fde06 	br	20074f8 <__alt_data_end+0xff0074f8>
 2007580:	8080030b 	ldhu	r2,12(r16)
 2007584:	10c0800c 	andi	r3,r2,512
 2007588:	183fdb1e 	bne	r3,zero,20074f8 <__alt_data_end+0xff0074f8>
 200758c:	10800094 	ori	r2,r2,2
 2007590:	80c010c4 	addi	r3,r16,67
 2007594:	8080030d 	sth	r2,12(r16)
 2007598:	00800044 	movi	r2,1
 200759c:	80c00015 	stw	r3,0(r16)
 20075a0:	80c00415 	stw	r3,16(r16)
 20075a4:	80800515 	stw	r2,20(r16)
 20075a8:	003fd306 	br	20074f8 <__alt_data_end+0xff0074f8>
 20075ac:	04810004 	movi	r18,1024
 20075b0:	003fc306 	br	20074c0 <__alt_data_end+0xff0074c0>
 20075b4:	0027883a 	mov	r19,zero
 20075b8:	04810004 	movi	r18,1024
 20075bc:	003fc006 	br	20074c0 <__alt_data_end+0xff0074c0>

020075c0 <_malloc_r>:
 20075c0:	defff504 	addi	sp,sp,-44
 20075c4:	dc800315 	stw	r18,12(sp)
 20075c8:	dfc00a15 	stw	ra,40(sp)
 20075cc:	df000915 	stw	fp,36(sp)
 20075d0:	ddc00815 	stw	r23,32(sp)
 20075d4:	dd800715 	stw	r22,28(sp)
 20075d8:	dd400615 	stw	r21,24(sp)
 20075dc:	dd000515 	stw	r20,20(sp)
 20075e0:	dcc00415 	stw	r19,16(sp)
 20075e4:	dc400215 	stw	r17,8(sp)
 20075e8:	dc000115 	stw	r16,4(sp)
 20075ec:	288002c4 	addi	r2,r5,11
 20075f0:	00c00584 	movi	r3,22
 20075f4:	2025883a 	mov	r18,r4
 20075f8:	18807f2e 	bgeu	r3,r2,20077f8 <_malloc_r+0x238>
 20075fc:	047ffe04 	movi	r17,-8
 2007600:	1462703a 	and	r17,r2,r17
 2007604:	8800a316 	blt	r17,zero,2007894 <_malloc_r+0x2d4>
 2007608:	8940a236 	bltu	r17,r5,2007894 <_malloc_r+0x2d4>
 200760c:	200f7980 	call	200f798 <__malloc_lock>
 2007610:	00807dc4 	movi	r2,503
 2007614:	1441e92e 	bgeu	r2,r17,2007dbc <_malloc_r+0x7fc>
 2007618:	8804d27a 	srli	r2,r17,9
 200761c:	1000a126 	beq	r2,zero,20078a4 <_malloc_r+0x2e4>
 2007620:	00c00104 	movi	r3,4
 2007624:	18811e36 	bltu	r3,r2,2007aa0 <_malloc_r+0x4e0>
 2007628:	8804d1ba 	srli	r2,r17,6
 200762c:	12000e44 	addi	r8,r2,57
 2007630:	11c00e04 	addi	r7,r2,56
 2007634:	4209883a 	add	r4,r8,r8
 2007638:	04c08074 	movhi	r19,513
 200763c:	2109883a 	add	r4,r4,r4
 2007640:	9cca4d04 	addi	r19,r19,10548
 2007644:	2109883a 	add	r4,r4,r4
 2007648:	9909883a 	add	r4,r19,r4
 200764c:	24000117 	ldw	r16,4(r4)
 2007650:	213ffe04 	addi	r4,r4,-8
 2007654:	24009726 	beq	r4,r16,20078b4 <_malloc_r+0x2f4>
 2007658:	80800117 	ldw	r2,4(r16)
 200765c:	01bfff04 	movi	r6,-4
 2007660:	014003c4 	movi	r5,15
 2007664:	1184703a 	and	r2,r2,r6
 2007668:	1447c83a 	sub	r3,r2,r17
 200766c:	28c00716 	blt	r5,r3,200768c <_malloc_r+0xcc>
 2007670:	1800920e 	bge	r3,zero,20078bc <_malloc_r+0x2fc>
 2007674:	84000317 	ldw	r16,12(r16)
 2007678:	24008e26 	beq	r4,r16,20078b4 <_malloc_r+0x2f4>
 200767c:	80800117 	ldw	r2,4(r16)
 2007680:	1184703a 	and	r2,r2,r6
 2007684:	1447c83a 	sub	r3,r2,r17
 2007688:	28fff90e 	bge	r5,r3,2007670 <__alt_data_end+0xff007670>
 200768c:	3809883a 	mov	r4,r7
 2007690:	01808074 	movhi	r6,513
 2007694:	9c000417 	ldw	r16,16(r19)
 2007698:	318a4d04 	addi	r6,r6,10548
 200769c:	32000204 	addi	r8,r6,8
 20076a0:	82013426 	beq	r16,r8,2007b74 <_malloc_r+0x5b4>
 20076a4:	80c00117 	ldw	r3,4(r16)
 20076a8:	00bfff04 	movi	r2,-4
 20076ac:	188e703a 	and	r7,r3,r2
 20076b0:	3c45c83a 	sub	r2,r7,r17
 20076b4:	00c003c4 	movi	r3,15
 20076b8:	18811f16 	blt	r3,r2,2007b38 <_malloc_r+0x578>
 20076bc:	32000515 	stw	r8,20(r6)
 20076c0:	32000415 	stw	r8,16(r6)
 20076c4:	10007f0e 	bge	r2,zero,20078c4 <_malloc_r+0x304>
 20076c8:	00807fc4 	movi	r2,511
 20076cc:	11c0fd36 	bltu	r2,r7,2007ac4 <_malloc_r+0x504>
 20076d0:	3806d0fa 	srli	r3,r7,3
 20076d4:	01c00044 	movi	r7,1
 20076d8:	30800117 	ldw	r2,4(r6)
 20076dc:	19400044 	addi	r5,r3,1
 20076e0:	294b883a 	add	r5,r5,r5
 20076e4:	1807d0ba 	srai	r3,r3,2
 20076e8:	294b883a 	add	r5,r5,r5
 20076ec:	294b883a 	add	r5,r5,r5
 20076f0:	298b883a 	add	r5,r5,r6
 20076f4:	38c6983a 	sll	r3,r7,r3
 20076f8:	29c00017 	ldw	r7,0(r5)
 20076fc:	2a7ffe04 	addi	r9,r5,-8
 2007700:	1886b03a 	or	r3,r3,r2
 2007704:	82400315 	stw	r9,12(r16)
 2007708:	81c00215 	stw	r7,8(r16)
 200770c:	30c00115 	stw	r3,4(r6)
 2007710:	2c000015 	stw	r16,0(r5)
 2007714:	3c000315 	stw	r16,12(r7)
 2007718:	2005d0ba 	srai	r2,r4,2
 200771c:	01400044 	movi	r5,1
 2007720:	288a983a 	sll	r5,r5,r2
 2007724:	19406f36 	bltu	r3,r5,20078e4 <_malloc_r+0x324>
 2007728:	28c4703a 	and	r2,r5,r3
 200772c:	10000a1e 	bne	r2,zero,2007758 <_malloc_r+0x198>
 2007730:	00bfff04 	movi	r2,-4
 2007734:	294b883a 	add	r5,r5,r5
 2007738:	2088703a 	and	r4,r4,r2
 200773c:	28c4703a 	and	r2,r5,r3
 2007740:	21000104 	addi	r4,r4,4
 2007744:	1000041e 	bne	r2,zero,2007758 <_malloc_r+0x198>
 2007748:	294b883a 	add	r5,r5,r5
 200774c:	28c4703a 	and	r2,r5,r3
 2007750:	21000104 	addi	r4,r4,4
 2007754:	103ffc26 	beq	r2,zero,2007748 <__alt_data_end+0xff007748>
 2007758:	02bfff04 	movi	r10,-4
 200775c:	024003c4 	movi	r9,15
 2007760:	21800044 	addi	r6,r4,1
 2007764:	318d883a 	add	r6,r6,r6
 2007768:	318d883a 	add	r6,r6,r6
 200776c:	318d883a 	add	r6,r6,r6
 2007770:	998d883a 	add	r6,r19,r6
 2007774:	333ffe04 	addi	r12,r6,-8
 2007778:	2017883a 	mov	r11,r4
 200777c:	31800104 	addi	r6,r6,4
 2007780:	34000017 	ldw	r16,0(r6)
 2007784:	31fffd04 	addi	r7,r6,-12
 2007788:	81c0041e 	bne	r16,r7,200779c <_malloc_r+0x1dc>
 200778c:	0000fb06 	br	2007b7c <_malloc_r+0x5bc>
 2007790:	1801030e 	bge	r3,zero,2007ba0 <_malloc_r+0x5e0>
 2007794:	84000317 	ldw	r16,12(r16)
 2007798:	81c0f826 	beq	r16,r7,2007b7c <_malloc_r+0x5bc>
 200779c:	80800117 	ldw	r2,4(r16)
 20077a0:	1284703a 	and	r2,r2,r10
 20077a4:	1447c83a 	sub	r3,r2,r17
 20077a8:	48fff90e 	bge	r9,r3,2007790 <__alt_data_end+0xff007790>
 20077ac:	80800317 	ldw	r2,12(r16)
 20077b0:	81000217 	ldw	r4,8(r16)
 20077b4:	89400054 	ori	r5,r17,1
 20077b8:	81400115 	stw	r5,4(r16)
 20077bc:	20800315 	stw	r2,12(r4)
 20077c0:	11000215 	stw	r4,8(r2)
 20077c4:	8463883a 	add	r17,r16,r17
 20077c8:	9c400515 	stw	r17,20(r19)
 20077cc:	9c400415 	stw	r17,16(r19)
 20077d0:	18800054 	ori	r2,r3,1
 20077d4:	88800115 	stw	r2,4(r17)
 20077d8:	8a000315 	stw	r8,12(r17)
 20077dc:	8a000215 	stw	r8,8(r17)
 20077e0:	88e3883a 	add	r17,r17,r3
 20077e4:	88c00015 	stw	r3,0(r17)
 20077e8:	9009883a 	mov	r4,r18
 20077ec:	200f7bc0 	call	200f7bc <__malloc_unlock>
 20077f0:	80800204 	addi	r2,r16,8
 20077f4:	00001b06 	br	2007864 <_malloc_r+0x2a4>
 20077f8:	04400404 	movi	r17,16
 20077fc:	89402536 	bltu	r17,r5,2007894 <_malloc_r+0x2d4>
 2007800:	200f7980 	call	200f798 <__malloc_lock>
 2007804:	00800184 	movi	r2,6
 2007808:	01000084 	movi	r4,2
 200780c:	04c08074 	movhi	r19,513
 2007810:	1085883a 	add	r2,r2,r2
 2007814:	9cca4d04 	addi	r19,r19,10548
 2007818:	1085883a 	add	r2,r2,r2
 200781c:	9885883a 	add	r2,r19,r2
 2007820:	14000117 	ldw	r16,4(r2)
 2007824:	10fffe04 	addi	r3,r2,-8
 2007828:	80c0d926 	beq	r16,r3,2007b90 <_malloc_r+0x5d0>
 200782c:	80c00117 	ldw	r3,4(r16)
 2007830:	81000317 	ldw	r4,12(r16)
 2007834:	00bfff04 	movi	r2,-4
 2007838:	1884703a 	and	r2,r3,r2
 200783c:	81400217 	ldw	r5,8(r16)
 2007840:	8085883a 	add	r2,r16,r2
 2007844:	10c00117 	ldw	r3,4(r2)
 2007848:	29000315 	stw	r4,12(r5)
 200784c:	21400215 	stw	r5,8(r4)
 2007850:	18c00054 	ori	r3,r3,1
 2007854:	10c00115 	stw	r3,4(r2)
 2007858:	9009883a 	mov	r4,r18
 200785c:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2007860:	80800204 	addi	r2,r16,8
 2007864:	dfc00a17 	ldw	ra,40(sp)
 2007868:	df000917 	ldw	fp,36(sp)
 200786c:	ddc00817 	ldw	r23,32(sp)
 2007870:	dd800717 	ldw	r22,28(sp)
 2007874:	dd400617 	ldw	r21,24(sp)
 2007878:	dd000517 	ldw	r20,20(sp)
 200787c:	dcc00417 	ldw	r19,16(sp)
 2007880:	dc800317 	ldw	r18,12(sp)
 2007884:	dc400217 	ldw	r17,8(sp)
 2007888:	dc000117 	ldw	r16,4(sp)
 200788c:	dec00b04 	addi	sp,sp,44
 2007890:	f800283a 	ret
 2007894:	00800304 	movi	r2,12
 2007898:	90800015 	stw	r2,0(r18)
 200789c:	0005883a 	mov	r2,zero
 20078a0:	003ff006 	br	2007864 <__alt_data_end+0xff007864>
 20078a4:	01002004 	movi	r4,128
 20078a8:	02001004 	movi	r8,64
 20078ac:	01c00fc4 	movi	r7,63
 20078b0:	003f6106 	br	2007638 <__alt_data_end+0xff007638>
 20078b4:	4009883a 	mov	r4,r8
 20078b8:	003f7506 	br	2007690 <__alt_data_end+0xff007690>
 20078bc:	81000317 	ldw	r4,12(r16)
 20078c0:	003fde06 	br	200783c <__alt_data_end+0xff00783c>
 20078c4:	81c5883a 	add	r2,r16,r7
 20078c8:	11400117 	ldw	r5,4(r2)
 20078cc:	9009883a 	mov	r4,r18
 20078d0:	29400054 	ori	r5,r5,1
 20078d4:	11400115 	stw	r5,4(r2)
 20078d8:	200f7bc0 	call	200f7bc <__malloc_unlock>
 20078dc:	80800204 	addi	r2,r16,8
 20078e0:	003fe006 	br	2007864 <__alt_data_end+0xff007864>
 20078e4:	9c000217 	ldw	r16,8(r19)
 20078e8:	00bfff04 	movi	r2,-4
 20078ec:	85800117 	ldw	r22,4(r16)
 20078f0:	b0ac703a 	and	r22,r22,r2
 20078f4:	b4400336 	bltu	r22,r17,2007904 <_malloc_r+0x344>
 20078f8:	b445c83a 	sub	r2,r22,r17
 20078fc:	00c003c4 	movi	r3,15
 2007900:	18805d16 	blt	r3,r2,2007a78 <_malloc_r+0x4b8>
 2007904:	05c08074 	movhi	r23,513
 2007908:	00808074 	movhi	r2,513
 200790c:	1096a204 	addi	r2,r2,23176
 2007910:	bdcfd404 	addi	r23,r23,16208
 2007914:	15400017 	ldw	r21,0(r2)
 2007918:	b8c00017 	ldw	r3,0(r23)
 200791c:	00bfffc4 	movi	r2,-1
 2007920:	858d883a 	add	r6,r16,r22
 2007924:	8d6b883a 	add	r21,r17,r21
 2007928:	1880ea26 	beq	r3,r2,2007cd4 <_malloc_r+0x714>
 200792c:	ad4403c4 	addi	r21,r21,4111
 2007930:	00bc0004 	movi	r2,-4096
 2007934:	a8aa703a 	and	r21,r21,r2
 2007938:	a80b883a 	mov	r5,r21
 200793c:	9009883a 	mov	r4,r18
 2007940:	d9800015 	stw	r6,0(sp)
 2007944:	200990c0 	call	200990c <_sbrk_r>
 2007948:	1029883a 	mov	r20,r2
 200794c:	00bfffc4 	movi	r2,-1
 2007950:	d9800017 	ldw	r6,0(sp)
 2007954:	a080e826 	beq	r20,r2,2007cf8 <_malloc_r+0x738>
 2007958:	a180a636 	bltu	r20,r6,2007bf4 <_malloc_r+0x634>
 200795c:	07008074 	movhi	fp,513
 2007960:	e716ab04 	addi	fp,fp,23212
 2007964:	e0800017 	ldw	r2,0(fp)
 2007968:	a887883a 	add	r3,r21,r2
 200796c:	e0c00015 	stw	r3,0(fp)
 2007970:	3500e626 	beq	r6,r20,2007d0c <_malloc_r+0x74c>
 2007974:	b9000017 	ldw	r4,0(r23)
 2007978:	00bfffc4 	movi	r2,-1
 200797c:	2080ee26 	beq	r4,r2,2007d38 <_malloc_r+0x778>
 2007980:	a185c83a 	sub	r2,r20,r6
 2007984:	10c5883a 	add	r2,r2,r3
 2007988:	e0800015 	stw	r2,0(fp)
 200798c:	a0c001cc 	andi	r3,r20,7
 2007990:	1800bc26 	beq	r3,zero,2007c84 <_malloc_r+0x6c4>
 2007994:	a0e9c83a 	sub	r20,r20,r3
 2007998:	00840204 	movi	r2,4104
 200799c:	a5000204 	addi	r20,r20,8
 20079a0:	10c7c83a 	sub	r3,r2,r3
 20079a4:	a545883a 	add	r2,r20,r21
 20079a8:	1083ffcc 	andi	r2,r2,4095
 20079ac:	18abc83a 	sub	r21,r3,r2
 20079b0:	a80b883a 	mov	r5,r21
 20079b4:	9009883a 	mov	r4,r18
 20079b8:	200990c0 	call	200990c <_sbrk_r>
 20079bc:	00ffffc4 	movi	r3,-1
 20079c0:	10c0e126 	beq	r2,r3,2007d48 <_malloc_r+0x788>
 20079c4:	1505c83a 	sub	r2,r2,r20
 20079c8:	1545883a 	add	r2,r2,r21
 20079cc:	10800054 	ori	r2,r2,1
 20079d0:	e0c00017 	ldw	r3,0(fp)
 20079d4:	9d000215 	stw	r20,8(r19)
 20079d8:	a0800115 	stw	r2,4(r20)
 20079dc:	a8c7883a 	add	r3,r21,r3
 20079e0:	e0c00015 	stw	r3,0(fp)
 20079e4:	84c00e26 	beq	r16,r19,2007a20 <_malloc_r+0x460>
 20079e8:	018003c4 	movi	r6,15
 20079ec:	3580a72e 	bgeu	r6,r22,2007c8c <_malloc_r+0x6cc>
 20079f0:	81400117 	ldw	r5,4(r16)
 20079f4:	013ffe04 	movi	r4,-8
 20079f8:	b0bffd04 	addi	r2,r22,-12
 20079fc:	1104703a 	and	r2,r2,r4
 2007a00:	2900004c 	andi	r4,r5,1
 2007a04:	2088b03a 	or	r4,r4,r2
 2007a08:	81000115 	stw	r4,4(r16)
 2007a0c:	01400144 	movi	r5,5
 2007a10:	8089883a 	add	r4,r16,r2
 2007a14:	21400115 	stw	r5,4(r4)
 2007a18:	21400215 	stw	r5,8(r4)
 2007a1c:	3080cd36 	bltu	r6,r2,2007d54 <_malloc_r+0x794>
 2007a20:	00808074 	movhi	r2,513
 2007a24:	1096a104 	addi	r2,r2,23172
 2007a28:	11000017 	ldw	r4,0(r2)
 2007a2c:	20c0012e 	bgeu	r4,r3,2007a34 <_malloc_r+0x474>
 2007a30:	10c00015 	stw	r3,0(r2)
 2007a34:	00808074 	movhi	r2,513
 2007a38:	1096a004 	addi	r2,r2,23168
 2007a3c:	11000017 	ldw	r4,0(r2)
 2007a40:	9c000217 	ldw	r16,8(r19)
 2007a44:	20c0012e 	bgeu	r4,r3,2007a4c <_malloc_r+0x48c>
 2007a48:	10c00015 	stw	r3,0(r2)
 2007a4c:	80c00117 	ldw	r3,4(r16)
 2007a50:	00bfff04 	movi	r2,-4
 2007a54:	1886703a 	and	r3,r3,r2
 2007a58:	1c45c83a 	sub	r2,r3,r17
 2007a5c:	1c400236 	bltu	r3,r17,2007a68 <_malloc_r+0x4a8>
 2007a60:	00c003c4 	movi	r3,15
 2007a64:	18800416 	blt	r3,r2,2007a78 <_malloc_r+0x4b8>
 2007a68:	9009883a 	mov	r4,r18
 2007a6c:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2007a70:	0005883a 	mov	r2,zero
 2007a74:	003f7b06 	br	2007864 <__alt_data_end+0xff007864>
 2007a78:	88c00054 	ori	r3,r17,1
 2007a7c:	80c00115 	stw	r3,4(r16)
 2007a80:	8463883a 	add	r17,r16,r17
 2007a84:	10800054 	ori	r2,r2,1
 2007a88:	9c400215 	stw	r17,8(r19)
 2007a8c:	88800115 	stw	r2,4(r17)
 2007a90:	9009883a 	mov	r4,r18
 2007a94:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2007a98:	80800204 	addi	r2,r16,8
 2007a9c:	003f7106 	br	2007864 <__alt_data_end+0xff007864>
 2007aa0:	00c00504 	movi	r3,20
 2007aa4:	18804a2e 	bgeu	r3,r2,2007bd0 <_malloc_r+0x610>
 2007aa8:	00c01504 	movi	r3,84
 2007aac:	18806e36 	bltu	r3,r2,2007c68 <_malloc_r+0x6a8>
 2007ab0:	8804d33a 	srli	r2,r17,12
 2007ab4:	12001bc4 	addi	r8,r2,111
 2007ab8:	11c01b84 	addi	r7,r2,110
 2007abc:	4209883a 	add	r4,r8,r8
 2007ac0:	003edd06 	br	2007638 <__alt_data_end+0xff007638>
 2007ac4:	3804d27a 	srli	r2,r7,9
 2007ac8:	00c00104 	movi	r3,4
 2007acc:	1880442e 	bgeu	r3,r2,2007be0 <_malloc_r+0x620>
 2007ad0:	00c00504 	movi	r3,20
 2007ad4:	18808136 	bltu	r3,r2,2007cdc <_malloc_r+0x71c>
 2007ad8:	11401704 	addi	r5,r2,92
 2007adc:	10c016c4 	addi	r3,r2,91
 2007ae0:	294b883a 	add	r5,r5,r5
 2007ae4:	294b883a 	add	r5,r5,r5
 2007ae8:	294b883a 	add	r5,r5,r5
 2007aec:	994b883a 	add	r5,r19,r5
 2007af0:	28800017 	ldw	r2,0(r5)
 2007af4:	01808074 	movhi	r6,513
 2007af8:	297ffe04 	addi	r5,r5,-8
 2007afc:	318a4d04 	addi	r6,r6,10548
 2007b00:	28806526 	beq	r5,r2,2007c98 <_malloc_r+0x6d8>
 2007b04:	01bfff04 	movi	r6,-4
 2007b08:	10c00117 	ldw	r3,4(r2)
 2007b0c:	1986703a 	and	r3,r3,r6
 2007b10:	38c0022e 	bgeu	r7,r3,2007b1c <_malloc_r+0x55c>
 2007b14:	10800217 	ldw	r2,8(r2)
 2007b18:	28bffb1e 	bne	r5,r2,2007b08 <__alt_data_end+0xff007b08>
 2007b1c:	11400317 	ldw	r5,12(r2)
 2007b20:	98c00117 	ldw	r3,4(r19)
 2007b24:	81400315 	stw	r5,12(r16)
 2007b28:	80800215 	stw	r2,8(r16)
 2007b2c:	2c000215 	stw	r16,8(r5)
 2007b30:	14000315 	stw	r16,12(r2)
 2007b34:	003ef806 	br	2007718 <__alt_data_end+0xff007718>
 2007b38:	88c00054 	ori	r3,r17,1
 2007b3c:	80c00115 	stw	r3,4(r16)
 2007b40:	8463883a 	add	r17,r16,r17
 2007b44:	34400515 	stw	r17,20(r6)
 2007b48:	34400415 	stw	r17,16(r6)
 2007b4c:	10c00054 	ori	r3,r2,1
 2007b50:	8a000315 	stw	r8,12(r17)
 2007b54:	8a000215 	stw	r8,8(r17)
 2007b58:	88c00115 	stw	r3,4(r17)
 2007b5c:	88a3883a 	add	r17,r17,r2
 2007b60:	88800015 	stw	r2,0(r17)
 2007b64:	9009883a 	mov	r4,r18
 2007b68:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2007b6c:	80800204 	addi	r2,r16,8
 2007b70:	003f3c06 	br	2007864 <__alt_data_end+0xff007864>
 2007b74:	30c00117 	ldw	r3,4(r6)
 2007b78:	003ee706 	br	2007718 <__alt_data_end+0xff007718>
 2007b7c:	5ac00044 	addi	r11,r11,1
 2007b80:	588000cc 	andi	r2,r11,3
 2007b84:	31800204 	addi	r6,r6,8
 2007b88:	103efd1e 	bne	r2,zero,2007780 <__alt_data_end+0xff007780>
 2007b8c:	00002406 	br	2007c20 <_malloc_r+0x660>
 2007b90:	14000317 	ldw	r16,12(r2)
 2007b94:	143f251e 	bne	r2,r16,200782c <__alt_data_end+0xff00782c>
 2007b98:	21000084 	addi	r4,r4,2
 2007b9c:	003ebc06 	br	2007690 <__alt_data_end+0xff007690>
 2007ba0:	8085883a 	add	r2,r16,r2
 2007ba4:	10c00117 	ldw	r3,4(r2)
 2007ba8:	81000317 	ldw	r4,12(r16)
 2007bac:	81400217 	ldw	r5,8(r16)
 2007bb0:	18c00054 	ori	r3,r3,1
 2007bb4:	10c00115 	stw	r3,4(r2)
 2007bb8:	29000315 	stw	r4,12(r5)
 2007bbc:	21400215 	stw	r5,8(r4)
 2007bc0:	9009883a 	mov	r4,r18
 2007bc4:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2007bc8:	80800204 	addi	r2,r16,8
 2007bcc:	003f2506 	br	2007864 <__alt_data_end+0xff007864>
 2007bd0:	12001704 	addi	r8,r2,92
 2007bd4:	11c016c4 	addi	r7,r2,91
 2007bd8:	4209883a 	add	r4,r8,r8
 2007bdc:	003e9606 	br	2007638 <__alt_data_end+0xff007638>
 2007be0:	3804d1ba 	srli	r2,r7,6
 2007be4:	11400e44 	addi	r5,r2,57
 2007be8:	10c00e04 	addi	r3,r2,56
 2007bec:	294b883a 	add	r5,r5,r5
 2007bf0:	003fbc06 	br	2007ae4 <__alt_data_end+0xff007ae4>
 2007bf4:	84ff5926 	beq	r16,r19,200795c <__alt_data_end+0xff00795c>
 2007bf8:	00808074 	movhi	r2,513
 2007bfc:	108a4d04 	addi	r2,r2,10548
 2007c00:	14000217 	ldw	r16,8(r2)
 2007c04:	00bfff04 	movi	r2,-4
 2007c08:	80c00117 	ldw	r3,4(r16)
 2007c0c:	1886703a 	and	r3,r3,r2
 2007c10:	003f9106 	br	2007a58 <__alt_data_end+0xff007a58>
 2007c14:	60800217 	ldw	r2,8(r12)
 2007c18:	213fffc4 	addi	r4,r4,-1
 2007c1c:	1300651e 	bne	r2,r12,2007db4 <_malloc_r+0x7f4>
 2007c20:	208000cc 	andi	r2,r4,3
 2007c24:	633ffe04 	addi	r12,r12,-8
 2007c28:	103ffa1e 	bne	r2,zero,2007c14 <__alt_data_end+0xff007c14>
 2007c2c:	98800117 	ldw	r2,4(r19)
 2007c30:	0146303a 	nor	r3,zero,r5
 2007c34:	1884703a 	and	r2,r3,r2
 2007c38:	98800115 	stw	r2,4(r19)
 2007c3c:	294b883a 	add	r5,r5,r5
 2007c40:	117f2836 	bltu	r2,r5,20078e4 <__alt_data_end+0xff0078e4>
 2007c44:	283f2726 	beq	r5,zero,20078e4 <__alt_data_end+0xff0078e4>
 2007c48:	2886703a 	and	r3,r5,r2
 2007c4c:	5809883a 	mov	r4,r11
 2007c50:	183ec31e 	bne	r3,zero,2007760 <__alt_data_end+0xff007760>
 2007c54:	294b883a 	add	r5,r5,r5
 2007c58:	2886703a 	and	r3,r5,r2
 2007c5c:	21000104 	addi	r4,r4,4
 2007c60:	183ffc26 	beq	r3,zero,2007c54 <__alt_data_end+0xff007c54>
 2007c64:	003ebe06 	br	2007760 <__alt_data_end+0xff007760>
 2007c68:	00c05504 	movi	r3,340
 2007c6c:	18801236 	bltu	r3,r2,2007cb8 <_malloc_r+0x6f8>
 2007c70:	8804d3fa 	srli	r2,r17,15
 2007c74:	12001e04 	addi	r8,r2,120
 2007c78:	11c01dc4 	addi	r7,r2,119
 2007c7c:	4209883a 	add	r4,r8,r8
 2007c80:	003e6d06 	br	2007638 <__alt_data_end+0xff007638>
 2007c84:	00c40004 	movi	r3,4096
 2007c88:	003f4606 	br	20079a4 <__alt_data_end+0xff0079a4>
 2007c8c:	00800044 	movi	r2,1
 2007c90:	a0800115 	stw	r2,4(r20)
 2007c94:	003f7406 	br	2007a68 <__alt_data_end+0xff007a68>
 2007c98:	1805d0ba 	srai	r2,r3,2
 2007c9c:	01c00044 	movi	r7,1
 2007ca0:	30c00117 	ldw	r3,4(r6)
 2007ca4:	388e983a 	sll	r7,r7,r2
 2007ca8:	2805883a 	mov	r2,r5
 2007cac:	38c6b03a 	or	r3,r7,r3
 2007cb0:	30c00115 	stw	r3,4(r6)
 2007cb4:	003f9b06 	br	2007b24 <__alt_data_end+0xff007b24>
 2007cb8:	00c15504 	movi	r3,1364
 2007cbc:	18801a36 	bltu	r3,r2,2007d28 <_malloc_r+0x768>
 2007cc0:	8804d4ba 	srli	r2,r17,18
 2007cc4:	12001f44 	addi	r8,r2,125
 2007cc8:	11c01f04 	addi	r7,r2,124
 2007ccc:	4209883a 	add	r4,r8,r8
 2007cd0:	003e5906 	br	2007638 <__alt_data_end+0xff007638>
 2007cd4:	ad400404 	addi	r21,r21,16
 2007cd8:	003f1706 	br	2007938 <__alt_data_end+0xff007938>
 2007cdc:	00c01504 	movi	r3,84
 2007ce0:	18802336 	bltu	r3,r2,2007d70 <_malloc_r+0x7b0>
 2007ce4:	3804d33a 	srli	r2,r7,12
 2007ce8:	11401bc4 	addi	r5,r2,111
 2007cec:	10c01b84 	addi	r3,r2,110
 2007cf0:	294b883a 	add	r5,r5,r5
 2007cf4:	003f7b06 	br	2007ae4 <__alt_data_end+0xff007ae4>
 2007cf8:	9c000217 	ldw	r16,8(r19)
 2007cfc:	00bfff04 	movi	r2,-4
 2007d00:	80c00117 	ldw	r3,4(r16)
 2007d04:	1886703a 	and	r3,r3,r2
 2007d08:	003f5306 	br	2007a58 <__alt_data_end+0xff007a58>
 2007d0c:	3083ffcc 	andi	r2,r6,4095
 2007d10:	103f181e 	bne	r2,zero,2007974 <__alt_data_end+0xff007974>
 2007d14:	99000217 	ldw	r4,8(r19)
 2007d18:	b545883a 	add	r2,r22,r21
 2007d1c:	10800054 	ori	r2,r2,1
 2007d20:	20800115 	stw	r2,4(r4)
 2007d24:	003f3e06 	br	2007a20 <__alt_data_end+0xff007a20>
 2007d28:	01003f84 	movi	r4,254
 2007d2c:	02001fc4 	movi	r8,127
 2007d30:	01c01f84 	movi	r7,126
 2007d34:	003e4006 	br	2007638 <__alt_data_end+0xff007638>
 2007d38:	00808074 	movhi	r2,513
 2007d3c:	108fd404 	addi	r2,r2,16208
 2007d40:	15000015 	stw	r20,0(r2)
 2007d44:	003f1106 	br	200798c <__alt_data_end+0xff00798c>
 2007d48:	00800044 	movi	r2,1
 2007d4c:	002b883a 	mov	r21,zero
 2007d50:	003f1f06 	br	20079d0 <__alt_data_end+0xff0079d0>
 2007d54:	81400204 	addi	r5,r16,8
 2007d58:	9009883a 	mov	r4,r18
 2007d5c:	20069c80 	call	20069c8 <_free_r>
 2007d60:	00808074 	movhi	r2,513
 2007d64:	1096ab04 	addi	r2,r2,23212
 2007d68:	10c00017 	ldw	r3,0(r2)
 2007d6c:	003f2c06 	br	2007a20 <__alt_data_end+0xff007a20>
 2007d70:	00c05504 	movi	r3,340
 2007d74:	18800536 	bltu	r3,r2,2007d8c <_malloc_r+0x7cc>
 2007d78:	3804d3fa 	srli	r2,r7,15
 2007d7c:	11401e04 	addi	r5,r2,120
 2007d80:	10c01dc4 	addi	r3,r2,119
 2007d84:	294b883a 	add	r5,r5,r5
 2007d88:	003f5606 	br	2007ae4 <__alt_data_end+0xff007ae4>
 2007d8c:	00c15504 	movi	r3,1364
 2007d90:	18800536 	bltu	r3,r2,2007da8 <_malloc_r+0x7e8>
 2007d94:	3804d4ba 	srli	r2,r7,18
 2007d98:	11401f44 	addi	r5,r2,125
 2007d9c:	10c01f04 	addi	r3,r2,124
 2007da0:	294b883a 	add	r5,r5,r5
 2007da4:	003f4f06 	br	2007ae4 <__alt_data_end+0xff007ae4>
 2007da8:	01403f84 	movi	r5,254
 2007dac:	00c01f84 	movi	r3,126
 2007db0:	003f4c06 	br	2007ae4 <__alt_data_end+0xff007ae4>
 2007db4:	98800117 	ldw	r2,4(r19)
 2007db8:	003fa006 	br	2007c3c <__alt_data_end+0xff007c3c>
 2007dbc:	8808d0fa 	srli	r4,r17,3
 2007dc0:	20800044 	addi	r2,r4,1
 2007dc4:	1085883a 	add	r2,r2,r2
 2007dc8:	003e9006 	br	200780c <__alt_data_end+0xff00780c>

02007dcc <memchr>:
 2007dcc:	208000cc 	andi	r2,r4,3
 2007dd0:	280f883a 	mov	r7,r5
 2007dd4:	10003426 	beq	r2,zero,2007ea8 <memchr+0xdc>
 2007dd8:	30bfffc4 	addi	r2,r6,-1
 2007ddc:	30001a26 	beq	r6,zero,2007e48 <memchr+0x7c>
 2007de0:	20c00003 	ldbu	r3,0(r4)
 2007de4:	29803fcc 	andi	r6,r5,255
 2007de8:	30c0051e 	bne	r6,r3,2007e00 <memchr+0x34>
 2007dec:	00001806 	br	2007e50 <memchr+0x84>
 2007df0:	10001526 	beq	r2,zero,2007e48 <memchr+0x7c>
 2007df4:	20c00003 	ldbu	r3,0(r4)
 2007df8:	10bfffc4 	addi	r2,r2,-1
 2007dfc:	30c01426 	beq	r6,r3,2007e50 <memchr+0x84>
 2007e00:	21000044 	addi	r4,r4,1
 2007e04:	20c000cc 	andi	r3,r4,3
 2007e08:	183ff91e 	bne	r3,zero,2007df0 <__alt_data_end+0xff007df0>
 2007e0c:	020000c4 	movi	r8,3
 2007e10:	40801136 	bltu	r8,r2,2007e58 <memchr+0x8c>
 2007e14:	10000c26 	beq	r2,zero,2007e48 <memchr+0x7c>
 2007e18:	20c00003 	ldbu	r3,0(r4)
 2007e1c:	29403fcc 	andi	r5,r5,255
 2007e20:	28c00b26 	beq	r5,r3,2007e50 <memchr+0x84>
 2007e24:	20c00044 	addi	r3,r4,1
 2007e28:	39803fcc 	andi	r6,r7,255
 2007e2c:	2089883a 	add	r4,r4,r2
 2007e30:	00000306 	br	2007e40 <memchr+0x74>
 2007e34:	18c00044 	addi	r3,r3,1
 2007e38:	197fffc3 	ldbu	r5,-1(r3)
 2007e3c:	31400526 	beq	r6,r5,2007e54 <memchr+0x88>
 2007e40:	1805883a 	mov	r2,r3
 2007e44:	20fffb1e 	bne	r4,r3,2007e34 <__alt_data_end+0xff007e34>
 2007e48:	0005883a 	mov	r2,zero
 2007e4c:	f800283a 	ret
 2007e50:	2005883a 	mov	r2,r4
 2007e54:	f800283a 	ret
 2007e58:	28c03fcc 	andi	r3,r5,255
 2007e5c:	1812923a 	slli	r9,r3,8
 2007e60:	02ffbff4 	movhi	r11,65279
 2007e64:	02a02074 	movhi	r10,32897
 2007e68:	48d2b03a 	or	r9,r9,r3
 2007e6c:	4806943a 	slli	r3,r9,16
 2007e70:	5affbfc4 	addi	r11,r11,-257
 2007e74:	52a02004 	addi	r10,r10,-32640
 2007e78:	48d2b03a 	or	r9,r9,r3
 2007e7c:	20c00017 	ldw	r3,0(r4)
 2007e80:	48c6f03a 	xor	r3,r9,r3
 2007e84:	1acd883a 	add	r6,r3,r11
 2007e88:	00c6303a 	nor	r3,zero,r3
 2007e8c:	30c6703a 	and	r3,r6,r3
 2007e90:	1a86703a 	and	r3,r3,r10
 2007e94:	183fe01e 	bne	r3,zero,2007e18 <__alt_data_end+0xff007e18>
 2007e98:	10bfff04 	addi	r2,r2,-4
 2007e9c:	21000104 	addi	r4,r4,4
 2007ea0:	40bff636 	bltu	r8,r2,2007e7c <__alt_data_end+0xff007e7c>
 2007ea4:	003fdb06 	br	2007e14 <__alt_data_end+0xff007e14>
 2007ea8:	3005883a 	mov	r2,r6
 2007eac:	003fd706 	br	2007e0c <__alt_data_end+0xff007e0c>

02007eb0 <memcpy>:
 2007eb0:	defffd04 	addi	sp,sp,-12
 2007eb4:	dfc00215 	stw	ra,8(sp)
 2007eb8:	dc400115 	stw	r17,4(sp)
 2007ebc:	dc000015 	stw	r16,0(sp)
 2007ec0:	00c003c4 	movi	r3,15
 2007ec4:	2005883a 	mov	r2,r4
 2007ec8:	1980452e 	bgeu	r3,r6,2007fe0 <memcpy+0x130>
 2007ecc:	2906b03a 	or	r3,r5,r4
 2007ed0:	18c000cc 	andi	r3,r3,3
 2007ed4:	1800441e 	bne	r3,zero,2007fe8 <memcpy+0x138>
 2007ed8:	347ffc04 	addi	r17,r6,-16
 2007edc:	8822d13a 	srli	r17,r17,4
 2007ee0:	28c00104 	addi	r3,r5,4
 2007ee4:	23400104 	addi	r13,r4,4
 2007ee8:	8820913a 	slli	r16,r17,4
 2007eec:	2b000204 	addi	r12,r5,8
 2007ef0:	22c00204 	addi	r11,r4,8
 2007ef4:	84000504 	addi	r16,r16,20
 2007ef8:	2a800304 	addi	r10,r5,12
 2007efc:	22400304 	addi	r9,r4,12
 2007f00:	2c21883a 	add	r16,r5,r16
 2007f04:	2811883a 	mov	r8,r5
 2007f08:	200f883a 	mov	r7,r4
 2007f0c:	41000017 	ldw	r4,0(r8)
 2007f10:	1fc00017 	ldw	ra,0(r3)
 2007f14:	63c00017 	ldw	r15,0(r12)
 2007f18:	39000015 	stw	r4,0(r7)
 2007f1c:	53800017 	ldw	r14,0(r10)
 2007f20:	6fc00015 	stw	ra,0(r13)
 2007f24:	5bc00015 	stw	r15,0(r11)
 2007f28:	4b800015 	stw	r14,0(r9)
 2007f2c:	18c00404 	addi	r3,r3,16
 2007f30:	39c00404 	addi	r7,r7,16
 2007f34:	42000404 	addi	r8,r8,16
 2007f38:	6b400404 	addi	r13,r13,16
 2007f3c:	63000404 	addi	r12,r12,16
 2007f40:	5ac00404 	addi	r11,r11,16
 2007f44:	52800404 	addi	r10,r10,16
 2007f48:	4a400404 	addi	r9,r9,16
 2007f4c:	1c3fef1e 	bne	r3,r16,2007f0c <__alt_data_end+0xff007f0c>
 2007f50:	89c00044 	addi	r7,r17,1
 2007f54:	380e913a 	slli	r7,r7,4
 2007f58:	310003cc 	andi	r4,r6,15
 2007f5c:	02c000c4 	movi	r11,3
 2007f60:	11c7883a 	add	r3,r2,r7
 2007f64:	29cb883a 	add	r5,r5,r7
 2007f68:	5900212e 	bgeu	r11,r4,2007ff0 <memcpy+0x140>
 2007f6c:	1813883a 	mov	r9,r3
 2007f70:	2811883a 	mov	r8,r5
 2007f74:	200f883a 	mov	r7,r4
 2007f78:	42800017 	ldw	r10,0(r8)
 2007f7c:	4a400104 	addi	r9,r9,4
 2007f80:	39ffff04 	addi	r7,r7,-4
 2007f84:	4abfff15 	stw	r10,-4(r9)
 2007f88:	42000104 	addi	r8,r8,4
 2007f8c:	59fffa36 	bltu	r11,r7,2007f78 <__alt_data_end+0xff007f78>
 2007f90:	213fff04 	addi	r4,r4,-4
 2007f94:	2008d0ba 	srli	r4,r4,2
 2007f98:	318000cc 	andi	r6,r6,3
 2007f9c:	21000044 	addi	r4,r4,1
 2007fa0:	2109883a 	add	r4,r4,r4
 2007fa4:	2109883a 	add	r4,r4,r4
 2007fa8:	1907883a 	add	r3,r3,r4
 2007fac:	290b883a 	add	r5,r5,r4
 2007fb0:	30000626 	beq	r6,zero,2007fcc <memcpy+0x11c>
 2007fb4:	198d883a 	add	r6,r3,r6
 2007fb8:	29c00003 	ldbu	r7,0(r5)
 2007fbc:	18c00044 	addi	r3,r3,1
 2007fc0:	29400044 	addi	r5,r5,1
 2007fc4:	19ffffc5 	stb	r7,-1(r3)
 2007fc8:	19bffb1e 	bne	r3,r6,2007fb8 <__alt_data_end+0xff007fb8>
 2007fcc:	dfc00217 	ldw	ra,8(sp)
 2007fd0:	dc400117 	ldw	r17,4(sp)
 2007fd4:	dc000017 	ldw	r16,0(sp)
 2007fd8:	dec00304 	addi	sp,sp,12
 2007fdc:	f800283a 	ret
 2007fe0:	2007883a 	mov	r3,r4
 2007fe4:	003ff206 	br	2007fb0 <__alt_data_end+0xff007fb0>
 2007fe8:	2007883a 	mov	r3,r4
 2007fec:	003ff106 	br	2007fb4 <__alt_data_end+0xff007fb4>
 2007ff0:	200d883a 	mov	r6,r4
 2007ff4:	003fee06 	br	2007fb0 <__alt_data_end+0xff007fb0>

02007ff8 <memmove>:
 2007ff8:	2005883a 	mov	r2,r4
 2007ffc:	29000b2e 	bgeu	r5,r4,200802c <memmove+0x34>
 2008000:	298f883a 	add	r7,r5,r6
 2008004:	21c0092e 	bgeu	r4,r7,200802c <memmove+0x34>
 2008008:	2187883a 	add	r3,r4,r6
 200800c:	198bc83a 	sub	r5,r3,r6
 2008010:	30004826 	beq	r6,zero,2008134 <memmove+0x13c>
 2008014:	39ffffc4 	addi	r7,r7,-1
 2008018:	39000003 	ldbu	r4,0(r7)
 200801c:	18ffffc4 	addi	r3,r3,-1
 2008020:	19000005 	stb	r4,0(r3)
 2008024:	28fffb1e 	bne	r5,r3,2008014 <__alt_data_end+0xff008014>
 2008028:	f800283a 	ret
 200802c:	00c003c4 	movi	r3,15
 2008030:	1980412e 	bgeu	r3,r6,2008138 <memmove+0x140>
 2008034:	2886b03a 	or	r3,r5,r2
 2008038:	18c000cc 	andi	r3,r3,3
 200803c:	1800401e 	bne	r3,zero,2008140 <memmove+0x148>
 2008040:	33fffc04 	addi	r15,r6,-16
 2008044:	781ed13a 	srli	r15,r15,4
 2008048:	28c00104 	addi	r3,r5,4
 200804c:	13400104 	addi	r13,r2,4
 2008050:	781c913a 	slli	r14,r15,4
 2008054:	2b000204 	addi	r12,r5,8
 2008058:	12c00204 	addi	r11,r2,8
 200805c:	73800504 	addi	r14,r14,20
 2008060:	2a800304 	addi	r10,r5,12
 2008064:	12400304 	addi	r9,r2,12
 2008068:	2b9d883a 	add	r14,r5,r14
 200806c:	2811883a 	mov	r8,r5
 2008070:	100f883a 	mov	r7,r2
 2008074:	41000017 	ldw	r4,0(r8)
 2008078:	39c00404 	addi	r7,r7,16
 200807c:	18c00404 	addi	r3,r3,16
 2008080:	393ffc15 	stw	r4,-16(r7)
 2008084:	193ffc17 	ldw	r4,-16(r3)
 2008088:	6b400404 	addi	r13,r13,16
 200808c:	5ac00404 	addi	r11,r11,16
 2008090:	693ffc15 	stw	r4,-16(r13)
 2008094:	61000017 	ldw	r4,0(r12)
 2008098:	4a400404 	addi	r9,r9,16
 200809c:	42000404 	addi	r8,r8,16
 20080a0:	593ffc15 	stw	r4,-16(r11)
 20080a4:	51000017 	ldw	r4,0(r10)
 20080a8:	63000404 	addi	r12,r12,16
 20080ac:	52800404 	addi	r10,r10,16
 20080b0:	493ffc15 	stw	r4,-16(r9)
 20080b4:	1bbfef1e 	bne	r3,r14,2008074 <__alt_data_end+0xff008074>
 20080b8:	79000044 	addi	r4,r15,1
 20080bc:	2008913a 	slli	r4,r4,4
 20080c0:	328003cc 	andi	r10,r6,15
 20080c4:	02c000c4 	movi	r11,3
 20080c8:	1107883a 	add	r3,r2,r4
 20080cc:	290b883a 	add	r5,r5,r4
 20080d0:	5a801e2e 	bgeu	r11,r10,200814c <memmove+0x154>
 20080d4:	1813883a 	mov	r9,r3
 20080d8:	2811883a 	mov	r8,r5
 20080dc:	500f883a 	mov	r7,r10
 20080e0:	41000017 	ldw	r4,0(r8)
 20080e4:	4a400104 	addi	r9,r9,4
 20080e8:	39ffff04 	addi	r7,r7,-4
 20080ec:	493fff15 	stw	r4,-4(r9)
 20080f0:	42000104 	addi	r8,r8,4
 20080f4:	59fffa36 	bltu	r11,r7,20080e0 <__alt_data_end+0xff0080e0>
 20080f8:	513fff04 	addi	r4,r10,-4
 20080fc:	2008d0ba 	srli	r4,r4,2
 2008100:	318000cc 	andi	r6,r6,3
 2008104:	21000044 	addi	r4,r4,1
 2008108:	2109883a 	add	r4,r4,r4
 200810c:	2109883a 	add	r4,r4,r4
 2008110:	1907883a 	add	r3,r3,r4
 2008114:	290b883a 	add	r5,r5,r4
 2008118:	30000b26 	beq	r6,zero,2008148 <memmove+0x150>
 200811c:	198d883a 	add	r6,r3,r6
 2008120:	29c00003 	ldbu	r7,0(r5)
 2008124:	18c00044 	addi	r3,r3,1
 2008128:	29400044 	addi	r5,r5,1
 200812c:	19ffffc5 	stb	r7,-1(r3)
 2008130:	19bffb1e 	bne	r3,r6,2008120 <__alt_data_end+0xff008120>
 2008134:	f800283a 	ret
 2008138:	1007883a 	mov	r3,r2
 200813c:	003ff606 	br	2008118 <__alt_data_end+0xff008118>
 2008140:	1007883a 	mov	r3,r2
 2008144:	003ff506 	br	200811c <__alt_data_end+0xff00811c>
 2008148:	f800283a 	ret
 200814c:	500d883a 	mov	r6,r10
 2008150:	003ff106 	br	2008118 <__alt_data_end+0xff008118>

02008154 <memset>:
 2008154:	20c000cc 	andi	r3,r4,3
 2008158:	2005883a 	mov	r2,r4
 200815c:	18004426 	beq	r3,zero,2008270 <memset+0x11c>
 2008160:	31ffffc4 	addi	r7,r6,-1
 2008164:	30004026 	beq	r6,zero,2008268 <memset+0x114>
 2008168:	2813883a 	mov	r9,r5
 200816c:	200d883a 	mov	r6,r4
 2008170:	2007883a 	mov	r3,r4
 2008174:	00000406 	br	2008188 <memset+0x34>
 2008178:	3a3fffc4 	addi	r8,r7,-1
 200817c:	31800044 	addi	r6,r6,1
 2008180:	38003926 	beq	r7,zero,2008268 <memset+0x114>
 2008184:	400f883a 	mov	r7,r8
 2008188:	18c00044 	addi	r3,r3,1
 200818c:	32400005 	stb	r9,0(r6)
 2008190:	1a0000cc 	andi	r8,r3,3
 2008194:	403ff81e 	bne	r8,zero,2008178 <__alt_data_end+0xff008178>
 2008198:	010000c4 	movi	r4,3
 200819c:	21c02d2e 	bgeu	r4,r7,2008254 <memset+0x100>
 20081a0:	29003fcc 	andi	r4,r5,255
 20081a4:	200c923a 	slli	r6,r4,8
 20081a8:	3108b03a 	or	r4,r6,r4
 20081ac:	200c943a 	slli	r6,r4,16
 20081b0:	218cb03a 	or	r6,r4,r6
 20081b4:	010003c4 	movi	r4,15
 20081b8:	21c0182e 	bgeu	r4,r7,200821c <memset+0xc8>
 20081bc:	3b3ffc04 	addi	r12,r7,-16
 20081c0:	6018d13a 	srli	r12,r12,4
 20081c4:	1a000104 	addi	r8,r3,4
 20081c8:	1ac00204 	addi	r11,r3,8
 20081cc:	6008913a 	slli	r4,r12,4
 20081d0:	1a800304 	addi	r10,r3,12
 20081d4:	1813883a 	mov	r9,r3
 20081d8:	21000504 	addi	r4,r4,20
 20081dc:	1909883a 	add	r4,r3,r4
 20081e0:	49800015 	stw	r6,0(r9)
 20081e4:	41800015 	stw	r6,0(r8)
 20081e8:	59800015 	stw	r6,0(r11)
 20081ec:	51800015 	stw	r6,0(r10)
 20081f0:	42000404 	addi	r8,r8,16
 20081f4:	4a400404 	addi	r9,r9,16
 20081f8:	5ac00404 	addi	r11,r11,16
 20081fc:	52800404 	addi	r10,r10,16
 2008200:	413ff71e 	bne	r8,r4,20081e0 <__alt_data_end+0xff0081e0>
 2008204:	63000044 	addi	r12,r12,1
 2008208:	6018913a 	slli	r12,r12,4
 200820c:	39c003cc 	andi	r7,r7,15
 2008210:	010000c4 	movi	r4,3
 2008214:	1b07883a 	add	r3,r3,r12
 2008218:	21c00e2e 	bgeu	r4,r7,2008254 <memset+0x100>
 200821c:	1813883a 	mov	r9,r3
 2008220:	3811883a 	mov	r8,r7
 2008224:	010000c4 	movi	r4,3
 2008228:	49800015 	stw	r6,0(r9)
 200822c:	423fff04 	addi	r8,r8,-4
 2008230:	4a400104 	addi	r9,r9,4
 2008234:	223ffc36 	bltu	r4,r8,2008228 <__alt_data_end+0xff008228>
 2008238:	393fff04 	addi	r4,r7,-4
 200823c:	2008d0ba 	srli	r4,r4,2
 2008240:	39c000cc 	andi	r7,r7,3
 2008244:	21000044 	addi	r4,r4,1
 2008248:	2109883a 	add	r4,r4,r4
 200824c:	2109883a 	add	r4,r4,r4
 2008250:	1907883a 	add	r3,r3,r4
 2008254:	38000526 	beq	r7,zero,200826c <memset+0x118>
 2008258:	19cf883a 	add	r7,r3,r7
 200825c:	19400005 	stb	r5,0(r3)
 2008260:	18c00044 	addi	r3,r3,1
 2008264:	38fffd1e 	bne	r7,r3,200825c <__alt_data_end+0xff00825c>
 2008268:	f800283a 	ret
 200826c:	f800283a 	ret
 2008270:	2007883a 	mov	r3,r4
 2008274:	300f883a 	mov	r7,r6
 2008278:	003fc706 	br	2008198 <__alt_data_end+0xff008198>

0200827c <_Balloc>:
 200827c:	20801317 	ldw	r2,76(r4)
 2008280:	defffc04 	addi	sp,sp,-16
 2008284:	dc400115 	stw	r17,4(sp)
 2008288:	dc000015 	stw	r16,0(sp)
 200828c:	dfc00315 	stw	ra,12(sp)
 2008290:	dc800215 	stw	r18,8(sp)
 2008294:	2023883a 	mov	r17,r4
 2008298:	2821883a 	mov	r16,r5
 200829c:	10000f26 	beq	r2,zero,20082dc <_Balloc+0x60>
 20082a0:	8407883a 	add	r3,r16,r16
 20082a4:	18c7883a 	add	r3,r3,r3
 20082a8:	10c7883a 	add	r3,r2,r3
 20082ac:	18800017 	ldw	r2,0(r3)
 20082b0:	10001126 	beq	r2,zero,20082f8 <_Balloc+0x7c>
 20082b4:	11000017 	ldw	r4,0(r2)
 20082b8:	19000015 	stw	r4,0(r3)
 20082bc:	10000415 	stw	zero,16(r2)
 20082c0:	10000315 	stw	zero,12(r2)
 20082c4:	dfc00317 	ldw	ra,12(sp)
 20082c8:	dc800217 	ldw	r18,8(sp)
 20082cc:	dc400117 	ldw	r17,4(sp)
 20082d0:	dc000017 	ldw	r16,0(sp)
 20082d4:	dec00404 	addi	sp,sp,16
 20082d8:	f800283a 	ret
 20082dc:	01800844 	movi	r6,33
 20082e0:	01400104 	movi	r5,4
 20082e4:	200b3240 	call	200b324 <_calloc_r>
 20082e8:	88801315 	stw	r2,76(r17)
 20082ec:	103fec1e 	bne	r2,zero,20082a0 <__alt_data_end+0xff0082a0>
 20082f0:	0005883a 	mov	r2,zero
 20082f4:	003ff306 	br	20082c4 <__alt_data_end+0xff0082c4>
 20082f8:	01400044 	movi	r5,1
 20082fc:	2c24983a 	sll	r18,r5,r16
 2008300:	8809883a 	mov	r4,r17
 2008304:	91800144 	addi	r6,r18,5
 2008308:	318d883a 	add	r6,r6,r6
 200830c:	318d883a 	add	r6,r6,r6
 2008310:	200b3240 	call	200b324 <_calloc_r>
 2008314:	103ff626 	beq	r2,zero,20082f0 <__alt_data_end+0xff0082f0>
 2008318:	14000115 	stw	r16,4(r2)
 200831c:	14800215 	stw	r18,8(r2)
 2008320:	003fe606 	br	20082bc <__alt_data_end+0xff0082bc>

02008324 <_Bfree>:
 2008324:	28000826 	beq	r5,zero,2008348 <_Bfree+0x24>
 2008328:	28c00117 	ldw	r3,4(r5)
 200832c:	20801317 	ldw	r2,76(r4)
 2008330:	18c7883a 	add	r3,r3,r3
 2008334:	18c7883a 	add	r3,r3,r3
 2008338:	10c5883a 	add	r2,r2,r3
 200833c:	10c00017 	ldw	r3,0(r2)
 2008340:	28c00015 	stw	r3,0(r5)
 2008344:	11400015 	stw	r5,0(r2)
 2008348:	f800283a 	ret

0200834c <__multadd>:
 200834c:	defff704 	addi	sp,sp,-36
 2008350:	dc800215 	stw	r18,8(sp)
 2008354:	2c800417 	ldw	r18,16(r5)
 2008358:	dd800615 	stw	r22,24(sp)
 200835c:	dd400515 	stw	r21,20(sp)
 2008360:	dd000415 	stw	r20,16(sp)
 2008364:	dcc00315 	stw	r19,12(sp)
 2008368:	dc400115 	stw	r17,4(sp)
 200836c:	dc000015 	stw	r16,0(sp)
 2008370:	dfc00815 	stw	ra,32(sp)
 2008374:	ddc00715 	stw	r23,28(sp)
 2008378:	2827883a 	mov	r19,r5
 200837c:	2029883a 	mov	r20,r4
 2008380:	3023883a 	mov	r17,r6
 2008384:	3821883a 	mov	r16,r7
 2008388:	2d400504 	addi	r21,r5,20
 200838c:	002d883a 	mov	r22,zero
 2008390:	adc00017 	ldw	r23,0(r21)
 2008394:	880b883a 	mov	r5,r17
 2008398:	ad400104 	addi	r21,r21,4
 200839c:	b93fffcc 	andi	r4,r23,65535
 20083a0:	200c9300 	call	200c930 <__mulsi3>
 20083a4:	b808d43a 	srli	r4,r23,16
 20083a8:	880b883a 	mov	r5,r17
 20083ac:	1421883a 	add	r16,r2,r16
 20083b0:	200c9300 	call	200c930 <__mulsi3>
 20083b4:	800ed43a 	srli	r7,r16,16
 20083b8:	80ffffcc 	andi	r3,r16,65535
 20083bc:	b5800044 	addi	r22,r22,1
 20083c0:	11c5883a 	add	r2,r2,r7
 20083c4:	100e943a 	slli	r7,r2,16
 20083c8:	1020d43a 	srli	r16,r2,16
 20083cc:	38c7883a 	add	r3,r7,r3
 20083d0:	a8ffff15 	stw	r3,-4(r21)
 20083d4:	b4bfee16 	blt	r22,r18,2008390 <__alt_data_end+0xff008390>
 20083d8:	80000926 	beq	r16,zero,2008400 <__multadd+0xb4>
 20083dc:	98800217 	ldw	r2,8(r19)
 20083e0:	9080130e 	bge	r18,r2,2008430 <__multadd+0xe4>
 20083e4:	90800144 	addi	r2,r18,5
 20083e8:	1085883a 	add	r2,r2,r2
 20083ec:	1085883a 	add	r2,r2,r2
 20083f0:	9885883a 	add	r2,r19,r2
 20083f4:	14000015 	stw	r16,0(r2)
 20083f8:	94800044 	addi	r18,r18,1
 20083fc:	9c800415 	stw	r18,16(r19)
 2008400:	9805883a 	mov	r2,r19
 2008404:	dfc00817 	ldw	ra,32(sp)
 2008408:	ddc00717 	ldw	r23,28(sp)
 200840c:	dd800617 	ldw	r22,24(sp)
 2008410:	dd400517 	ldw	r21,20(sp)
 2008414:	dd000417 	ldw	r20,16(sp)
 2008418:	dcc00317 	ldw	r19,12(sp)
 200841c:	dc800217 	ldw	r18,8(sp)
 2008420:	dc400117 	ldw	r17,4(sp)
 2008424:	dc000017 	ldw	r16,0(sp)
 2008428:	dec00904 	addi	sp,sp,36
 200842c:	f800283a 	ret
 2008430:	99400117 	ldw	r5,4(r19)
 2008434:	a009883a 	mov	r4,r20
 2008438:	29400044 	addi	r5,r5,1
 200843c:	200827c0 	call	200827c <_Balloc>
 2008440:	99800417 	ldw	r6,16(r19)
 2008444:	99400304 	addi	r5,r19,12
 2008448:	11000304 	addi	r4,r2,12
 200844c:	31800084 	addi	r6,r6,2
 2008450:	318d883a 	add	r6,r6,r6
 2008454:	318d883a 	add	r6,r6,r6
 2008458:	1023883a 	mov	r17,r2
 200845c:	2007eb00 	call	2007eb0 <memcpy>
 2008460:	98000a26 	beq	r19,zero,200848c <__multadd+0x140>
 2008464:	98c00117 	ldw	r3,4(r19)
 2008468:	a0801317 	ldw	r2,76(r20)
 200846c:	18c7883a 	add	r3,r3,r3
 2008470:	18c7883a 	add	r3,r3,r3
 2008474:	10c5883a 	add	r2,r2,r3
 2008478:	10c00017 	ldw	r3,0(r2)
 200847c:	98c00015 	stw	r3,0(r19)
 2008480:	14c00015 	stw	r19,0(r2)
 2008484:	8827883a 	mov	r19,r17
 2008488:	003fd606 	br	20083e4 <__alt_data_end+0xff0083e4>
 200848c:	8827883a 	mov	r19,r17
 2008490:	003fd406 	br	20083e4 <__alt_data_end+0xff0083e4>

02008494 <__s2b>:
 2008494:	defff904 	addi	sp,sp,-28
 2008498:	dc400115 	stw	r17,4(sp)
 200849c:	dc000015 	stw	r16,0(sp)
 20084a0:	2023883a 	mov	r17,r4
 20084a4:	2821883a 	mov	r16,r5
 20084a8:	39000204 	addi	r4,r7,8
 20084ac:	01400244 	movi	r5,9
 20084b0:	dcc00315 	stw	r19,12(sp)
 20084b4:	dc800215 	stw	r18,8(sp)
 20084b8:	dfc00615 	stw	ra,24(sp)
 20084bc:	dd400515 	stw	r21,20(sp)
 20084c0:	dd000415 	stw	r20,16(sp)
 20084c4:	3825883a 	mov	r18,r7
 20084c8:	3027883a 	mov	r19,r6
 20084cc:	200c77c0 	call	200c77c <__divsi3>
 20084d0:	00c00044 	movi	r3,1
 20084d4:	000b883a 	mov	r5,zero
 20084d8:	1880030e 	bge	r3,r2,20084e8 <__s2b+0x54>
 20084dc:	18c7883a 	add	r3,r3,r3
 20084e0:	29400044 	addi	r5,r5,1
 20084e4:	18bffd16 	blt	r3,r2,20084dc <__alt_data_end+0xff0084dc>
 20084e8:	8809883a 	mov	r4,r17
 20084ec:	200827c0 	call	200827c <_Balloc>
 20084f0:	d8c00717 	ldw	r3,28(sp)
 20084f4:	10c00515 	stw	r3,20(r2)
 20084f8:	00c00044 	movi	r3,1
 20084fc:	10c00415 	stw	r3,16(r2)
 2008500:	00c00244 	movi	r3,9
 2008504:	1cc0210e 	bge	r3,r19,200858c <__s2b+0xf8>
 2008508:	80eb883a 	add	r21,r16,r3
 200850c:	a829883a 	mov	r20,r21
 2008510:	84e1883a 	add	r16,r16,r19
 2008514:	a1c00007 	ldb	r7,0(r20)
 2008518:	01800284 	movi	r6,10
 200851c:	a5000044 	addi	r20,r20,1
 2008520:	100b883a 	mov	r5,r2
 2008524:	39fff404 	addi	r7,r7,-48
 2008528:	8809883a 	mov	r4,r17
 200852c:	200834c0 	call	200834c <__multadd>
 2008530:	a43ff81e 	bne	r20,r16,2008514 <__alt_data_end+0xff008514>
 2008534:	ace1883a 	add	r16,r21,r19
 2008538:	843ffe04 	addi	r16,r16,-8
 200853c:	9c800a0e 	bge	r19,r18,2008568 <__s2b+0xd4>
 2008540:	94e5c83a 	sub	r18,r18,r19
 2008544:	84a5883a 	add	r18,r16,r18
 2008548:	81c00007 	ldb	r7,0(r16)
 200854c:	01800284 	movi	r6,10
 2008550:	84000044 	addi	r16,r16,1
 2008554:	100b883a 	mov	r5,r2
 2008558:	39fff404 	addi	r7,r7,-48
 200855c:	8809883a 	mov	r4,r17
 2008560:	200834c0 	call	200834c <__multadd>
 2008564:	84bff81e 	bne	r16,r18,2008548 <__alt_data_end+0xff008548>
 2008568:	dfc00617 	ldw	ra,24(sp)
 200856c:	dd400517 	ldw	r21,20(sp)
 2008570:	dd000417 	ldw	r20,16(sp)
 2008574:	dcc00317 	ldw	r19,12(sp)
 2008578:	dc800217 	ldw	r18,8(sp)
 200857c:	dc400117 	ldw	r17,4(sp)
 2008580:	dc000017 	ldw	r16,0(sp)
 2008584:	dec00704 	addi	sp,sp,28
 2008588:	f800283a 	ret
 200858c:	84000284 	addi	r16,r16,10
 2008590:	1827883a 	mov	r19,r3
 2008594:	003fe906 	br	200853c <__alt_data_end+0xff00853c>

02008598 <__hi0bits>:
 2008598:	20bfffec 	andhi	r2,r4,65535
 200859c:	1000141e 	bne	r2,zero,20085f0 <__hi0bits+0x58>
 20085a0:	2008943a 	slli	r4,r4,16
 20085a4:	00800404 	movi	r2,16
 20085a8:	20ffc02c 	andhi	r3,r4,65280
 20085ac:	1800021e 	bne	r3,zero,20085b8 <__hi0bits+0x20>
 20085b0:	2008923a 	slli	r4,r4,8
 20085b4:	10800204 	addi	r2,r2,8
 20085b8:	20fc002c 	andhi	r3,r4,61440
 20085bc:	1800021e 	bne	r3,zero,20085c8 <__hi0bits+0x30>
 20085c0:	2008913a 	slli	r4,r4,4
 20085c4:	10800104 	addi	r2,r2,4
 20085c8:	20f0002c 	andhi	r3,r4,49152
 20085cc:	1800031e 	bne	r3,zero,20085dc <__hi0bits+0x44>
 20085d0:	2109883a 	add	r4,r4,r4
 20085d4:	10800084 	addi	r2,r2,2
 20085d8:	2109883a 	add	r4,r4,r4
 20085dc:	20000316 	blt	r4,zero,20085ec <__hi0bits+0x54>
 20085e0:	2110002c 	andhi	r4,r4,16384
 20085e4:	2000041e 	bne	r4,zero,20085f8 <__hi0bits+0x60>
 20085e8:	00800804 	movi	r2,32
 20085ec:	f800283a 	ret
 20085f0:	0005883a 	mov	r2,zero
 20085f4:	003fec06 	br	20085a8 <__alt_data_end+0xff0085a8>
 20085f8:	10800044 	addi	r2,r2,1
 20085fc:	f800283a 	ret

02008600 <__lo0bits>:
 2008600:	20c00017 	ldw	r3,0(r4)
 2008604:	188001cc 	andi	r2,r3,7
 2008608:	10000826 	beq	r2,zero,200862c <__lo0bits+0x2c>
 200860c:	1880004c 	andi	r2,r3,1
 2008610:	1000211e 	bne	r2,zero,2008698 <__lo0bits+0x98>
 2008614:	1880008c 	andi	r2,r3,2
 2008618:	1000211e 	bne	r2,zero,20086a0 <__lo0bits+0xa0>
 200861c:	1806d0ba 	srli	r3,r3,2
 2008620:	00800084 	movi	r2,2
 2008624:	20c00015 	stw	r3,0(r4)
 2008628:	f800283a 	ret
 200862c:	18bfffcc 	andi	r2,r3,65535
 2008630:	10001326 	beq	r2,zero,2008680 <__lo0bits+0x80>
 2008634:	0005883a 	mov	r2,zero
 2008638:	19403fcc 	andi	r5,r3,255
 200863c:	2800021e 	bne	r5,zero,2008648 <__lo0bits+0x48>
 2008640:	1806d23a 	srli	r3,r3,8
 2008644:	10800204 	addi	r2,r2,8
 2008648:	194003cc 	andi	r5,r3,15
 200864c:	2800021e 	bne	r5,zero,2008658 <__lo0bits+0x58>
 2008650:	1806d13a 	srli	r3,r3,4
 2008654:	10800104 	addi	r2,r2,4
 2008658:	194000cc 	andi	r5,r3,3
 200865c:	2800021e 	bne	r5,zero,2008668 <__lo0bits+0x68>
 2008660:	1806d0ba 	srli	r3,r3,2
 2008664:	10800084 	addi	r2,r2,2
 2008668:	1940004c 	andi	r5,r3,1
 200866c:	2800081e 	bne	r5,zero,2008690 <__lo0bits+0x90>
 2008670:	1806d07a 	srli	r3,r3,1
 2008674:	1800051e 	bne	r3,zero,200868c <__lo0bits+0x8c>
 2008678:	00800804 	movi	r2,32
 200867c:	f800283a 	ret
 2008680:	1806d43a 	srli	r3,r3,16
 2008684:	00800404 	movi	r2,16
 2008688:	003feb06 	br	2008638 <__alt_data_end+0xff008638>
 200868c:	10800044 	addi	r2,r2,1
 2008690:	20c00015 	stw	r3,0(r4)
 2008694:	f800283a 	ret
 2008698:	0005883a 	mov	r2,zero
 200869c:	f800283a 	ret
 20086a0:	1806d07a 	srli	r3,r3,1
 20086a4:	00800044 	movi	r2,1
 20086a8:	20c00015 	stw	r3,0(r4)
 20086ac:	f800283a 	ret

020086b0 <__i2b>:
 20086b0:	defffd04 	addi	sp,sp,-12
 20086b4:	dc000015 	stw	r16,0(sp)
 20086b8:	04000044 	movi	r16,1
 20086bc:	dc400115 	stw	r17,4(sp)
 20086c0:	2823883a 	mov	r17,r5
 20086c4:	800b883a 	mov	r5,r16
 20086c8:	dfc00215 	stw	ra,8(sp)
 20086cc:	200827c0 	call	200827c <_Balloc>
 20086d0:	14400515 	stw	r17,20(r2)
 20086d4:	14000415 	stw	r16,16(r2)
 20086d8:	dfc00217 	ldw	ra,8(sp)
 20086dc:	dc400117 	ldw	r17,4(sp)
 20086e0:	dc000017 	ldw	r16,0(sp)
 20086e4:	dec00304 	addi	sp,sp,12
 20086e8:	f800283a 	ret

020086ec <__multiply>:
 20086ec:	deffef04 	addi	sp,sp,-68
 20086f0:	dc400815 	stw	r17,32(sp)
 20086f4:	dc000715 	stw	r16,28(sp)
 20086f8:	34400417 	ldw	r17,16(r6)
 20086fc:	2c000417 	ldw	r16,16(r5)
 2008700:	dd800d15 	stw	r22,52(sp)
 2008704:	dc800915 	stw	r18,36(sp)
 2008708:	dfc01015 	stw	ra,64(sp)
 200870c:	df000f15 	stw	fp,60(sp)
 2008710:	ddc00e15 	stw	r23,56(sp)
 2008714:	dd400c15 	stw	r21,48(sp)
 2008718:	dd000b15 	stw	r20,44(sp)
 200871c:	dcc00a15 	stw	r19,40(sp)
 2008720:	2825883a 	mov	r18,r5
 2008724:	302d883a 	mov	r22,r6
 2008728:	8440050e 	bge	r16,r17,2008740 <__multiply+0x54>
 200872c:	8007883a 	mov	r3,r16
 2008730:	3025883a 	mov	r18,r6
 2008734:	8821883a 	mov	r16,r17
 2008738:	282d883a 	mov	r22,r5
 200873c:	1823883a 	mov	r17,r3
 2008740:	90800217 	ldw	r2,8(r18)
 2008744:	8447883a 	add	r3,r16,r17
 2008748:	d8c00215 	stw	r3,8(sp)
 200874c:	91400117 	ldw	r5,4(r18)
 2008750:	10c0010e 	bge	r2,r3,2008758 <__multiply+0x6c>
 2008754:	29400044 	addi	r5,r5,1
 2008758:	200827c0 	call	200827c <_Balloc>
 200875c:	d8c00217 	ldw	r3,8(sp)
 2008760:	d8800615 	stw	r2,24(sp)
 2008764:	18eb883a 	add	r21,r3,r3
 2008768:	ad6b883a 	add	r21,r21,r21
 200876c:	10c00504 	addi	r3,r2,20
 2008770:	1d6b883a 	add	r21,r3,r21
 2008774:	d8c00115 	stw	r3,4(sp)
 2008778:	dd400315 	stw	r21,12(sp)
 200877c:	1805883a 	mov	r2,r3
 2008780:	1d40042e 	bgeu	r3,r21,2008794 <__multiply+0xa8>
 2008784:	d8c00317 	ldw	r3,12(sp)
 2008788:	10000015 	stw	zero,0(r2)
 200878c:	10800104 	addi	r2,r2,4
 2008790:	10fffc36 	bltu	r2,r3,2008784 <__alt_data_end+0xff008784>
 2008794:	8c63883a 	add	r17,r17,r17
 2008798:	b5800504 	addi	r22,r22,20
 200879c:	8c63883a 	add	r17,r17,r17
 20087a0:	94800504 	addi	r18,r18,20
 20087a4:	8421883a 	add	r16,r16,r16
 20087a8:	b463883a 	add	r17,r22,r17
 20087ac:	8421883a 	add	r16,r16,r16
 20087b0:	dd800015 	stw	r22,0(sp)
 20087b4:	dc800415 	stw	r18,16(sp)
 20087b8:	dc400515 	stw	r17,20(sp)
 20087bc:	9429883a 	add	r20,r18,r16
 20087c0:	b4404f2e 	bgeu	r22,r17,2008900 <__multiply+0x214>
 20087c4:	d8c00017 	ldw	r3,0(sp)
 20087c8:	1c800017 	ldw	r18,0(r3)
 20087cc:	947fffcc 	andi	r17,r18,65535
 20087d0:	88001e26 	beq	r17,zero,200884c <__multiply+0x160>
 20087d4:	dd800117 	ldw	r22,4(sp)
 20087d8:	dd400417 	ldw	r21,16(sp)
 20087dc:	0027883a 	mov	r19,zero
 20087e0:	ac800017 	ldw	r18,0(r21)
 20087e4:	b4000017 	ldw	r16,0(r22)
 20087e8:	880b883a 	mov	r5,r17
 20087ec:	913fffcc 	andi	r4,r18,65535
 20087f0:	200c9300 	call	200c930 <__mulsi3>
 20087f4:	9008d43a 	srli	r4,r18,16
 20087f8:	84bfffcc 	andi	r18,r16,65535
 20087fc:	1485883a 	add	r2,r2,r18
 2008800:	14e5883a 	add	r18,r2,r19
 2008804:	8020d43a 	srli	r16,r16,16
 2008808:	9026d43a 	srli	r19,r18,16
 200880c:	880b883a 	mov	r5,r17
 2008810:	200c9300 	call	200c930 <__mulsi3>
 2008814:	1405883a 	add	r2,r2,r16
 2008818:	14e1883a 	add	r16,r2,r19
 200881c:	90ffffcc 	andi	r3,r18,65535
 2008820:	8024943a 	slli	r18,r16,16
 2008824:	ad400104 	addi	r21,r21,4
 2008828:	b005883a 	mov	r2,r22
 200882c:	90c6b03a 	or	r3,r18,r3
 2008830:	b0c00015 	stw	r3,0(r22)
 2008834:	8026d43a 	srli	r19,r16,16
 2008838:	b5800104 	addi	r22,r22,4
 200883c:	ad3fe836 	bltu	r21,r20,20087e0 <__alt_data_end+0xff0087e0>
 2008840:	d8c00017 	ldw	r3,0(sp)
 2008844:	14c00115 	stw	r19,4(r2)
 2008848:	1c800017 	ldw	r18,0(r3)
 200884c:	9024d43a 	srli	r18,r18,16
 2008850:	90002226 	beq	r18,zero,20088dc <__multiply+0x1f0>
 2008854:	d8c00117 	ldw	r3,4(sp)
 2008858:	dd800417 	ldw	r22,16(sp)
 200885c:	002f883a 	mov	r23,zero
 2008860:	1f000017 	ldw	fp,0(r3)
 2008864:	1823883a 	mov	r17,r3
 2008868:	182b883a 	mov	r21,r3
 200886c:	e021883a 	mov	r16,fp
 2008870:	00000106 	br	2008878 <__multiply+0x18c>
 2008874:	982b883a 	mov	r21,r19
 2008878:	b100000b 	ldhu	r4,0(r22)
 200887c:	8020d43a 	srli	r16,r16,16
 2008880:	900b883a 	mov	r5,r18
 2008884:	200c9300 	call	200c930 <__mulsi3>
 2008888:	1405883a 	add	r2,r2,r16
 200888c:	15ef883a 	add	r23,r2,r23
 2008890:	b804943a 	slli	r2,r23,16
 2008894:	e0ffffcc 	andi	r3,fp,65535
 2008898:	8c400104 	addi	r17,r17,4
 200889c:	10c6b03a 	or	r3,r2,r3
 20088a0:	88ffff15 	stw	r3,-4(r17)
 20088a4:	b5800104 	addi	r22,r22,4
 20088a8:	b13fff17 	ldw	r4,-4(r22)
 20088ac:	acc00104 	addi	r19,r21,4
 20088b0:	900b883a 	mov	r5,r18
 20088b4:	2008d43a 	srli	r4,r4,16
 20088b8:	9c000017 	ldw	r16,0(r19)
 20088bc:	200c9300 	call	200c930 <__mulsi3>
 20088c0:	b806d43a 	srli	r3,r23,16
 20088c4:	813fffcc 	andi	r4,r16,65535
 20088c8:	1105883a 	add	r2,r2,r4
 20088cc:	10f9883a 	add	fp,r2,r3
 20088d0:	e02ed43a 	srli	r23,fp,16
 20088d4:	b53fe736 	bltu	r22,r20,2008874 <__alt_data_end+0xff008874>
 20088d8:	af000115 	stw	fp,4(r21)
 20088dc:	d8c00017 	ldw	r3,0(sp)
 20088e0:	d9000517 	ldw	r4,20(sp)
 20088e4:	18c00104 	addi	r3,r3,4
 20088e8:	d8c00015 	stw	r3,0(sp)
 20088ec:	d8c00117 	ldw	r3,4(sp)
 20088f0:	18c00104 	addi	r3,r3,4
 20088f4:	d8c00115 	stw	r3,4(sp)
 20088f8:	d8c00017 	ldw	r3,0(sp)
 20088fc:	193fb136 	bltu	r3,r4,20087c4 <__alt_data_end+0xff0087c4>
 2008900:	d8c00217 	ldw	r3,8(sp)
 2008904:	00c00c0e 	bge	zero,r3,2008938 <__multiply+0x24c>
 2008908:	d8c00317 	ldw	r3,12(sp)
 200890c:	18bfff17 	ldw	r2,-4(r3)
 2008910:	1d7fff04 	addi	r21,r3,-4
 2008914:	10000326 	beq	r2,zero,2008924 <__multiply+0x238>
 2008918:	00000706 	br	2008938 <__multiply+0x24c>
 200891c:	a8800017 	ldw	r2,0(r21)
 2008920:	1000051e 	bne	r2,zero,2008938 <__multiply+0x24c>
 2008924:	d8c00217 	ldw	r3,8(sp)
 2008928:	ad7fff04 	addi	r21,r21,-4
 200892c:	18ffffc4 	addi	r3,r3,-1
 2008930:	d8c00215 	stw	r3,8(sp)
 2008934:	183ff91e 	bne	r3,zero,200891c <__alt_data_end+0xff00891c>
 2008938:	d8c00617 	ldw	r3,24(sp)
 200893c:	d9000217 	ldw	r4,8(sp)
 2008940:	1805883a 	mov	r2,r3
 2008944:	19000415 	stw	r4,16(r3)
 2008948:	dfc01017 	ldw	ra,64(sp)
 200894c:	df000f17 	ldw	fp,60(sp)
 2008950:	ddc00e17 	ldw	r23,56(sp)
 2008954:	dd800d17 	ldw	r22,52(sp)
 2008958:	dd400c17 	ldw	r21,48(sp)
 200895c:	dd000b17 	ldw	r20,44(sp)
 2008960:	dcc00a17 	ldw	r19,40(sp)
 2008964:	dc800917 	ldw	r18,36(sp)
 2008968:	dc400817 	ldw	r17,32(sp)
 200896c:	dc000717 	ldw	r16,28(sp)
 2008970:	dec01104 	addi	sp,sp,68
 2008974:	f800283a 	ret

02008978 <__pow5mult>:
 2008978:	defffa04 	addi	sp,sp,-24
 200897c:	dcc00315 	stw	r19,12(sp)
 2008980:	dc000015 	stw	r16,0(sp)
 2008984:	dfc00515 	stw	ra,20(sp)
 2008988:	dd000415 	stw	r20,16(sp)
 200898c:	dc800215 	stw	r18,8(sp)
 2008990:	dc400115 	stw	r17,4(sp)
 2008994:	308000cc 	andi	r2,r6,3
 2008998:	3021883a 	mov	r16,r6
 200899c:	2027883a 	mov	r19,r4
 20089a0:	10002f1e 	bne	r2,zero,2008a60 <__pow5mult+0xe8>
 20089a4:	2825883a 	mov	r18,r5
 20089a8:	8021d0ba 	srai	r16,r16,2
 20089ac:	80001a26 	beq	r16,zero,2008a18 <__pow5mult+0xa0>
 20089b0:	9c401217 	ldw	r17,72(r19)
 20089b4:	8800061e 	bne	r17,zero,20089d0 <__pow5mult+0x58>
 20089b8:	00003406 	br	2008a8c <__pow5mult+0x114>
 20089bc:	8021d07a 	srai	r16,r16,1
 20089c0:	80001526 	beq	r16,zero,2008a18 <__pow5mult+0xa0>
 20089c4:	88800017 	ldw	r2,0(r17)
 20089c8:	10001c26 	beq	r2,zero,2008a3c <__pow5mult+0xc4>
 20089cc:	1023883a 	mov	r17,r2
 20089d0:	8080004c 	andi	r2,r16,1
 20089d4:	103ff926 	beq	r2,zero,20089bc <__alt_data_end+0xff0089bc>
 20089d8:	880d883a 	mov	r6,r17
 20089dc:	900b883a 	mov	r5,r18
 20089e0:	9809883a 	mov	r4,r19
 20089e4:	20086ec0 	call	20086ec <__multiply>
 20089e8:	90001b26 	beq	r18,zero,2008a58 <__pow5mult+0xe0>
 20089ec:	91000117 	ldw	r4,4(r18)
 20089f0:	98c01317 	ldw	r3,76(r19)
 20089f4:	8021d07a 	srai	r16,r16,1
 20089f8:	2109883a 	add	r4,r4,r4
 20089fc:	2109883a 	add	r4,r4,r4
 2008a00:	1907883a 	add	r3,r3,r4
 2008a04:	19000017 	ldw	r4,0(r3)
 2008a08:	91000015 	stw	r4,0(r18)
 2008a0c:	1c800015 	stw	r18,0(r3)
 2008a10:	1025883a 	mov	r18,r2
 2008a14:	803feb1e 	bne	r16,zero,20089c4 <__alt_data_end+0xff0089c4>
 2008a18:	9005883a 	mov	r2,r18
 2008a1c:	dfc00517 	ldw	ra,20(sp)
 2008a20:	dd000417 	ldw	r20,16(sp)
 2008a24:	dcc00317 	ldw	r19,12(sp)
 2008a28:	dc800217 	ldw	r18,8(sp)
 2008a2c:	dc400117 	ldw	r17,4(sp)
 2008a30:	dc000017 	ldw	r16,0(sp)
 2008a34:	dec00604 	addi	sp,sp,24
 2008a38:	f800283a 	ret
 2008a3c:	880d883a 	mov	r6,r17
 2008a40:	880b883a 	mov	r5,r17
 2008a44:	9809883a 	mov	r4,r19
 2008a48:	20086ec0 	call	20086ec <__multiply>
 2008a4c:	88800015 	stw	r2,0(r17)
 2008a50:	10000015 	stw	zero,0(r2)
 2008a54:	003fdd06 	br	20089cc <__alt_data_end+0xff0089cc>
 2008a58:	1025883a 	mov	r18,r2
 2008a5c:	003fd706 	br	20089bc <__alt_data_end+0xff0089bc>
 2008a60:	10bfffc4 	addi	r2,r2,-1
 2008a64:	1085883a 	add	r2,r2,r2
 2008a68:	00c08074 	movhi	r3,513
 2008a6c:	18c88804 	addi	r3,r3,8736
 2008a70:	1085883a 	add	r2,r2,r2
 2008a74:	1885883a 	add	r2,r3,r2
 2008a78:	11800017 	ldw	r6,0(r2)
 2008a7c:	000f883a 	mov	r7,zero
 2008a80:	200834c0 	call	200834c <__multadd>
 2008a84:	1025883a 	mov	r18,r2
 2008a88:	003fc706 	br	20089a8 <__alt_data_end+0xff0089a8>
 2008a8c:	05000044 	movi	r20,1
 2008a90:	a00b883a 	mov	r5,r20
 2008a94:	9809883a 	mov	r4,r19
 2008a98:	200827c0 	call	200827c <_Balloc>
 2008a9c:	1023883a 	mov	r17,r2
 2008aa0:	00809c44 	movi	r2,625
 2008aa4:	88800515 	stw	r2,20(r17)
 2008aa8:	8d000415 	stw	r20,16(r17)
 2008aac:	9c401215 	stw	r17,72(r19)
 2008ab0:	88000015 	stw	zero,0(r17)
 2008ab4:	003fc606 	br	20089d0 <__alt_data_end+0xff0089d0>

02008ab8 <__lshift>:
 2008ab8:	defff904 	addi	sp,sp,-28
 2008abc:	dd400515 	stw	r21,20(sp)
 2008ac0:	dcc00315 	stw	r19,12(sp)
 2008ac4:	302bd17a 	srai	r21,r6,5
 2008ac8:	2cc00417 	ldw	r19,16(r5)
 2008acc:	28800217 	ldw	r2,8(r5)
 2008ad0:	dd000415 	stw	r20,16(sp)
 2008ad4:	ace7883a 	add	r19,r21,r19
 2008ad8:	dc800215 	stw	r18,8(sp)
 2008adc:	dc400115 	stw	r17,4(sp)
 2008ae0:	dc000015 	stw	r16,0(sp)
 2008ae4:	dfc00615 	stw	ra,24(sp)
 2008ae8:	9c000044 	addi	r16,r19,1
 2008aec:	2823883a 	mov	r17,r5
 2008af0:	3029883a 	mov	r20,r6
 2008af4:	2025883a 	mov	r18,r4
 2008af8:	29400117 	ldw	r5,4(r5)
 2008afc:	1400030e 	bge	r2,r16,2008b0c <__lshift+0x54>
 2008b00:	1085883a 	add	r2,r2,r2
 2008b04:	29400044 	addi	r5,r5,1
 2008b08:	143ffd16 	blt	r2,r16,2008b00 <__alt_data_end+0xff008b00>
 2008b0c:	9009883a 	mov	r4,r18
 2008b10:	200827c0 	call	200827c <_Balloc>
 2008b14:	10c00504 	addi	r3,r2,20
 2008b18:	0540070e 	bge	zero,r21,2008b38 <__lshift+0x80>
 2008b1c:	ad6b883a 	add	r21,r21,r21
 2008b20:	ad6b883a 	add	r21,r21,r21
 2008b24:	1809883a 	mov	r4,r3
 2008b28:	1d47883a 	add	r3,r3,r21
 2008b2c:	20000015 	stw	zero,0(r4)
 2008b30:	21000104 	addi	r4,r4,4
 2008b34:	193ffd1e 	bne	r3,r4,2008b2c <__alt_data_end+0xff008b2c>
 2008b38:	8a000417 	ldw	r8,16(r17)
 2008b3c:	89000504 	addi	r4,r17,20
 2008b40:	a18007cc 	andi	r6,r20,31
 2008b44:	4211883a 	add	r8,r8,r8
 2008b48:	4211883a 	add	r8,r8,r8
 2008b4c:	2211883a 	add	r8,r4,r8
 2008b50:	30002326 	beq	r6,zero,2008be0 <__lshift+0x128>
 2008b54:	02400804 	movi	r9,32
 2008b58:	4993c83a 	sub	r9,r9,r6
 2008b5c:	000b883a 	mov	r5,zero
 2008b60:	21c00017 	ldw	r7,0(r4)
 2008b64:	1815883a 	mov	r10,r3
 2008b68:	18c00104 	addi	r3,r3,4
 2008b6c:	398e983a 	sll	r7,r7,r6
 2008b70:	21000104 	addi	r4,r4,4
 2008b74:	394ab03a 	or	r5,r7,r5
 2008b78:	197fff15 	stw	r5,-4(r3)
 2008b7c:	217fff17 	ldw	r5,-4(r4)
 2008b80:	2a4ad83a 	srl	r5,r5,r9
 2008b84:	223ff636 	bltu	r4,r8,2008b60 <__alt_data_end+0xff008b60>
 2008b88:	51400115 	stw	r5,4(r10)
 2008b8c:	28001a1e 	bne	r5,zero,2008bf8 <__lshift+0x140>
 2008b90:	843fffc4 	addi	r16,r16,-1
 2008b94:	14000415 	stw	r16,16(r2)
 2008b98:	88000826 	beq	r17,zero,2008bbc <__lshift+0x104>
 2008b9c:	89000117 	ldw	r4,4(r17)
 2008ba0:	90c01317 	ldw	r3,76(r18)
 2008ba4:	2109883a 	add	r4,r4,r4
 2008ba8:	2109883a 	add	r4,r4,r4
 2008bac:	1907883a 	add	r3,r3,r4
 2008bb0:	19000017 	ldw	r4,0(r3)
 2008bb4:	89000015 	stw	r4,0(r17)
 2008bb8:	1c400015 	stw	r17,0(r3)
 2008bbc:	dfc00617 	ldw	ra,24(sp)
 2008bc0:	dd400517 	ldw	r21,20(sp)
 2008bc4:	dd000417 	ldw	r20,16(sp)
 2008bc8:	dcc00317 	ldw	r19,12(sp)
 2008bcc:	dc800217 	ldw	r18,8(sp)
 2008bd0:	dc400117 	ldw	r17,4(sp)
 2008bd4:	dc000017 	ldw	r16,0(sp)
 2008bd8:	dec00704 	addi	sp,sp,28
 2008bdc:	f800283a 	ret
 2008be0:	21400017 	ldw	r5,0(r4)
 2008be4:	18c00104 	addi	r3,r3,4
 2008be8:	21000104 	addi	r4,r4,4
 2008bec:	197fff15 	stw	r5,-4(r3)
 2008bf0:	223ffb36 	bltu	r4,r8,2008be0 <__alt_data_end+0xff008be0>
 2008bf4:	003fe606 	br	2008b90 <__alt_data_end+0xff008b90>
 2008bf8:	9c000084 	addi	r16,r19,2
 2008bfc:	003fe406 	br	2008b90 <__alt_data_end+0xff008b90>

02008c00 <__mcmp>:
 2008c00:	20800417 	ldw	r2,16(r4)
 2008c04:	28c00417 	ldw	r3,16(r5)
 2008c08:	10c5c83a 	sub	r2,r2,r3
 2008c0c:	1000111e 	bne	r2,zero,2008c54 <__mcmp+0x54>
 2008c10:	18c7883a 	add	r3,r3,r3
 2008c14:	18c7883a 	add	r3,r3,r3
 2008c18:	21000504 	addi	r4,r4,20
 2008c1c:	29400504 	addi	r5,r5,20
 2008c20:	20c5883a 	add	r2,r4,r3
 2008c24:	28cb883a 	add	r5,r5,r3
 2008c28:	00000106 	br	2008c30 <__mcmp+0x30>
 2008c2c:	20800a2e 	bgeu	r4,r2,2008c58 <__mcmp+0x58>
 2008c30:	10bfff04 	addi	r2,r2,-4
 2008c34:	297fff04 	addi	r5,r5,-4
 2008c38:	11800017 	ldw	r6,0(r2)
 2008c3c:	28c00017 	ldw	r3,0(r5)
 2008c40:	30fffa26 	beq	r6,r3,2008c2c <__alt_data_end+0xff008c2c>
 2008c44:	30c00236 	bltu	r6,r3,2008c50 <__mcmp+0x50>
 2008c48:	00800044 	movi	r2,1
 2008c4c:	f800283a 	ret
 2008c50:	00bfffc4 	movi	r2,-1
 2008c54:	f800283a 	ret
 2008c58:	0005883a 	mov	r2,zero
 2008c5c:	f800283a 	ret

02008c60 <__mdiff>:
 2008c60:	28c00417 	ldw	r3,16(r5)
 2008c64:	30800417 	ldw	r2,16(r6)
 2008c68:	defffa04 	addi	sp,sp,-24
 2008c6c:	dcc00315 	stw	r19,12(sp)
 2008c70:	dc800215 	stw	r18,8(sp)
 2008c74:	dfc00515 	stw	ra,20(sp)
 2008c78:	dd000415 	stw	r20,16(sp)
 2008c7c:	dc400115 	stw	r17,4(sp)
 2008c80:	dc000015 	stw	r16,0(sp)
 2008c84:	1887c83a 	sub	r3,r3,r2
 2008c88:	2825883a 	mov	r18,r5
 2008c8c:	3027883a 	mov	r19,r6
 2008c90:	1800141e 	bne	r3,zero,2008ce4 <__mdiff+0x84>
 2008c94:	1085883a 	add	r2,r2,r2
 2008c98:	1085883a 	add	r2,r2,r2
 2008c9c:	2a000504 	addi	r8,r5,20
 2008ca0:	34000504 	addi	r16,r6,20
 2008ca4:	4087883a 	add	r3,r8,r2
 2008ca8:	8085883a 	add	r2,r16,r2
 2008cac:	00000106 	br	2008cb4 <__mdiff+0x54>
 2008cb0:	40c0592e 	bgeu	r8,r3,2008e18 <__mdiff+0x1b8>
 2008cb4:	18ffff04 	addi	r3,r3,-4
 2008cb8:	10bfff04 	addi	r2,r2,-4
 2008cbc:	19c00017 	ldw	r7,0(r3)
 2008cc0:	11400017 	ldw	r5,0(r2)
 2008cc4:	397ffa26 	beq	r7,r5,2008cb0 <__alt_data_end+0xff008cb0>
 2008cc8:	3940592e 	bgeu	r7,r5,2008e30 <__mdiff+0x1d0>
 2008ccc:	9005883a 	mov	r2,r18
 2008cd0:	4023883a 	mov	r17,r8
 2008cd4:	9825883a 	mov	r18,r19
 2008cd8:	05000044 	movi	r20,1
 2008cdc:	1027883a 	mov	r19,r2
 2008ce0:	00000406 	br	2008cf4 <__mdiff+0x94>
 2008ce4:	18005616 	blt	r3,zero,2008e40 <__mdiff+0x1e0>
 2008ce8:	34400504 	addi	r17,r6,20
 2008cec:	2c000504 	addi	r16,r5,20
 2008cf0:	0029883a 	mov	r20,zero
 2008cf4:	91400117 	ldw	r5,4(r18)
 2008cf8:	200827c0 	call	200827c <_Balloc>
 2008cfc:	92400417 	ldw	r9,16(r18)
 2008d00:	9b000417 	ldw	r12,16(r19)
 2008d04:	12c00504 	addi	r11,r2,20
 2008d08:	4a51883a 	add	r8,r9,r9
 2008d0c:	6319883a 	add	r12,r12,r12
 2008d10:	4211883a 	add	r8,r8,r8
 2008d14:	6319883a 	add	r12,r12,r12
 2008d18:	15000315 	stw	r20,12(r2)
 2008d1c:	8211883a 	add	r8,r16,r8
 2008d20:	8b19883a 	add	r12,r17,r12
 2008d24:	0007883a 	mov	r3,zero
 2008d28:	81400017 	ldw	r5,0(r16)
 2008d2c:	89c00017 	ldw	r7,0(r17)
 2008d30:	59800104 	addi	r6,r11,4
 2008d34:	293fffcc 	andi	r4,r5,65535
 2008d38:	20c7883a 	add	r3,r4,r3
 2008d3c:	393fffcc 	andi	r4,r7,65535
 2008d40:	1909c83a 	sub	r4,r3,r4
 2008d44:	280ad43a 	srli	r5,r5,16
 2008d48:	380ed43a 	srli	r7,r7,16
 2008d4c:	2007d43a 	srai	r3,r4,16
 2008d50:	213fffcc 	andi	r4,r4,65535
 2008d54:	29cbc83a 	sub	r5,r5,r7
 2008d58:	28c7883a 	add	r3,r5,r3
 2008d5c:	180a943a 	slli	r5,r3,16
 2008d60:	8c400104 	addi	r17,r17,4
 2008d64:	84000104 	addi	r16,r16,4
 2008d68:	2908b03a 	or	r4,r5,r4
 2008d6c:	59000015 	stw	r4,0(r11)
 2008d70:	1807d43a 	srai	r3,r3,16
 2008d74:	3015883a 	mov	r10,r6
 2008d78:	3017883a 	mov	r11,r6
 2008d7c:	8b3fea36 	bltu	r17,r12,2008d28 <__alt_data_end+0xff008d28>
 2008d80:	8200162e 	bgeu	r16,r8,2008ddc <__mdiff+0x17c>
 2008d84:	8017883a 	mov	r11,r16
 2008d88:	59400017 	ldw	r5,0(r11)
 2008d8c:	31800104 	addi	r6,r6,4
 2008d90:	5ac00104 	addi	r11,r11,4
 2008d94:	293fffcc 	andi	r4,r5,65535
 2008d98:	20c7883a 	add	r3,r4,r3
 2008d9c:	280ed43a 	srli	r7,r5,16
 2008da0:	180bd43a 	srai	r5,r3,16
 2008da4:	193fffcc 	andi	r4,r3,65535
 2008da8:	3947883a 	add	r3,r7,r5
 2008dac:	180a943a 	slli	r5,r3,16
 2008db0:	1807d43a 	srai	r3,r3,16
 2008db4:	2908b03a 	or	r4,r5,r4
 2008db8:	313fff15 	stw	r4,-4(r6)
 2008dbc:	5a3ff236 	bltu	r11,r8,2008d88 <__alt_data_end+0xff008d88>
 2008dc0:	0406303a 	nor	r3,zero,r16
 2008dc4:	1a07883a 	add	r3,r3,r8
 2008dc8:	1806d0ba 	srli	r3,r3,2
 2008dcc:	18c00044 	addi	r3,r3,1
 2008dd0:	18c7883a 	add	r3,r3,r3
 2008dd4:	18c7883a 	add	r3,r3,r3
 2008dd8:	50d5883a 	add	r10,r10,r3
 2008ddc:	50ffff04 	addi	r3,r10,-4
 2008de0:	2000041e 	bne	r4,zero,2008df4 <__mdiff+0x194>
 2008de4:	18ffff04 	addi	r3,r3,-4
 2008de8:	19000017 	ldw	r4,0(r3)
 2008dec:	4a7fffc4 	addi	r9,r9,-1
 2008df0:	203ffc26 	beq	r4,zero,2008de4 <__alt_data_end+0xff008de4>
 2008df4:	12400415 	stw	r9,16(r2)
 2008df8:	dfc00517 	ldw	ra,20(sp)
 2008dfc:	dd000417 	ldw	r20,16(sp)
 2008e00:	dcc00317 	ldw	r19,12(sp)
 2008e04:	dc800217 	ldw	r18,8(sp)
 2008e08:	dc400117 	ldw	r17,4(sp)
 2008e0c:	dc000017 	ldw	r16,0(sp)
 2008e10:	dec00604 	addi	sp,sp,24
 2008e14:	f800283a 	ret
 2008e18:	000b883a 	mov	r5,zero
 2008e1c:	200827c0 	call	200827c <_Balloc>
 2008e20:	00c00044 	movi	r3,1
 2008e24:	10c00415 	stw	r3,16(r2)
 2008e28:	10000515 	stw	zero,20(r2)
 2008e2c:	003ff206 	br	2008df8 <__alt_data_end+0xff008df8>
 2008e30:	8023883a 	mov	r17,r16
 2008e34:	0029883a 	mov	r20,zero
 2008e38:	4021883a 	mov	r16,r8
 2008e3c:	003fad06 	br	2008cf4 <__alt_data_end+0xff008cf4>
 2008e40:	9005883a 	mov	r2,r18
 2008e44:	94400504 	addi	r17,r18,20
 2008e48:	9c000504 	addi	r16,r19,20
 2008e4c:	9825883a 	mov	r18,r19
 2008e50:	05000044 	movi	r20,1
 2008e54:	1027883a 	mov	r19,r2
 2008e58:	003fa606 	br	2008cf4 <__alt_data_end+0xff008cf4>

02008e5c <__ulp>:
 2008e5c:	295ffc2c 	andhi	r5,r5,32752
 2008e60:	00bf3034 	movhi	r2,64704
 2008e64:	2887883a 	add	r3,r5,r2
 2008e68:	00c0020e 	bge	zero,r3,2008e74 <__ulp+0x18>
 2008e6c:	0005883a 	mov	r2,zero
 2008e70:	f800283a 	ret
 2008e74:	00c7c83a 	sub	r3,zero,r3
 2008e78:	1807d53a 	srai	r3,r3,20
 2008e7c:	008004c4 	movi	r2,19
 2008e80:	10c00b0e 	bge	r2,r3,2008eb0 <__ulp+0x54>
 2008e84:	18bffb04 	addi	r2,r3,-20
 2008e88:	01000784 	movi	r4,30
 2008e8c:	0007883a 	mov	r3,zero
 2008e90:	20800516 	blt	r4,r2,2008ea8 <__ulp+0x4c>
 2008e94:	010007c4 	movi	r4,31
 2008e98:	2089c83a 	sub	r4,r4,r2
 2008e9c:	00800044 	movi	r2,1
 2008ea0:	1104983a 	sll	r2,r2,r4
 2008ea4:	f800283a 	ret
 2008ea8:	00800044 	movi	r2,1
 2008eac:	f800283a 	ret
 2008eb0:	01400234 	movhi	r5,8
 2008eb4:	28c7d83a 	sra	r3,r5,r3
 2008eb8:	0005883a 	mov	r2,zero
 2008ebc:	f800283a 	ret

02008ec0 <__b2d>:
 2008ec0:	defffa04 	addi	sp,sp,-24
 2008ec4:	dc000015 	stw	r16,0(sp)
 2008ec8:	24000417 	ldw	r16,16(r4)
 2008ecc:	dc400115 	stw	r17,4(sp)
 2008ed0:	24400504 	addi	r17,r4,20
 2008ed4:	8421883a 	add	r16,r16,r16
 2008ed8:	8421883a 	add	r16,r16,r16
 2008edc:	8c21883a 	add	r16,r17,r16
 2008ee0:	dc800215 	stw	r18,8(sp)
 2008ee4:	84bfff17 	ldw	r18,-4(r16)
 2008ee8:	dd000415 	stw	r20,16(sp)
 2008eec:	dcc00315 	stw	r19,12(sp)
 2008ef0:	9009883a 	mov	r4,r18
 2008ef4:	2829883a 	mov	r20,r5
 2008ef8:	dfc00515 	stw	ra,20(sp)
 2008efc:	20085980 	call	2008598 <__hi0bits>
 2008f00:	00c00804 	movi	r3,32
 2008f04:	1889c83a 	sub	r4,r3,r2
 2008f08:	a1000015 	stw	r4,0(r20)
 2008f0c:	01000284 	movi	r4,10
 2008f10:	84ffff04 	addi	r19,r16,-4
 2008f14:	20801216 	blt	r4,r2,2008f60 <__b2d+0xa0>
 2008f18:	018002c4 	movi	r6,11
 2008f1c:	308dc83a 	sub	r6,r6,r2
 2008f20:	9186d83a 	srl	r3,r18,r6
 2008f24:	18cffc34 	orhi	r3,r3,16368
 2008f28:	8cc0212e 	bgeu	r17,r19,2008fb0 <__b2d+0xf0>
 2008f2c:	813ffe17 	ldw	r4,-8(r16)
 2008f30:	218cd83a 	srl	r6,r4,r6
 2008f34:	10800544 	addi	r2,r2,21
 2008f38:	9084983a 	sll	r2,r18,r2
 2008f3c:	1184b03a 	or	r2,r2,r6
 2008f40:	dfc00517 	ldw	ra,20(sp)
 2008f44:	dd000417 	ldw	r20,16(sp)
 2008f48:	dcc00317 	ldw	r19,12(sp)
 2008f4c:	dc800217 	ldw	r18,8(sp)
 2008f50:	dc400117 	ldw	r17,4(sp)
 2008f54:	dc000017 	ldw	r16,0(sp)
 2008f58:	dec00604 	addi	sp,sp,24
 2008f5c:	f800283a 	ret
 2008f60:	8cc00f2e 	bgeu	r17,r19,2008fa0 <__b2d+0xe0>
 2008f64:	117ffd44 	addi	r5,r2,-11
 2008f68:	80bffe17 	ldw	r2,-8(r16)
 2008f6c:	28000e26 	beq	r5,zero,2008fa8 <__b2d+0xe8>
 2008f70:	1949c83a 	sub	r4,r3,r5
 2008f74:	9164983a 	sll	r18,r18,r5
 2008f78:	1106d83a 	srl	r3,r2,r4
 2008f7c:	81bffe04 	addi	r6,r16,-8
 2008f80:	948ffc34 	orhi	r18,r18,16368
 2008f84:	90c6b03a 	or	r3,r18,r3
 2008f88:	89800e2e 	bgeu	r17,r6,2008fc4 <__b2d+0x104>
 2008f8c:	81bffd17 	ldw	r6,-12(r16)
 2008f90:	1144983a 	sll	r2,r2,r5
 2008f94:	310ad83a 	srl	r5,r6,r4
 2008f98:	2884b03a 	or	r2,r5,r2
 2008f9c:	003fe806 	br	2008f40 <__alt_data_end+0xff008f40>
 2008fa0:	10bffd44 	addi	r2,r2,-11
 2008fa4:	1000041e 	bne	r2,zero,2008fb8 <__b2d+0xf8>
 2008fa8:	90cffc34 	orhi	r3,r18,16368
 2008fac:	003fe406 	br	2008f40 <__alt_data_end+0xff008f40>
 2008fb0:	000d883a 	mov	r6,zero
 2008fb4:	003fdf06 	br	2008f34 <__alt_data_end+0xff008f34>
 2008fb8:	90a4983a 	sll	r18,r18,r2
 2008fbc:	0005883a 	mov	r2,zero
 2008fc0:	003ff906 	br	2008fa8 <__alt_data_end+0xff008fa8>
 2008fc4:	1144983a 	sll	r2,r2,r5
 2008fc8:	003fdd06 	br	2008f40 <__alt_data_end+0xff008f40>

02008fcc <__d2b>:
 2008fcc:	defff804 	addi	sp,sp,-32
 2008fd0:	dc000215 	stw	r16,8(sp)
 2008fd4:	3021883a 	mov	r16,r6
 2008fd8:	dc400315 	stw	r17,12(sp)
 2008fdc:	8022907a 	slli	r17,r16,1
 2008fe0:	dd000615 	stw	r20,24(sp)
 2008fe4:	2829883a 	mov	r20,r5
 2008fe8:	01400044 	movi	r5,1
 2008fec:	dcc00515 	stw	r19,20(sp)
 2008ff0:	dc800415 	stw	r18,16(sp)
 2008ff4:	dfc00715 	stw	ra,28(sp)
 2008ff8:	3825883a 	mov	r18,r7
 2008ffc:	8822d57a 	srli	r17,r17,21
 2009000:	200827c0 	call	200827c <_Balloc>
 2009004:	1027883a 	mov	r19,r2
 2009008:	00800434 	movhi	r2,16
 200900c:	10bfffc4 	addi	r2,r2,-1
 2009010:	808c703a 	and	r6,r16,r2
 2009014:	88000126 	beq	r17,zero,200901c <__d2b+0x50>
 2009018:	31800434 	orhi	r6,r6,16
 200901c:	d9800015 	stw	r6,0(sp)
 2009020:	a0002426 	beq	r20,zero,20090b4 <__d2b+0xe8>
 2009024:	d9000104 	addi	r4,sp,4
 2009028:	dd000115 	stw	r20,4(sp)
 200902c:	20086000 	call	2008600 <__lo0bits>
 2009030:	d8c00017 	ldw	r3,0(sp)
 2009034:	10002f1e 	bne	r2,zero,20090f4 <__d2b+0x128>
 2009038:	d9000117 	ldw	r4,4(sp)
 200903c:	99000515 	stw	r4,20(r19)
 2009040:	1821003a 	cmpeq	r16,r3,zero
 2009044:	01000084 	movi	r4,2
 2009048:	2421c83a 	sub	r16,r4,r16
 200904c:	98c00615 	stw	r3,24(r19)
 2009050:	9c000415 	stw	r16,16(r19)
 2009054:	88001f1e 	bne	r17,zero,20090d4 <__d2b+0x108>
 2009058:	10bef384 	addi	r2,r2,-1074
 200905c:	90800015 	stw	r2,0(r18)
 2009060:	00900034 	movhi	r2,16384
 2009064:	10bfffc4 	addi	r2,r2,-1
 2009068:	8085883a 	add	r2,r16,r2
 200906c:	1085883a 	add	r2,r2,r2
 2009070:	1085883a 	add	r2,r2,r2
 2009074:	9885883a 	add	r2,r19,r2
 2009078:	11000517 	ldw	r4,20(r2)
 200907c:	8020917a 	slli	r16,r16,5
 2009080:	20085980 	call	2008598 <__hi0bits>
 2009084:	d8c00817 	ldw	r3,32(sp)
 2009088:	8085c83a 	sub	r2,r16,r2
 200908c:	18800015 	stw	r2,0(r3)
 2009090:	9805883a 	mov	r2,r19
 2009094:	dfc00717 	ldw	ra,28(sp)
 2009098:	dd000617 	ldw	r20,24(sp)
 200909c:	dcc00517 	ldw	r19,20(sp)
 20090a0:	dc800417 	ldw	r18,16(sp)
 20090a4:	dc400317 	ldw	r17,12(sp)
 20090a8:	dc000217 	ldw	r16,8(sp)
 20090ac:	dec00804 	addi	sp,sp,32
 20090b0:	f800283a 	ret
 20090b4:	d809883a 	mov	r4,sp
 20090b8:	20086000 	call	2008600 <__lo0bits>
 20090bc:	d8c00017 	ldw	r3,0(sp)
 20090c0:	04000044 	movi	r16,1
 20090c4:	9c000415 	stw	r16,16(r19)
 20090c8:	98c00515 	stw	r3,20(r19)
 20090cc:	10800804 	addi	r2,r2,32
 20090d0:	883fe126 	beq	r17,zero,2009058 <__alt_data_end+0xff009058>
 20090d4:	00c00d44 	movi	r3,53
 20090d8:	8c7ef344 	addi	r17,r17,-1075
 20090dc:	88a3883a 	add	r17,r17,r2
 20090e0:	1885c83a 	sub	r2,r3,r2
 20090e4:	d8c00817 	ldw	r3,32(sp)
 20090e8:	94400015 	stw	r17,0(r18)
 20090ec:	18800015 	stw	r2,0(r3)
 20090f0:	003fe706 	br	2009090 <__alt_data_end+0xff009090>
 20090f4:	01000804 	movi	r4,32
 20090f8:	2089c83a 	sub	r4,r4,r2
 20090fc:	1908983a 	sll	r4,r3,r4
 2009100:	d9400117 	ldw	r5,4(sp)
 2009104:	1886d83a 	srl	r3,r3,r2
 2009108:	2148b03a 	or	r4,r4,r5
 200910c:	99000515 	stw	r4,20(r19)
 2009110:	d8c00015 	stw	r3,0(sp)
 2009114:	003fca06 	br	2009040 <__alt_data_end+0xff009040>

02009118 <__ratio>:
 2009118:	defff904 	addi	sp,sp,-28
 200911c:	dc400315 	stw	r17,12(sp)
 2009120:	2823883a 	mov	r17,r5
 2009124:	d9400104 	addi	r5,sp,4
 2009128:	dfc00615 	stw	ra,24(sp)
 200912c:	dcc00515 	stw	r19,20(sp)
 2009130:	dc800415 	stw	r18,16(sp)
 2009134:	2027883a 	mov	r19,r4
 2009138:	dc000215 	stw	r16,8(sp)
 200913c:	2008ec00 	call	2008ec0 <__b2d>
 2009140:	d80b883a 	mov	r5,sp
 2009144:	8809883a 	mov	r4,r17
 2009148:	1025883a 	mov	r18,r2
 200914c:	1821883a 	mov	r16,r3
 2009150:	2008ec00 	call	2008ec0 <__b2d>
 2009154:	8a000417 	ldw	r8,16(r17)
 2009158:	99000417 	ldw	r4,16(r19)
 200915c:	d9400117 	ldw	r5,4(sp)
 2009160:	2209c83a 	sub	r4,r4,r8
 2009164:	2010917a 	slli	r8,r4,5
 2009168:	d9000017 	ldw	r4,0(sp)
 200916c:	2909c83a 	sub	r4,r5,r4
 2009170:	4109883a 	add	r4,r8,r4
 2009174:	01000e0e 	bge	zero,r4,20091b0 <__ratio+0x98>
 2009178:	2008953a 	slli	r4,r4,20
 200917c:	2421883a 	add	r16,r4,r16
 2009180:	100d883a 	mov	r6,r2
 2009184:	180f883a 	mov	r7,r3
 2009188:	9009883a 	mov	r4,r18
 200918c:	800b883a 	mov	r5,r16
 2009190:	200d2040 	call	200d204 <__divdf3>
 2009194:	dfc00617 	ldw	ra,24(sp)
 2009198:	dcc00517 	ldw	r19,20(sp)
 200919c:	dc800417 	ldw	r18,16(sp)
 20091a0:	dc400317 	ldw	r17,12(sp)
 20091a4:	dc000217 	ldw	r16,8(sp)
 20091a8:	dec00704 	addi	sp,sp,28
 20091ac:	f800283a 	ret
 20091b0:	2008953a 	slli	r4,r4,20
 20091b4:	1907c83a 	sub	r3,r3,r4
 20091b8:	003ff106 	br	2009180 <__alt_data_end+0xff009180>

020091bc <_mprec_log10>:
 20091bc:	defffe04 	addi	sp,sp,-8
 20091c0:	dc000015 	stw	r16,0(sp)
 20091c4:	dfc00115 	stw	ra,4(sp)
 20091c8:	008005c4 	movi	r2,23
 20091cc:	2021883a 	mov	r16,r4
 20091d0:	11000d0e 	bge	r2,r4,2009208 <_mprec_log10+0x4c>
 20091d4:	0005883a 	mov	r2,zero
 20091d8:	00cffc34 	movhi	r3,16368
 20091dc:	843fffc4 	addi	r16,r16,-1
 20091e0:	000d883a 	mov	r6,zero
 20091e4:	01d00934 	movhi	r7,16420
 20091e8:	1009883a 	mov	r4,r2
 20091ec:	180b883a 	mov	r5,r3
 20091f0:	200de2c0 	call	200de2c <__muldf3>
 20091f4:	803ff91e 	bne	r16,zero,20091dc <__alt_data_end+0xff0091dc>
 20091f8:	dfc00117 	ldw	ra,4(sp)
 20091fc:	dc000017 	ldw	r16,0(sp)
 2009200:	dec00204 	addi	sp,sp,8
 2009204:	f800283a 	ret
 2009208:	202090fa 	slli	r16,r4,3
 200920c:	00808074 	movhi	r2,513
 2009210:	10889f04 	addi	r2,r2,8828
 2009214:	1421883a 	add	r16,r2,r16
 2009218:	80800017 	ldw	r2,0(r16)
 200921c:	80c00117 	ldw	r3,4(r16)
 2009220:	dfc00117 	ldw	ra,4(sp)
 2009224:	dc000017 	ldw	r16,0(sp)
 2009228:	dec00204 	addi	sp,sp,8
 200922c:	f800283a 	ret

02009230 <__copybits>:
 2009230:	297fffc4 	addi	r5,r5,-1
 2009234:	280fd17a 	srai	r7,r5,5
 2009238:	30c00417 	ldw	r3,16(r6)
 200923c:	30800504 	addi	r2,r6,20
 2009240:	39c00044 	addi	r7,r7,1
 2009244:	18c7883a 	add	r3,r3,r3
 2009248:	39cf883a 	add	r7,r7,r7
 200924c:	18c7883a 	add	r3,r3,r3
 2009250:	39cf883a 	add	r7,r7,r7
 2009254:	10c7883a 	add	r3,r2,r3
 2009258:	21cf883a 	add	r7,r4,r7
 200925c:	10c00d2e 	bgeu	r2,r3,2009294 <__copybits+0x64>
 2009260:	200b883a 	mov	r5,r4
 2009264:	12000017 	ldw	r8,0(r2)
 2009268:	29400104 	addi	r5,r5,4
 200926c:	10800104 	addi	r2,r2,4
 2009270:	2a3fff15 	stw	r8,-4(r5)
 2009274:	10fffb36 	bltu	r2,r3,2009264 <__alt_data_end+0xff009264>
 2009278:	1985c83a 	sub	r2,r3,r6
 200927c:	10bffac4 	addi	r2,r2,-21
 2009280:	1004d0ba 	srli	r2,r2,2
 2009284:	10800044 	addi	r2,r2,1
 2009288:	1085883a 	add	r2,r2,r2
 200928c:	1085883a 	add	r2,r2,r2
 2009290:	2089883a 	add	r4,r4,r2
 2009294:	21c0032e 	bgeu	r4,r7,20092a4 <__copybits+0x74>
 2009298:	20000015 	stw	zero,0(r4)
 200929c:	21000104 	addi	r4,r4,4
 20092a0:	21fffd36 	bltu	r4,r7,2009298 <__alt_data_end+0xff009298>
 20092a4:	f800283a 	ret

020092a8 <__any_on>:
 20092a8:	20c00417 	ldw	r3,16(r4)
 20092ac:	2805d17a 	srai	r2,r5,5
 20092b0:	21000504 	addi	r4,r4,20
 20092b4:	18800d0e 	bge	r3,r2,20092ec <__any_on+0x44>
 20092b8:	18c7883a 	add	r3,r3,r3
 20092bc:	18c7883a 	add	r3,r3,r3
 20092c0:	20c7883a 	add	r3,r4,r3
 20092c4:	20c0192e 	bgeu	r4,r3,200932c <__any_on+0x84>
 20092c8:	18bfff17 	ldw	r2,-4(r3)
 20092cc:	18ffff04 	addi	r3,r3,-4
 20092d0:	1000041e 	bne	r2,zero,20092e4 <__any_on+0x3c>
 20092d4:	20c0142e 	bgeu	r4,r3,2009328 <__any_on+0x80>
 20092d8:	18ffff04 	addi	r3,r3,-4
 20092dc:	19400017 	ldw	r5,0(r3)
 20092e0:	283ffc26 	beq	r5,zero,20092d4 <__alt_data_end+0xff0092d4>
 20092e4:	00800044 	movi	r2,1
 20092e8:	f800283a 	ret
 20092ec:	10c00a0e 	bge	r2,r3,2009318 <__any_on+0x70>
 20092f0:	1085883a 	add	r2,r2,r2
 20092f4:	1085883a 	add	r2,r2,r2
 20092f8:	294007cc 	andi	r5,r5,31
 20092fc:	2087883a 	add	r3,r4,r2
 2009300:	283ff026 	beq	r5,zero,20092c4 <__alt_data_end+0xff0092c4>
 2009304:	19800017 	ldw	r6,0(r3)
 2009308:	3144d83a 	srl	r2,r6,r5
 200930c:	114a983a 	sll	r5,r2,r5
 2009310:	317ff41e 	bne	r6,r5,20092e4 <__alt_data_end+0xff0092e4>
 2009314:	003feb06 	br	20092c4 <__alt_data_end+0xff0092c4>
 2009318:	1085883a 	add	r2,r2,r2
 200931c:	1085883a 	add	r2,r2,r2
 2009320:	2087883a 	add	r3,r4,r2
 2009324:	003fe706 	br	20092c4 <__alt_data_end+0xff0092c4>
 2009328:	f800283a 	ret
 200932c:	0005883a 	mov	r2,zero
 2009330:	f800283a 	ret

02009334 <_realloc_r>:
 2009334:	defff604 	addi	sp,sp,-40
 2009338:	dc800215 	stw	r18,8(sp)
 200933c:	dfc00915 	stw	ra,36(sp)
 2009340:	df000815 	stw	fp,32(sp)
 2009344:	ddc00715 	stw	r23,28(sp)
 2009348:	dd800615 	stw	r22,24(sp)
 200934c:	dd400515 	stw	r21,20(sp)
 2009350:	dd000415 	stw	r20,16(sp)
 2009354:	dcc00315 	stw	r19,12(sp)
 2009358:	dc400115 	stw	r17,4(sp)
 200935c:	dc000015 	stw	r16,0(sp)
 2009360:	3025883a 	mov	r18,r6
 2009364:	2800b726 	beq	r5,zero,2009644 <_realloc_r+0x310>
 2009368:	282b883a 	mov	r21,r5
 200936c:	2029883a 	mov	r20,r4
 2009370:	200f7980 	call	200f798 <__malloc_lock>
 2009374:	a8bfff17 	ldw	r2,-4(r21)
 2009378:	043fff04 	movi	r16,-4
 200937c:	90c002c4 	addi	r3,r18,11
 2009380:	01000584 	movi	r4,22
 2009384:	acfffe04 	addi	r19,r21,-8
 2009388:	1420703a 	and	r16,r2,r16
 200938c:	20c0332e 	bgeu	r4,r3,200945c <_realloc_r+0x128>
 2009390:	047ffe04 	movi	r17,-8
 2009394:	1c62703a 	and	r17,r3,r17
 2009398:	8807883a 	mov	r3,r17
 200939c:	88005816 	blt	r17,zero,2009500 <_realloc_r+0x1cc>
 20093a0:	8c805736 	bltu	r17,r18,2009500 <_realloc_r+0x1cc>
 20093a4:	80c0300e 	bge	r16,r3,2009468 <_realloc_r+0x134>
 20093a8:	07008074 	movhi	fp,513
 20093ac:	e70a4d04 	addi	fp,fp,10548
 20093b0:	e1c00217 	ldw	r7,8(fp)
 20093b4:	9c09883a 	add	r4,r19,r16
 20093b8:	22000117 	ldw	r8,4(r4)
 20093bc:	21c06326 	beq	r4,r7,200954c <_realloc_r+0x218>
 20093c0:	017fff84 	movi	r5,-2
 20093c4:	414a703a 	and	r5,r8,r5
 20093c8:	214b883a 	add	r5,r4,r5
 20093cc:	29800117 	ldw	r6,4(r5)
 20093d0:	3180004c 	andi	r6,r6,1
 20093d4:	30003f26 	beq	r6,zero,20094d4 <_realloc_r+0x1a0>
 20093d8:	1080004c 	andi	r2,r2,1
 20093dc:	10008326 	beq	r2,zero,20095ec <_realloc_r+0x2b8>
 20093e0:	900b883a 	mov	r5,r18
 20093e4:	a009883a 	mov	r4,r20
 20093e8:	20075c00 	call	20075c0 <_malloc_r>
 20093ec:	1025883a 	mov	r18,r2
 20093f0:	10011e26 	beq	r2,zero,200986c <_realloc_r+0x538>
 20093f4:	a93fff17 	ldw	r4,-4(r21)
 20093f8:	10fffe04 	addi	r3,r2,-8
 20093fc:	00bfff84 	movi	r2,-2
 2009400:	2084703a 	and	r2,r4,r2
 2009404:	9885883a 	add	r2,r19,r2
 2009408:	1880ee26 	beq	r3,r2,20097c4 <_realloc_r+0x490>
 200940c:	81bfff04 	addi	r6,r16,-4
 2009410:	00800904 	movi	r2,36
 2009414:	1180b836 	bltu	r2,r6,20096f8 <_realloc_r+0x3c4>
 2009418:	00c004c4 	movi	r3,19
 200941c:	19809636 	bltu	r3,r6,2009678 <_realloc_r+0x344>
 2009420:	9005883a 	mov	r2,r18
 2009424:	a807883a 	mov	r3,r21
 2009428:	19000017 	ldw	r4,0(r3)
 200942c:	11000015 	stw	r4,0(r2)
 2009430:	19000117 	ldw	r4,4(r3)
 2009434:	11000115 	stw	r4,4(r2)
 2009438:	18c00217 	ldw	r3,8(r3)
 200943c:	10c00215 	stw	r3,8(r2)
 2009440:	a80b883a 	mov	r5,r21
 2009444:	a009883a 	mov	r4,r20
 2009448:	20069c80 	call	20069c8 <_free_r>
 200944c:	a009883a 	mov	r4,r20
 2009450:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2009454:	9005883a 	mov	r2,r18
 2009458:	00001206 	br	20094a4 <_realloc_r+0x170>
 200945c:	00c00404 	movi	r3,16
 2009460:	1823883a 	mov	r17,r3
 2009464:	003fce06 	br	20093a0 <__alt_data_end+0xff0093a0>
 2009468:	a825883a 	mov	r18,r21
 200946c:	8445c83a 	sub	r2,r16,r17
 2009470:	00c003c4 	movi	r3,15
 2009474:	18802636 	bltu	r3,r2,2009510 <_realloc_r+0x1dc>
 2009478:	99800117 	ldw	r6,4(r19)
 200947c:	9c07883a 	add	r3,r19,r16
 2009480:	3180004c 	andi	r6,r6,1
 2009484:	3420b03a 	or	r16,r6,r16
 2009488:	9c000115 	stw	r16,4(r19)
 200948c:	18800117 	ldw	r2,4(r3)
 2009490:	10800054 	ori	r2,r2,1
 2009494:	18800115 	stw	r2,4(r3)
 2009498:	a009883a 	mov	r4,r20
 200949c:	200f7bc0 	call	200f7bc <__malloc_unlock>
 20094a0:	9005883a 	mov	r2,r18
 20094a4:	dfc00917 	ldw	ra,36(sp)
 20094a8:	df000817 	ldw	fp,32(sp)
 20094ac:	ddc00717 	ldw	r23,28(sp)
 20094b0:	dd800617 	ldw	r22,24(sp)
 20094b4:	dd400517 	ldw	r21,20(sp)
 20094b8:	dd000417 	ldw	r20,16(sp)
 20094bc:	dcc00317 	ldw	r19,12(sp)
 20094c0:	dc800217 	ldw	r18,8(sp)
 20094c4:	dc400117 	ldw	r17,4(sp)
 20094c8:	dc000017 	ldw	r16,0(sp)
 20094cc:	dec00a04 	addi	sp,sp,40
 20094d0:	f800283a 	ret
 20094d4:	017fff04 	movi	r5,-4
 20094d8:	414a703a 	and	r5,r8,r5
 20094dc:	814d883a 	add	r6,r16,r5
 20094e0:	30c01f16 	blt	r6,r3,2009560 <_realloc_r+0x22c>
 20094e4:	20800317 	ldw	r2,12(r4)
 20094e8:	20c00217 	ldw	r3,8(r4)
 20094ec:	a825883a 	mov	r18,r21
 20094f0:	3021883a 	mov	r16,r6
 20094f4:	18800315 	stw	r2,12(r3)
 20094f8:	10c00215 	stw	r3,8(r2)
 20094fc:	003fdb06 	br	200946c <__alt_data_end+0xff00946c>
 2009500:	00800304 	movi	r2,12
 2009504:	a0800015 	stw	r2,0(r20)
 2009508:	0005883a 	mov	r2,zero
 200950c:	003fe506 	br	20094a4 <__alt_data_end+0xff0094a4>
 2009510:	98c00117 	ldw	r3,4(r19)
 2009514:	9c4b883a 	add	r5,r19,r17
 2009518:	11000054 	ori	r4,r2,1
 200951c:	18c0004c 	andi	r3,r3,1
 2009520:	1c62b03a 	or	r17,r3,r17
 2009524:	9c400115 	stw	r17,4(r19)
 2009528:	29000115 	stw	r4,4(r5)
 200952c:	2885883a 	add	r2,r5,r2
 2009530:	10c00117 	ldw	r3,4(r2)
 2009534:	29400204 	addi	r5,r5,8
 2009538:	a009883a 	mov	r4,r20
 200953c:	18c00054 	ori	r3,r3,1
 2009540:	10c00115 	stw	r3,4(r2)
 2009544:	20069c80 	call	20069c8 <_free_r>
 2009548:	003fd306 	br	2009498 <__alt_data_end+0xff009498>
 200954c:	017fff04 	movi	r5,-4
 2009550:	414a703a 	and	r5,r8,r5
 2009554:	89800404 	addi	r6,r17,16
 2009558:	8151883a 	add	r8,r16,r5
 200955c:	4180590e 	bge	r8,r6,20096c4 <_realloc_r+0x390>
 2009560:	1080004c 	andi	r2,r2,1
 2009564:	103f9e1e 	bne	r2,zero,20093e0 <__alt_data_end+0xff0093e0>
 2009568:	adbffe17 	ldw	r22,-8(r21)
 200956c:	00bfff04 	movi	r2,-4
 2009570:	9dadc83a 	sub	r22,r19,r22
 2009574:	b1800117 	ldw	r6,4(r22)
 2009578:	3084703a 	and	r2,r6,r2
 200957c:	20002026 	beq	r4,zero,2009600 <_realloc_r+0x2cc>
 2009580:	80af883a 	add	r23,r16,r2
 2009584:	b96f883a 	add	r23,r23,r5
 2009588:	21c05f26 	beq	r4,r7,2009708 <_realloc_r+0x3d4>
 200958c:	b8c01c16 	blt	r23,r3,2009600 <_realloc_r+0x2cc>
 2009590:	20800317 	ldw	r2,12(r4)
 2009594:	20c00217 	ldw	r3,8(r4)
 2009598:	81bfff04 	addi	r6,r16,-4
 200959c:	01000904 	movi	r4,36
 20095a0:	18800315 	stw	r2,12(r3)
 20095a4:	10c00215 	stw	r3,8(r2)
 20095a8:	b0c00217 	ldw	r3,8(r22)
 20095ac:	b0800317 	ldw	r2,12(r22)
 20095b0:	b4800204 	addi	r18,r22,8
 20095b4:	18800315 	stw	r2,12(r3)
 20095b8:	10c00215 	stw	r3,8(r2)
 20095bc:	21801b36 	bltu	r4,r6,200962c <_realloc_r+0x2f8>
 20095c0:	008004c4 	movi	r2,19
 20095c4:	1180352e 	bgeu	r2,r6,200969c <_realloc_r+0x368>
 20095c8:	a8800017 	ldw	r2,0(r21)
 20095cc:	b0800215 	stw	r2,8(r22)
 20095d0:	a8800117 	ldw	r2,4(r21)
 20095d4:	b0800315 	stw	r2,12(r22)
 20095d8:	008006c4 	movi	r2,27
 20095dc:	11807f36 	bltu	r2,r6,20097dc <_realloc_r+0x4a8>
 20095e0:	b0800404 	addi	r2,r22,16
 20095e4:	ad400204 	addi	r21,r21,8
 20095e8:	00002d06 	br	20096a0 <_realloc_r+0x36c>
 20095ec:	adbffe17 	ldw	r22,-8(r21)
 20095f0:	00bfff04 	movi	r2,-4
 20095f4:	9dadc83a 	sub	r22,r19,r22
 20095f8:	b1000117 	ldw	r4,4(r22)
 20095fc:	2084703a 	and	r2,r4,r2
 2009600:	b03f7726 	beq	r22,zero,20093e0 <__alt_data_end+0xff0093e0>
 2009604:	80af883a 	add	r23,r16,r2
 2009608:	b8ff7516 	blt	r23,r3,20093e0 <__alt_data_end+0xff0093e0>
 200960c:	b0800317 	ldw	r2,12(r22)
 2009610:	b0c00217 	ldw	r3,8(r22)
 2009614:	81bfff04 	addi	r6,r16,-4
 2009618:	01000904 	movi	r4,36
 200961c:	18800315 	stw	r2,12(r3)
 2009620:	10c00215 	stw	r3,8(r2)
 2009624:	b4800204 	addi	r18,r22,8
 2009628:	21bfe52e 	bgeu	r4,r6,20095c0 <__alt_data_end+0xff0095c0>
 200962c:	a80b883a 	mov	r5,r21
 2009630:	9009883a 	mov	r4,r18
 2009634:	2007ff80 	call	2007ff8 <memmove>
 2009638:	b821883a 	mov	r16,r23
 200963c:	b027883a 	mov	r19,r22
 2009640:	003f8a06 	br	200946c <__alt_data_end+0xff00946c>
 2009644:	300b883a 	mov	r5,r6
 2009648:	dfc00917 	ldw	ra,36(sp)
 200964c:	df000817 	ldw	fp,32(sp)
 2009650:	ddc00717 	ldw	r23,28(sp)
 2009654:	dd800617 	ldw	r22,24(sp)
 2009658:	dd400517 	ldw	r21,20(sp)
 200965c:	dd000417 	ldw	r20,16(sp)
 2009660:	dcc00317 	ldw	r19,12(sp)
 2009664:	dc800217 	ldw	r18,8(sp)
 2009668:	dc400117 	ldw	r17,4(sp)
 200966c:	dc000017 	ldw	r16,0(sp)
 2009670:	dec00a04 	addi	sp,sp,40
 2009674:	20075c01 	jmpi	20075c0 <_malloc_r>
 2009678:	a8c00017 	ldw	r3,0(r21)
 200967c:	90c00015 	stw	r3,0(r18)
 2009680:	a8c00117 	ldw	r3,4(r21)
 2009684:	90c00115 	stw	r3,4(r18)
 2009688:	00c006c4 	movi	r3,27
 200968c:	19804536 	bltu	r3,r6,20097a4 <_realloc_r+0x470>
 2009690:	90800204 	addi	r2,r18,8
 2009694:	a8c00204 	addi	r3,r21,8
 2009698:	003f6306 	br	2009428 <__alt_data_end+0xff009428>
 200969c:	9005883a 	mov	r2,r18
 20096a0:	a8c00017 	ldw	r3,0(r21)
 20096a4:	b821883a 	mov	r16,r23
 20096a8:	b027883a 	mov	r19,r22
 20096ac:	10c00015 	stw	r3,0(r2)
 20096b0:	a8c00117 	ldw	r3,4(r21)
 20096b4:	10c00115 	stw	r3,4(r2)
 20096b8:	a8c00217 	ldw	r3,8(r21)
 20096bc:	10c00215 	stw	r3,8(r2)
 20096c0:	003f6a06 	br	200946c <__alt_data_end+0xff00946c>
 20096c4:	9c67883a 	add	r19,r19,r17
 20096c8:	4445c83a 	sub	r2,r8,r17
 20096cc:	e4c00215 	stw	r19,8(fp)
 20096d0:	10800054 	ori	r2,r2,1
 20096d4:	98800115 	stw	r2,4(r19)
 20096d8:	a8bfff17 	ldw	r2,-4(r21)
 20096dc:	a009883a 	mov	r4,r20
 20096e0:	1080004c 	andi	r2,r2,1
 20096e4:	1462b03a 	or	r17,r2,r17
 20096e8:	ac7fff15 	stw	r17,-4(r21)
 20096ec:	200f7bc0 	call	200f7bc <__malloc_unlock>
 20096f0:	a805883a 	mov	r2,r21
 20096f4:	003f6b06 	br	20094a4 <__alt_data_end+0xff0094a4>
 20096f8:	a80b883a 	mov	r5,r21
 20096fc:	9009883a 	mov	r4,r18
 2009700:	2007ff80 	call	2007ff8 <memmove>
 2009704:	003f4e06 	br	2009440 <__alt_data_end+0xff009440>
 2009708:	89000404 	addi	r4,r17,16
 200970c:	b93fbc16 	blt	r23,r4,2009600 <__alt_data_end+0xff009600>
 2009710:	b0800317 	ldw	r2,12(r22)
 2009714:	b0c00217 	ldw	r3,8(r22)
 2009718:	81bfff04 	addi	r6,r16,-4
 200971c:	01000904 	movi	r4,36
 2009720:	18800315 	stw	r2,12(r3)
 2009724:	10c00215 	stw	r3,8(r2)
 2009728:	b4800204 	addi	r18,r22,8
 200972c:	21804336 	bltu	r4,r6,200983c <_realloc_r+0x508>
 2009730:	008004c4 	movi	r2,19
 2009734:	11803f2e 	bgeu	r2,r6,2009834 <_realloc_r+0x500>
 2009738:	a8800017 	ldw	r2,0(r21)
 200973c:	b0800215 	stw	r2,8(r22)
 2009740:	a8800117 	ldw	r2,4(r21)
 2009744:	b0800315 	stw	r2,12(r22)
 2009748:	008006c4 	movi	r2,27
 200974c:	11803f36 	bltu	r2,r6,200984c <_realloc_r+0x518>
 2009750:	b0800404 	addi	r2,r22,16
 2009754:	ad400204 	addi	r21,r21,8
 2009758:	a8c00017 	ldw	r3,0(r21)
 200975c:	10c00015 	stw	r3,0(r2)
 2009760:	a8c00117 	ldw	r3,4(r21)
 2009764:	10c00115 	stw	r3,4(r2)
 2009768:	a8c00217 	ldw	r3,8(r21)
 200976c:	10c00215 	stw	r3,8(r2)
 2009770:	b447883a 	add	r3,r22,r17
 2009774:	bc45c83a 	sub	r2,r23,r17
 2009778:	e0c00215 	stw	r3,8(fp)
 200977c:	10800054 	ori	r2,r2,1
 2009780:	18800115 	stw	r2,4(r3)
 2009784:	b0800117 	ldw	r2,4(r22)
 2009788:	a009883a 	mov	r4,r20
 200978c:	1080004c 	andi	r2,r2,1
 2009790:	1462b03a 	or	r17,r2,r17
 2009794:	b4400115 	stw	r17,4(r22)
 2009798:	200f7bc0 	call	200f7bc <__malloc_unlock>
 200979c:	9005883a 	mov	r2,r18
 20097a0:	003f4006 	br	20094a4 <__alt_data_end+0xff0094a4>
 20097a4:	a8c00217 	ldw	r3,8(r21)
 20097a8:	90c00215 	stw	r3,8(r18)
 20097ac:	a8c00317 	ldw	r3,12(r21)
 20097b0:	90c00315 	stw	r3,12(r18)
 20097b4:	30801126 	beq	r6,r2,20097fc <_realloc_r+0x4c8>
 20097b8:	90800404 	addi	r2,r18,16
 20097bc:	a8c00404 	addi	r3,r21,16
 20097c0:	003f1906 	br	2009428 <__alt_data_end+0xff009428>
 20097c4:	90ffff17 	ldw	r3,-4(r18)
 20097c8:	00bfff04 	movi	r2,-4
 20097cc:	a825883a 	mov	r18,r21
 20097d0:	1884703a 	and	r2,r3,r2
 20097d4:	80a1883a 	add	r16,r16,r2
 20097d8:	003f2406 	br	200946c <__alt_data_end+0xff00946c>
 20097dc:	a8800217 	ldw	r2,8(r21)
 20097e0:	b0800415 	stw	r2,16(r22)
 20097e4:	a8800317 	ldw	r2,12(r21)
 20097e8:	b0800515 	stw	r2,20(r22)
 20097ec:	31000a26 	beq	r6,r4,2009818 <_realloc_r+0x4e4>
 20097f0:	b0800604 	addi	r2,r22,24
 20097f4:	ad400404 	addi	r21,r21,16
 20097f8:	003fa906 	br	20096a0 <__alt_data_end+0xff0096a0>
 20097fc:	a9000417 	ldw	r4,16(r21)
 2009800:	90800604 	addi	r2,r18,24
 2009804:	a8c00604 	addi	r3,r21,24
 2009808:	91000415 	stw	r4,16(r18)
 200980c:	a9000517 	ldw	r4,20(r21)
 2009810:	91000515 	stw	r4,20(r18)
 2009814:	003f0406 	br	2009428 <__alt_data_end+0xff009428>
 2009818:	a8c00417 	ldw	r3,16(r21)
 200981c:	ad400604 	addi	r21,r21,24
 2009820:	b0800804 	addi	r2,r22,32
 2009824:	b0c00615 	stw	r3,24(r22)
 2009828:	a8ffff17 	ldw	r3,-4(r21)
 200982c:	b0c00715 	stw	r3,28(r22)
 2009830:	003f9b06 	br	20096a0 <__alt_data_end+0xff0096a0>
 2009834:	9005883a 	mov	r2,r18
 2009838:	003fc706 	br	2009758 <__alt_data_end+0xff009758>
 200983c:	a80b883a 	mov	r5,r21
 2009840:	9009883a 	mov	r4,r18
 2009844:	2007ff80 	call	2007ff8 <memmove>
 2009848:	003fc906 	br	2009770 <__alt_data_end+0xff009770>
 200984c:	a8800217 	ldw	r2,8(r21)
 2009850:	b0800415 	stw	r2,16(r22)
 2009854:	a8800317 	ldw	r2,12(r21)
 2009858:	b0800515 	stw	r2,20(r22)
 200985c:	31000726 	beq	r6,r4,200987c <_realloc_r+0x548>
 2009860:	b0800604 	addi	r2,r22,24
 2009864:	ad400404 	addi	r21,r21,16
 2009868:	003fbb06 	br	2009758 <__alt_data_end+0xff009758>
 200986c:	a009883a 	mov	r4,r20
 2009870:	200f7bc0 	call	200f7bc <__malloc_unlock>
 2009874:	0005883a 	mov	r2,zero
 2009878:	003f0a06 	br	20094a4 <__alt_data_end+0xff0094a4>
 200987c:	a8c00417 	ldw	r3,16(r21)
 2009880:	ad400604 	addi	r21,r21,24
 2009884:	b0800804 	addi	r2,r22,32
 2009888:	b0c00615 	stw	r3,24(r22)
 200988c:	a8ffff17 	ldw	r3,-4(r21)
 2009890:	b0c00715 	stw	r3,28(r22)
 2009894:	003fb006 	br	2009758 <__alt_data_end+0xff009758>

02009898 <__fpclassifyd>:
 2009898:	00a00034 	movhi	r2,32768
 200989c:	10bfffc4 	addi	r2,r2,-1
 20098a0:	2884703a 	and	r2,r5,r2
 20098a4:	10000726 	beq	r2,zero,20098c4 <__fpclassifyd+0x2c>
 20098a8:	00fffc34 	movhi	r3,65520
 20098ac:	019ff834 	movhi	r6,32736
 20098b0:	28c7883a 	add	r3,r5,r3
 20098b4:	31bfffc4 	addi	r6,r6,-1
 20098b8:	30c00536 	bltu	r6,r3,20098d0 <__fpclassifyd+0x38>
 20098bc:	00800104 	movi	r2,4
 20098c0:	f800283a 	ret
 20098c4:	2000021e 	bne	r4,zero,20098d0 <__fpclassifyd+0x38>
 20098c8:	00800084 	movi	r2,2
 20098cc:	f800283a 	ret
 20098d0:	00dffc34 	movhi	r3,32752
 20098d4:	019ff834 	movhi	r6,32736
 20098d8:	28cb883a 	add	r5,r5,r3
 20098dc:	31bfffc4 	addi	r6,r6,-1
 20098e0:	317ff62e 	bgeu	r6,r5,20098bc <__alt_data_end+0xff0098bc>
 20098e4:	01400434 	movhi	r5,16
 20098e8:	297fffc4 	addi	r5,r5,-1
 20098ec:	28800236 	bltu	r5,r2,20098f8 <__fpclassifyd+0x60>
 20098f0:	008000c4 	movi	r2,3
 20098f4:	f800283a 	ret
 20098f8:	10c00226 	beq	r2,r3,2009904 <__fpclassifyd+0x6c>
 20098fc:	0005883a 	mov	r2,zero
 2009900:	f800283a 	ret
 2009904:	2005003a 	cmpeq	r2,r4,zero
 2009908:	f800283a 	ret

0200990c <_sbrk_r>:
 200990c:	defffd04 	addi	sp,sp,-12
 2009910:	dc000015 	stw	r16,0(sp)
 2009914:	04008074 	movhi	r16,513
 2009918:	dc400115 	stw	r17,4(sp)
 200991c:	8416a304 	addi	r16,r16,23180
 2009920:	2023883a 	mov	r17,r4
 2009924:	2809883a 	mov	r4,r5
 2009928:	dfc00215 	stw	ra,8(sp)
 200992c:	80000015 	stw	zero,0(r16)
 2009930:	200f9a40 	call	200f9a4 <sbrk>
 2009934:	00ffffc4 	movi	r3,-1
 2009938:	10c00526 	beq	r2,r3,2009950 <_sbrk_r+0x44>
 200993c:	dfc00217 	ldw	ra,8(sp)
 2009940:	dc400117 	ldw	r17,4(sp)
 2009944:	dc000017 	ldw	r16,0(sp)
 2009948:	dec00304 	addi	sp,sp,12
 200994c:	f800283a 	ret
 2009950:	80c00017 	ldw	r3,0(r16)
 2009954:	183ff926 	beq	r3,zero,200993c <__alt_data_end+0xff00993c>
 2009958:	88c00015 	stw	r3,0(r17)
 200995c:	003ff706 	br	200993c <__alt_data_end+0xff00993c>

02009960 <__sread>:
 2009960:	defffe04 	addi	sp,sp,-8
 2009964:	dc000015 	stw	r16,0(sp)
 2009968:	2821883a 	mov	r16,r5
 200996c:	2940038f 	ldh	r5,14(r5)
 2009970:	dfc00115 	stw	ra,4(sp)
 2009974:	200b81c0 	call	200b81c <_read_r>
 2009978:	10000716 	blt	r2,zero,2009998 <__sread+0x38>
 200997c:	80c01417 	ldw	r3,80(r16)
 2009980:	1887883a 	add	r3,r3,r2
 2009984:	80c01415 	stw	r3,80(r16)
 2009988:	dfc00117 	ldw	ra,4(sp)
 200998c:	dc000017 	ldw	r16,0(sp)
 2009990:	dec00204 	addi	sp,sp,8
 2009994:	f800283a 	ret
 2009998:	80c0030b 	ldhu	r3,12(r16)
 200999c:	18fbffcc 	andi	r3,r3,61439
 20099a0:	80c0030d 	sth	r3,12(r16)
 20099a4:	dfc00117 	ldw	ra,4(sp)
 20099a8:	dc000017 	ldw	r16,0(sp)
 20099ac:	dec00204 	addi	sp,sp,8
 20099b0:	f800283a 	ret

020099b4 <__seofread>:
 20099b4:	0005883a 	mov	r2,zero
 20099b8:	f800283a 	ret

020099bc <__swrite>:
 20099bc:	2880030b 	ldhu	r2,12(r5)
 20099c0:	defffb04 	addi	sp,sp,-20
 20099c4:	dcc00315 	stw	r19,12(sp)
 20099c8:	dc800215 	stw	r18,8(sp)
 20099cc:	dc400115 	stw	r17,4(sp)
 20099d0:	dc000015 	stw	r16,0(sp)
 20099d4:	dfc00415 	stw	ra,16(sp)
 20099d8:	10c0400c 	andi	r3,r2,256
 20099dc:	2821883a 	mov	r16,r5
 20099e0:	2023883a 	mov	r17,r4
 20099e4:	3025883a 	mov	r18,r6
 20099e8:	3827883a 	mov	r19,r7
 20099ec:	18000526 	beq	r3,zero,2009a04 <__swrite+0x48>
 20099f0:	2940038f 	ldh	r5,14(r5)
 20099f4:	01c00084 	movi	r7,2
 20099f8:	000d883a 	mov	r6,zero
 20099fc:	200b7bc0 	call	200b7bc <_lseek_r>
 2009a00:	8080030b 	ldhu	r2,12(r16)
 2009a04:	8140038f 	ldh	r5,14(r16)
 2009a08:	10bbffcc 	andi	r2,r2,61439
 2009a0c:	980f883a 	mov	r7,r19
 2009a10:	900d883a 	mov	r6,r18
 2009a14:	8809883a 	mov	r4,r17
 2009a18:	8080030d 	sth	r2,12(r16)
 2009a1c:	dfc00417 	ldw	ra,16(sp)
 2009a20:	dcc00317 	ldw	r19,12(sp)
 2009a24:	dc800217 	ldw	r18,8(sp)
 2009a28:	dc400117 	ldw	r17,4(sp)
 2009a2c:	dc000017 	ldw	r16,0(sp)
 2009a30:	dec00504 	addi	sp,sp,20
 2009a34:	200b2701 	jmpi	200b270 <_write_r>

02009a38 <__sseek>:
 2009a38:	defffe04 	addi	sp,sp,-8
 2009a3c:	dc000015 	stw	r16,0(sp)
 2009a40:	2821883a 	mov	r16,r5
 2009a44:	2940038f 	ldh	r5,14(r5)
 2009a48:	dfc00115 	stw	ra,4(sp)
 2009a4c:	200b7bc0 	call	200b7bc <_lseek_r>
 2009a50:	00ffffc4 	movi	r3,-1
 2009a54:	10c00826 	beq	r2,r3,2009a78 <__sseek+0x40>
 2009a58:	80c0030b 	ldhu	r3,12(r16)
 2009a5c:	80801415 	stw	r2,80(r16)
 2009a60:	18c40014 	ori	r3,r3,4096
 2009a64:	80c0030d 	sth	r3,12(r16)
 2009a68:	dfc00117 	ldw	ra,4(sp)
 2009a6c:	dc000017 	ldw	r16,0(sp)
 2009a70:	dec00204 	addi	sp,sp,8
 2009a74:	f800283a 	ret
 2009a78:	80c0030b 	ldhu	r3,12(r16)
 2009a7c:	18fbffcc 	andi	r3,r3,61439
 2009a80:	80c0030d 	sth	r3,12(r16)
 2009a84:	dfc00117 	ldw	ra,4(sp)
 2009a88:	dc000017 	ldw	r16,0(sp)
 2009a8c:	dec00204 	addi	sp,sp,8
 2009a90:	f800283a 	ret

02009a94 <__sclose>:
 2009a94:	2940038f 	ldh	r5,14(r5)
 2009a98:	200b2d01 	jmpi	200b2d0 <_close_r>

02009a9c <strcmp>:
 2009a9c:	2144b03a 	or	r2,r4,r5
 2009aa0:	108000cc 	andi	r2,r2,3
 2009aa4:	1000171e 	bne	r2,zero,2009b04 <strcmp+0x68>
 2009aa8:	20800017 	ldw	r2,0(r4)
 2009aac:	28c00017 	ldw	r3,0(r5)
 2009ab0:	10c0141e 	bne	r2,r3,2009b04 <strcmp+0x68>
 2009ab4:	027fbff4 	movhi	r9,65279
 2009ab8:	4a7fbfc4 	addi	r9,r9,-257
 2009abc:	0086303a 	nor	r3,zero,r2
 2009ac0:	02202074 	movhi	r8,32897
 2009ac4:	1245883a 	add	r2,r2,r9
 2009ac8:	42202004 	addi	r8,r8,-32640
 2009acc:	10c4703a 	and	r2,r2,r3
 2009ad0:	1204703a 	and	r2,r2,r8
 2009ad4:	10000226 	beq	r2,zero,2009ae0 <strcmp+0x44>
 2009ad8:	00002306 	br	2009b68 <strcmp+0xcc>
 2009adc:	1000221e 	bne	r2,zero,2009b68 <strcmp+0xcc>
 2009ae0:	21000104 	addi	r4,r4,4
 2009ae4:	20c00017 	ldw	r3,0(r4)
 2009ae8:	29400104 	addi	r5,r5,4
 2009aec:	29800017 	ldw	r6,0(r5)
 2009af0:	1a4f883a 	add	r7,r3,r9
 2009af4:	00c4303a 	nor	r2,zero,r3
 2009af8:	3884703a 	and	r2,r7,r2
 2009afc:	1204703a 	and	r2,r2,r8
 2009b00:	19bff626 	beq	r3,r6,2009adc <__alt_data_end+0xff009adc>
 2009b04:	20800003 	ldbu	r2,0(r4)
 2009b08:	10c03fcc 	andi	r3,r2,255
 2009b0c:	18c0201c 	xori	r3,r3,128
 2009b10:	18ffe004 	addi	r3,r3,-128
 2009b14:	18000c26 	beq	r3,zero,2009b48 <strcmp+0xac>
 2009b18:	29800007 	ldb	r6,0(r5)
 2009b1c:	19800326 	beq	r3,r6,2009b2c <strcmp+0x90>
 2009b20:	00001306 	br	2009b70 <strcmp+0xd4>
 2009b24:	29800007 	ldb	r6,0(r5)
 2009b28:	11800b1e 	bne	r2,r6,2009b58 <strcmp+0xbc>
 2009b2c:	21000044 	addi	r4,r4,1
 2009b30:	20c00003 	ldbu	r3,0(r4)
 2009b34:	29400044 	addi	r5,r5,1
 2009b38:	18803fcc 	andi	r2,r3,255
 2009b3c:	1080201c 	xori	r2,r2,128
 2009b40:	10bfe004 	addi	r2,r2,-128
 2009b44:	103ff71e 	bne	r2,zero,2009b24 <__alt_data_end+0xff009b24>
 2009b48:	0007883a 	mov	r3,zero
 2009b4c:	28800003 	ldbu	r2,0(r5)
 2009b50:	1885c83a 	sub	r2,r3,r2
 2009b54:	f800283a 	ret
 2009b58:	28800003 	ldbu	r2,0(r5)
 2009b5c:	18c03fcc 	andi	r3,r3,255
 2009b60:	1885c83a 	sub	r2,r3,r2
 2009b64:	f800283a 	ret
 2009b68:	0005883a 	mov	r2,zero
 2009b6c:	f800283a 	ret
 2009b70:	10c03fcc 	andi	r3,r2,255
 2009b74:	003ff506 	br	2009b4c <__alt_data_end+0xff009b4c>

02009b78 <__sprint_r.part.0>:
 2009b78:	28801917 	ldw	r2,100(r5)
 2009b7c:	defff604 	addi	sp,sp,-40
 2009b80:	dd400515 	stw	r21,20(sp)
 2009b84:	dfc00915 	stw	ra,36(sp)
 2009b88:	df000815 	stw	fp,32(sp)
 2009b8c:	ddc00715 	stw	r23,28(sp)
 2009b90:	dd800615 	stw	r22,24(sp)
 2009b94:	dd000415 	stw	r20,16(sp)
 2009b98:	dcc00315 	stw	r19,12(sp)
 2009b9c:	dc800215 	stw	r18,8(sp)
 2009ba0:	dc400115 	stw	r17,4(sp)
 2009ba4:	dc000015 	stw	r16,0(sp)
 2009ba8:	1088000c 	andi	r2,r2,8192
 2009bac:	302b883a 	mov	r21,r6
 2009bb0:	10002e26 	beq	r2,zero,2009c6c <__sprint_r.part.0+0xf4>
 2009bb4:	30800217 	ldw	r2,8(r6)
 2009bb8:	35800017 	ldw	r22,0(r6)
 2009bbc:	10002926 	beq	r2,zero,2009c64 <__sprint_r.part.0+0xec>
 2009bc0:	2827883a 	mov	r19,r5
 2009bc4:	2029883a 	mov	r20,r4
 2009bc8:	b5c00104 	addi	r23,r22,4
 2009bcc:	04bfffc4 	movi	r18,-1
 2009bd0:	bc400017 	ldw	r17,0(r23)
 2009bd4:	b4000017 	ldw	r16,0(r22)
 2009bd8:	0039883a 	mov	fp,zero
 2009bdc:	8822d0ba 	srli	r17,r17,2
 2009be0:	8800031e 	bne	r17,zero,2009bf0 <__sprint_r.part.0+0x78>
 2009be4:	00001806 	br	2009c48 <__sprint_r.part.0+0xd0>
 2009be8:	84000104 	addi	r16,r16,4
 2009bec:	8f001526 	beq	r17,fp,2009c44 <__sprint_r.part.0+0xcc>
 2009bf0:	81400017 	ldw	r5,0(r16)
 2009bf4:	980d883a 	mov	r6,r19
 2009bf8:	a009883a 	mov	r4,r20
 2009bfc:	200b6680 	call	200b668 <_fputwc_r>
 2009c00:	e7000044 	addi	fp,fp,1
 2009c04:	14bff81e 	bne	r2,r18,2009be8 <__alt_data_end+0xff009be8>
 2009c08:	9005883a 	mov	r2,r18
 2009c0c:	a8000215 	stw	zero,8(r21)
 2009c10:	a8000115 	stw	zero,4(r21)
 2009c14:	dfc00917 	ldw	ra,36(sp)
 2009c18:	df000817 	ldw	fp,32(sp)
 2009c1c:	ddc00717 	ldw	r23,28(sp)
 2009c20:	dd800617 	ldw	r22,24(sp)
 2009c24:	dd400517 	ldw	r21,20(sp)
 2009c28:	dd000417 	ldw	r20,16(sp)
 2009c2c:	dcc00317 	ldw	r19,12(sp)
 2009c30:	dc800217 	ldw	r18,8(sp)
 2009c34:	dc400117 	ldw	r17,4(sp)
 2009c38:	dc000017 	ldw	r16,0(sp)
 2009c3c:	dec00a04 	addi	sp,sp,40
 2009c40:	f800283a 	ret
 2009c44:	a8800217 	ldw	r2,8(r21)
 2009c48:	8c63883a 	add	r17,r17,r17
 2009c4c:	8c63883a 	add	r17,r17,r17
 2009c50:	1445c83a 	sub	r2,r2,r17
 2009c54:	a8800215 	stw	r2,8(r21)
 2009c58:	b5800204 	addi	r22,r22,8
 2009c5c:	bdc00204 	addi	r23,r23,8
 2009c60:	103fdb1e 	bne	r2,zero,2009bd0 <__alt_data_end+0xff009bd0>
 2009c64:	0005883a 	mov	r2,zero
 2009c68:	003fe806 	br	2009c0c <__alt_data_end+0xff009c0c>
 2009c6c:	2006cd80 	call	2006cd8 <__sfvwrite_r>
 2009c70:	003fe606 	br	2009c0c <__alt_data_end+0xff009c0c>

02009c74 <__sprint_r>:
 2009c74:	30c00217 	ldw	r3,8(r6)
 2009c78:	18000126 	beq	r3,zero,2009c80 <__sprint_r+0xc>
 2009c7c:	2009b781 	jmpi	2009b78 <__sprint_r.part.0>
 2009c80:	30000115 	stw	zero,4(r6)
 2009c84:	0005883a 	mov	r2,zero
 2009c88:	f800283a 	ret

02009c8c <___vfiprintf_internal_r>:
 2009c8c:	deffca04 	addi	sp,sp,-216
 2009c90:	dd403115 	stw	r21,196(sp)
 2009c94:	dfc03515 	stw	ra,212(sp)
 2009c98:	df003415 	stw	fp,208(sp)
 2009c9c:	ddc03315 	stw	r23,204(sp)
 2009ca0:	dd803215 	stw	r22,200(sp)
 2009ca4:	dd003015 	stw	r20,192(sp)
 2009ca8:	dcc02f15 	stw	r19,188(sp)
 2009cac:	dc802e15 	stw	r18,184(sp)
 2009cb0:	dc402d15 	stw	r17,180(sp)
 2009cb4:	dc002c15 	stw	r16,176(sp)
 2009cb8:	d9002115 	stw	r4,132(sp)
 2009cbc:	d9402015 	stw	r5,128(sp)
 2009cc0:	d9c02215 	stw	r7,136(sp)
 2009cc4:	302b883a 	mov	r21,r6
 2009cc8:	20000226 	beq	r4,zero,2009cd4 <___vfiprintf_internal_r+0x48>
 2009ccc:	20800e17 	ldw	r2,56(r4)
 2009cd0:	1000cf26 	beq	r2,zero,200a010 <___vfiprintf_internal_r+0x384>
 2009cd4:	d8c02017 	ldw	r3,128(sp)
 2009cd8:	1880030b 	ldhu	r2,12(r3)
 2009cdc:	10c8000c 	andi	r3,r2,8192
 2009ce0:	1800071e 	bne	r3,zero,2009d00 <___vfiprintf_internal_r+0x74>
 2009ce4:	d9402017 	ldw	r5,128(sp)
 2009ce8:	00f7ffc4 	movi	r3,-8193
 2009cec:	10880014 	ori	r2,r2,8192
 2009cf0:	29001917 	ldw	r4,100(r5)
 2009cf4:	2880030d 	sth	r2,12(r5)
 2009cf8:	20c6703a 	and	r3,r4,r3
 2009cfc:	28c01915 	stw	r3,100(r5)
 2009d00:	10c0020c 	andi	r3,r2,8
 2009d04:	1800a526 	beq	r3,zero,2009f9c <___vfiprintf_internal_r+0x310>
 2009d08:	d9002017 	ldw	r4,128(sp)
 2009d0c:	20c00417 	ldw	r3,16(r4)
 2009d10:	1800a226 	beq	r3,zero,2009f9c <___vfiprintf_internal_r+0x310>
 2009d14:	1080068c 	andi	r2,r2,26
 2009d18:	00c00284 	movi	r3,10
 2009d1c:	10c0a826 	beq	r2,r3,2009fc0 <___vfiprintf_internal_r+0x334>
 2009d20:	d9001a04 	addi	r4,sp,104
 2009d24:	d94019c4 	addi	r5,sp,103
 2009d28:	04808074 	movhi	r18,513
 2009d2c:	2145c83a 	sub	r2,r4,r5
 2009d30:	9488d104 	addi	r18,r18,9028
 2009d34:	d9001e15 	stw	r4,120(sp)
 2009d38:	d9401f15 	stw	r5,124(sp)
 2009d3c:	dec01a15 	stw	sp,104(sp)
 2009d40:	d8001c15 	stw	zero,112(sp)
 2009d44:	d8001b15 	stw	zero,108(sp)
 2009d48:	d811883a 	mov	r8,sp
 2009d4c:	d8002615 	stw	zero,152(sp)
 2009d50:	d8002415 	stw	zero,144(sp)
 2009d54:	d8802815 	stw	r2,160(sp)
 2009d58:	a82d883a 	mov	r22,r21
 2009d5c:	b0800007 	ldb	r2,0(r22)
 2009d60:	10040d26 	beq	r2,zero,200ad98 <___vfiprintf_internal_r+0x110c>
 2009d64:	00c00944 	movi	r3,37
 2009d68:	b029883a 	mov	r20,r22
 2009d6c:	10c0021e 	bne	r2,r3,2009d78 <___vfiprintf_internal_r+0xec>
 2009d70:	00001606 	br	2009dcc <___vfiprintf_internal_r+0x140>
 2009d74:	10c00326 	beq	r2,r3,2009d84 <___vfiprintf_internal_r+0xf8>
 2009d78:	a5000044 	addi	r20,r20,1
 2009d7c:	a0800007 	ldb	r2,0(r20)
 2009d80:	103ffc1e 	bne	r2,zero,2009d74 <__alt_data_end+0xff009d74>
 2009d84:	a5a1c83a 	sub	r16,r20,r22
 2009d88:	80001026 	beq	r16,zero,2009dcc <___vfiprintf_internal_r+0x140>
 2009d8c:	d8c01c17 	ldw	r3,112(sp)
 2009d90:	d8801b17 	ldw	r2,108(sp)
 2009d94:	45800015 	stw	r22,0(r8)
 2009d98:	80c7883a 	add	r3,r16,r3
 2009d9c:	10800044 	addi	r2,r2,1
 2009da0:	44000115 	stw	r16,4(r8)
 2009da4:	d8c01c15 	stw	r3,112(sp)
 2009da8:	d8801b15 	stw	r2,108(sp)
 2009dac:	010001c4 	movi	r4,7
 2009db0:	2080750e 	bge	r4,r2,2009f88 <___vfiprintf_internal_r+0x2fc>
 2009db4:	1803951e 	bne	r3,zero,200ac0c <___vfiprintf_internal_r+0xf80>
 2009db8:	d8c02417 	ldw	r3,144(sp)
 2009dbc:	d8001b15 	stw	zero,108(sp)
 2009dc0:	d811883a 	mov	r8,sp
 2009dc4:	1c07883a 	add	r3,r3,r16
 2009dc8:	d8c02415 	stw	r3,144(sp)
 2009dcc:	a0800007 	ldb	r2,0(r20)
 2009dd0:	1002e026 	beq	r2,zero,200a954 <___vfiprintf_internal_r+0xcc8>
 2009dd4:	a5800044 	addi	r22,r20,1
 2009dd8:	a0c00047 	ldb	r3,1(r20)
 2009ddc:	d8001d85 	stb	zero,118(sp)
 2009de0:	0027883a 	mov	r19,zero
 2009de4:	d8002305 	stb	zero,140(sp)
 2009de8:	043fffc4 	movi	r16,-1
 2009dec:	d8002515 	stw	zero,148(sp)
 2009df0:	0023883a 	mov	r17,zero
 2009df4:	05001604 	movi	r20,88
 2009df8:	05400244 	movi	r21,9
 2009dfc:	402f883a 	mov	r23,r8
 2009e00:	b5800044 	addi	r22,r22,1
 2009e04:	18bff804 	addi	r2,r3,-32
 2009e08:	a0827736 	bltu	r20,r2,200a7e8 <___vfiprintf_internal_r+0xb5c>
 2009e0c:	100490ba 	slli	r2,r2,2
 2009e10:	01008074 	movhi	r4,513
 2009e14:	21278904 	addi	r4,r4,-25052
 2009e18:	1105883a 	add	r2,r2,r4
 2009e1c:	10800017 	ldw	r2,0(r2)
 2009e20:	1000683a 	jmp	r2
 2009e24:	0200a4e8 	cmpgeui	r8,zero,659
 2009e28:	0200a7e8 	cmpgeui	r8,zero,671
 2009e2c:	0200a7e8 	cmpgeui	r8,zero,671
 2009e30:	0200a504 	movi	r8,660
 2009e34:	0200a7e8 	cmpgeui	r8,zero,671
 2009e38:	0200a7e8 	cmpgeui	r8,zero,671
 2009e3c:	0200a7e8 	cmpgeui	r8,zero,671
 2009e40:	0200a7e8 	cmpgeui	r8,zero,671
 2009e44:	0200a7e8 	cmpgeui	r8,zero,671
 2009e48:	0200a7e8 	cmpgeui	r8,zero,671
 2009e4c:	0200a70c 	andi	r8,zero,668
 2009e50:	0200a730 	cmpltui	r8,zero,668
 2009e54:	0200a7e8 	cmpgeui	r8,zero,671
 2009e58:	0200a028 	cmpgeui	r8,zero,640
 2009e5c:	0200a744 	movi	r8,669
 2009e60:	0200a7e8 	cmpgeui	r8,zero,671
 2009e64:	0200a510 	cmplti	r8,zero,660
 2009e68:	0200a51c 	xori	r8,zero,660
 2009e6c:	0200a51c 	xori	r8,zero,660
 2009e70:	0200a51c 	xori	r8,zero,660
 2009e74:	0200a51c 	xori	r8,zero,660
 2009e78:	0200a51c 	xori	r8,zero,660
 2009e7c:	0200a51c 	xori	r8,zero,660
 2009e80:	0200a51c 	xori	r8,zero,660
 2009e84:	0200a51c 	xori	r8,zero,660
 2009e88:	0200a51c 	xori	r8,zero,660
 2009e8c:	0200a7e8 	cmpgeui	r8,zero,671
 2009e90:	0200a7e8 	cmpgeui	r8,zero,671
 2009e94:	0200a7e8 	cmpgeui	r8,zero,671
 2009e98:	0200a7e8 	cmpgeui	r8,zero,671
 2009e9c:	0200a7e8 	cmpgeui	r8,zero,671
 2009ea0:	0200a7e8 	cmpgeui	r8,zero,671
 2009ea4:	0200a7e8 	cmpgeui	r8,zero,671
 2009ea8:	0200a7e8 	cmpgeui	r8,zero,671
 2009eac:	0200a7e8 	cmpgeui	r8,zero,671
 2009eb0:	0200a7e8 	cmpgeui	r8,zero,671
 2009eb4:	0200a55c 	xori	r8,zero,661
 2009eb8:	0200a7e8 	cmpgeui	r8,zero,671
 2009ebc:	0200a7e8 	cmpgeui	r8,zero,671
 2009ec0:	0200a7e8 	cmpgeui	r8,zero,671
 2009ec4:	0200a7e8 	cmpgeui	r8,zero,671
 2009ec8:	0200a7e8 	cmpgeui	r8,zero,671
 2009ecc:	0200a7e8 	cmpgeui	r8,zero,671
 2009ed0:	0200a7e8 	cmpgeui	r8,zero,671
 2009ed4:	0200a7e8 	cmpgeui	r8,zero,671
 2009ed8:	0200a7e8 	cmpgeui	r8,zero,671
 2009edc:	0200a7e8 	cmpgeui	r8,zero,671
 2009ee0:	0200a598 	cmpnei	r8,zero,662
 2009ee4:	0200a7e8 	cmpgeui	r8,zero,671
 2009ee8:	0200a7e8 	cmpgeui	r8,zero,671
 2009eec:	0200a7e8 	cmpgeui	r8,zero,671
 2009ef0:	0200a7e8 	cmpgeui	r8,zero,671
 2009ef4:	0200a7e8 	cmpgeui	r8,zero,671
 2009ef8:	0200a5f4 	movhi	r8,663
 2009efc:	0200a7e8 	cmpgeui	r8,zero,671
 2009f00:	0200a7e8 	cmpgeui	r8,zero,671
 2009f04:	0200a668 	cmpgeui	r8,zero,665
 2009f08:	0200a7e8 	cmpgeui	r8,zero,671
 2009f0c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f10:	0200a7e8 	cmpgeui	r8,zero,671
 2009f14:	0200a7e8 	cmpgeui	r8,zero,671
 2009f18:	0200a7e8 	cmpgeui	r8,zero,671
 2009f1c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f20:	0200a7e8 	cmpgeui	r8,zero,671
 2009f24:	0200a7e8 	cmpgeui	r8,zero,671
 2009f28:	0200a7e8 	cmpgeui	r8,zero,671
 2009f2c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f30:	0200a410 	cmplti	r8,zero,656
 2009f34:	0200a440 	call	200a44 <__alt_mem_onchip_memory2_0+0x200a44>
 2009f38:	0200a7e8 	cmpgeui	r8,zero,671
 2009f3c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f40:	0200a7e8 	cmpgeui	r8,zero,671
 2009f44:	0200a790 	cmplti	r8,zero,670
 2009f48:	0200a440 	call	200a44 <__alt_mem_onchip_memory2_0+0x200a44>
 2009f4c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f50:	0200a7e8 	cmpgeui	r8,zero,671
 2009f54:	0200a2e8 	cmpgeui	r8,zero,651
 2009f58:	0200a7e8 	cmpgeui	r8,zero,671
 2009f5c:	0200a2fc 	xorhi	r8,zero,651
 2009f60:	0200a334 	movhi	r8,652
 2009f64:	0200a034 	movhi	r8,640
 2009f68:	0200a2dc 	xori	r8,zero,651
 2009f6c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f70:	0200a6a8 	cmpgeui	r8,zero,666
 2009f74:	0200a7e8 	cmpgeui	r8,zero,671
 2009f78:	0200a6f4 	movhi	r8,667
 2009f7c:	0200a7e8 	cmpgeui	r8,zero,671
 2009f80:	0200a7e8 	cmpgeui	r8,zero,671
 2009f84:	0200a3b8 	rdprs	r8,zero,654
 2009f88:	42000204 	addi	r8,r8,8
 2009f8c:	d8c02417 	ldw	r3,144(sp)
 2009f90:	1c07883a 	add	r3,r3,r16
 2009f94:	d8c02415 	stw	r3,144(sp)
 2009f98:	003f8c06 	br	2009dcc <__alt_data_end+0xff009dcc>
 2009f9c:	d9402017 	ldw	r5,128(sp)
 2009fa0:	d9002117 	ldw	r4,132(sp)
 2009fa4:	20048480 	call	2004848 <__swsetup_r>
 2009fa8:	1003c11e 	bne	r2,zero,200aeb0 <___vfiprintf_internal_r+0x1224>
 2009fac:	d9402017 	ldw	r5,128(sp)
 2009fb0:	00c00284 	movi	r3,10
 2009fb4:	2880030b 	ldhu	r2,12(r5)
 2009fb8:	1080068c 	andi	r2,r2,26
 2009fbc:	10ff581e 	bne	r2,r3,2009d20 <__alt_data_end+0xff009d20>
 2009fc0:	d8c02017 	ldw	r3,128(sp)
 2009fc4:	1880038f 	ldh	r2,14(r3)
 2009fc8:	103f5516 	blt	r2,zero,2009d20 <__alt_data_end+0xff009d20>
 2009fcc:	d9c02217 	ldw	r7,136(sp)
 2009fd0:	d9002117 	ldw	r4,132(sp)
 2009fd4:	a80d883a 	mov	r6,r21
 2009fd8:	180b883a 	mov	r5,r3
 2009fdc:	200b1b40 	call	200b1b4 <__sbprintf>
 2009fe0:	dfc03517 	ldw	ra,212(sp)
 2009fe4:	df003417 	ldw	fp,208(sp)
 2009fe8:	ddc03317 	ldw	r23,204(sp)
 2009fec:	dd803217 	ldw	r22,200(sp)
 2009ff0:	dd403117 	ldw	r21,196(sp)
 2009ff4:	dd003017 	ldw	r20,192(sp)
 2009ff8:	dcc02f17 	ldw	r19,188(sp)
 2009ffc:	dc802e17 	ldw	r18,184(sp)
 200a000:	dc402d17 	ldw	r17,180(sp)
 200a004:	dc002c17 	ldw	r16,176(sp)
 200a008:	dec03604 	addi	sp,sp,216
 200a00c:	f800283a 	ret
 200a010:	20068540 	call	2006854 <__sinit>
 200a014:	003f2f06 	br	2009cd4 <__alt_data_end+0xff009cd4>
 200a018:	d8c02517 	ldw	r3,148(sp)
 200a01c:	d8802215 	stw	r2,136(sp)
 200a020:	00c7c83a 	sub	r3,zero,r3
 200a024:	d8c02515 	stw	r3,148(sp)
 200a028:	8c400114 	ori	r17,r17,4
 200a02c:	b0c00007 	ldb	r3,0(r22)
 200a030:	003f7306 	br	2009e00 <__alt_data_end+0xff009e00>
 200a034:	00800c04 	movi	r2,48
 200a038:	d9402217 	ldw	r5,136(sp)
 200a03c:	d8801d05 	stb	r2,116(sp)
 200a040:	00801e04 	movi	r2,120
 200a044:	d8801d45 	stb	r2,117(sp)
 200a048:	d8001d85 	stb	zero,118(sp)
 200a04c:	b811883a 	mov	r8,r23
 200a050:	28c00104 	addi	r3,r5,4
 200a054:	2cc00017 	ldw	r19,0(r5)
 200a058:	0029883a 	mov	r20,zero
 200a05c:	88800094 	ori	r2,r17,2
 200a060:	80032516 	blt	r16,zero,200acf8 <___vfiprintf_internal_r+0x106c>
 200a064:	00bfdfc4 	movi	r2,-129
 200a068:	88a2703a 	and	r17,r17,r2
 200a06c:	d8c02215 	stw	r3,136(sp)
 200a070:	8c400094 	ori	r17,r17,2
 200a074:	98032a1e 	bne	r19,zero,200ad20 <___vfiprintf_internal_r+0x1094>
 200a078:	00808074 	movhi	r2,513
 200a07c:	10887004 	addi	r2,r2,8640
 200a080:	d8802615 	stw	r2,152(sp)
 200a084:	002b883a 	mov	r21,zero
 200a088:	8001741e 	bne	r16,zero,200a65c <___vfiprintf_internal_r+0x9d0>
 200a08c:	0021883a 	mov	r16,zero
 200a090:	0029883a 	mov	r20,zero
 200a094:	ddc01a04 	addi	r23,sp,104
 200a098:	8027883a 	mov	r19,r16
 200a09c:	8500010e 	bge	r16,r20,200a0a4 <___vfiprintf_internal_r+0x418>
 200a0a0:	a027883a 	mov	r19,r20
 200a0a4:	ad403fcc 	andi	r21,r21,255
 200a0a8:	ad40201c 	xori	r21,r21,128
 200a0ac:	ad7fe004 	addi	r21,r21,-128
 200a0b0:	a8000126 	beq	r21,zero,200a0b8 <___vfiprintf_internal_r+0x42c>
 200a0b4:	9cc00044 	addi	r19,r19,1
 200a0b8:	89c0008c 	andi	r7,r17,2
 200a0bc:	38000126 	beq	r7,zero,200a0c4 <___vfiprintf_internal_r+0x438>
 200a0c0:	9cc00084 	addi	r19,r19,2
 200a0c4:	88c0210c 	andi	r3,r17,132
 200a0c8:	1801dd1e 	bne	r3,zero,200a840 <___vfiprintf_internal_r+0xbb4>
 200a0cc:	d9402517 	ldw	r5,148(sp)
 200a0d0:	2cebc83a 	sub	r21,r5,r19
 200a0d4:	0541da0e 	bge	zero,r21,200a840 <___vfiprintf_internal_r+0xbb4>
 200a0d8:	07000404 	movi	fp,16
 200a0dc:	d8801c17 	ldw	r2,112(sp)
 200a0e0:	e543be0e 	bge	fp,r21,200afdc <___vfiprintf_internal_r+0x1350>
 200a0e4:	01408074 	movhi	r5,513
 200a0e8:	2948d504 	addi	r5,r5,9044
 200a0ec:	dc002715 	stw	r16,156(sp)
 200a0f0:	d9801b17 	ldw	r6,108(sp)
 200a0f4:	a821883a 	mov	r16,r21
 200a0f8:	d9402315 	stw	r5,140(sp)
 200a0fc:	028001c4 	movi	r10,7
 200a100:	d9c02915 	stw	r7,164(sp)
 200a104:	182b883a 	mov	r21,r3
 200a108:	00000506 	br	200a120 <___vfiprintf_internal_r+0x494>
 200a10c:	31000084 	addi	r4,r6,2
 200a110:	42000204 	addi	r8,r8,8
 200a114:	180d883a 	mov	r6,r3
 200a118:	843ffc04 	addi	r16,r16,-16
 200a11c:	e4000f0e 	bge	fp,r16,200a15c <___vfiprintf_internal_r+0x4d0>
 200a120:	01008074 	movhi	r4,513
 200a124:	10800404 	addi	r2,r2,16
 200a128:	30c00044 	addi	r3,r6,1
 200a12c:	2108d504 	addi	r4,r4,9044
 200a130:	41000015 	stw	r4,0(r8)
 200a134:	47000115 	stw	fp,4(r8)
 200a138:	d8801c15 	stw	r2,112(sp)
 200a13c:	d8c01b15 	stw	r3,108(sp)
 200a140:	50fff20e 	bge	r10,r3,200a10c <__alt_data_end+0xff00a10c>
 200a144:	1001b21e 	bne	r2,zero,200a810 <___vfiprintf_internal_r+0xb84>
 200a148:	843ffc04 	addi	r16,r16,-16
 200a14c:	000d883a 	mov	r6,zero
 200a150:	01000044 	movi	r4,1
 200a154:	d811883a 	mov	r8,sp
 200a158:	e43ff116 	blt	fp,r16,200a120 <__alt_data_end+0xff00a120>
 200a15c:	a807883a 	mov	r3,r21
 200a160:	d9c02917 	ldw	r7,164(sp)
 200a164:	802b883a 	mov	r21,r16
 200a168:	dc002717 	ldw	r16,156(sp)
 200a16c:	d9402317 	ldw	r5,140(sp)
 200a170:	a885883a 	add	r2,r21,r2
 200a174:	45400115 	stw	r21,4(r8)
 200a178:	41400015 	stw	r5,0(r8)
 200a17c:	d8801c15 	stw	r2,112(sp)
 200a180:	d9001b15 	stw	r4,108(sp)
 200a184:	014001c4 	movi	r5,7
 200a188:	29026216 	blt	r5,r4,200ab14 <___vfiprintf_internal_r+0xe88>
 200a18c:	d9801d87 	ldb	r6,118(sp)
 200a190:	42000204 	addi	r8,r8,8
 200a194:	21400044 	addi	r5,r4,1
 200a198:	3001ae1e 	bne	r6,zero,200a854 <___vfiprintf_internal_r+0xbc8>
 200a19c:	3801bb26 	beq	r7,zero,200a88c <___vfiprintf_internal_r+0xc00>
 200a1a0:	d9001d04 	addi	r4,sp,116
 200a1a4:	10800084 	addi	r2,r2,2
 200a1a8:	41000015 	stw	r4,0(r8)
 200a1ac:	01000084 	movi	r4,2
 200a1b0:	41000115 	stw	r4,4(r8)
 200a1b4:	d8801c15 	stw	r2,112(sp)
 200a1b8:	d9401b15 	stw	r5,108(sp)
 200a1bc:	010001c4 	movi	r4,7
 200a1c0:	2142680e 	bge	r4,r5,200ab64 <___vfiprintf_internal_r+0xed8>
 200a1c4:	1002b11e 	bne	r2,zero,200ac8c <___vfiprintf_internal_r+0x1000>
 200a1c8:	01802004 	movi	r6,128
 200a1cc:	01400044 	movi	r5,1
 200a1d0:	0009883a 	mov	r4,zero
 200a1d4:	d811883a 	mov	r8,sp
 200a1d8:	1981ae1e 	bne	r3,r6,200a894 <___vfiprintf_internal_r+0xc08>
 200a1dc:	d8c02517 	ldw	r3,148(sp)
 200a1e0:	1cf9c83a 	sub	fp,r3,r19
 200a1e4:	0701ab0e 	bge	zero,fp,200a894 <___vfiprintf_internal_r+0xc08>
 200a1e8:	05400404 	movi	r21,16
 200a1ec:	af03a90e 	bge	r21,fp,200b094 <___vfiprintf_internal_r+0x1408>
 200a1f0:	01408074 	movhi	r5,513
 200a1f4:	2948d104 	addi	r5,r5,9028
 200a1f8:	d9402315 	stw	r5,140(sp)
 200a1fc:	01c001c4 	movi	r7,7
 200a200:	00000506 	br	200a218 <___vfiprintf_internal_r+0x58c>
 200a204:	21800084 	addi	r6,r4,2
 200a208:	42000204 	addi	r8,r8,8
 200a20c:	1809883a 	mov	r4,r3
 200a210:	e73ffc04 	addi	fp,fp,-16
 200a214:	af000d0e 	bge	r21,fp,200a24c <___vfiprintf_internal_r+0x5c0>
 200a218:	10800404 	addi	r2,r2,16
 200a21c:	20c00044 	addi	r3,r4,1
 200a220:	44800015 	stw	r18,0(r8)
 200a224:	45400115 	stw	r21,4(r8)
 200a228:	d8801c15 	stw	r2,112(sp)
 200a22c:	d8c01b15 	stw	r3,108(sp)
 200a230:	38fff40e 	bge	r7,r3,200a204 <__alt_data_end+0xff00a204>
 200a234:	10022b1e 	bne	r2,zero,200aae4 <___vfiprintf_internal_r+0xe58>
 200a238:	e73ffc04 	addi	fp,fp,-16
 200a23c:	01800044 	movi	r6,1
 200a240:	0009883a 	mov	r4,zero
 200a244:	d811883a 	mov	r8,sp
 200a248:	af3ff316 	blt	r21,fp,200a218 <__alt_data_end+0xff00a218>
 200a24c:	d8c02317 	ldw	r3,140(sp)
 200a250:	1705883a 	add	r2,r2,fp
 200a254:	47000115 	stw	fp,4(r8)
 200a258:	40c00015 	stw	r3,0(r8)
 200a25c:	d8801c15 	stw	r2,112(sp)
 200a260:	d9801b15 	stw	r6,108(sp)
 200a264:	00c001c4 	movi	r3,7
 200a268:	19829416 	blt	r3,r6,200acbc <___vfiprintf_internal_r+0x1030>
 200a26c:	8521c83a 	sub	r16,r16,r20
 200a270:	42000204 	addi	r8,r8,8
 200a274:	31400044 	addi	r5,r6,1
 200a278:	3009883a 	mov	r4,r6
 200a27c:	04018716 	blt	zero,r16,200a89c <___vfiprintf_internal_r+0xc10>
 200a280:	a085883a 	add	r2,r20,r2
 200a284:	45c00015 	stw	r23,0(r8)
 200a288:	45000115 	stw	r20,4(r8)
 200a28c:	d8801c15 	stw	r2,112(sp)
 200a290:	d9401b15 	stw	r5,108(sp)
 200a294:	00c001c4 	movi	r3,7
 200a298:	1941c20e 	bge	r3,r5,200a9a4 <___vfiprintf_internal_r+0xd18>
 200a29c:	1002531e 	bne	r2,zero,200abec <___vfiprintf_internal_r+0xf60>
 200a2a0:	d8001b15 	stw	zero,108(sp)
 200a2a4:	8c40010c 	andi	r17,r17,4
 200a2a8:	88023226 	beq	r17,zero,200ab74 <___vfiprintf_internal_r+0xee8>
 200a2ac:	d9002517 	ldw	r4,148(sp)
 200a2b0:	24e3c83a 	sub	r17,r4,r19
 200a2b4:	04432916 	blt	zero,r17,200af5c <___vfiprintf_internal_r+0x12d0>
 200a2b8:	d8802517 	ldw	r2,148(sp)
 200a2bc:	14c0010e 	bge	r2,r19,200a2c4 <___vfiprintf_internal_r+0x638>
 200a2c0:	9805883a 	mov	r2,r19
 200a2c4:	d8c02417 	ldw	r3,144(sp)
 200a2c8:	1887883a 	add	r3,r3,r2
 200a2cc:	d8c02415 	stw	r3,144(sp)
 200a2d0:	d8001b15 	stw	zero,108(sp)
 200a2d4:	d811883a 	mov	r8,sp
 200a2d8:	003ea006 	br	2009d5c <__alt_data_end+0xff009d5c>
 200a2dc:	8c400814 	ori	r17,r17,32
 200a2e0:	b0c00007 	ldb	r3,0(r22)
 200a2e4:	003ec606 	br	2009e00 <__alt_data_end+0xff009e00>
 200a2e8:	b0c00007 	ldb	r3,0(r22)
 200a2ec:	00801b04 	movi	r2,108
 200a2f0:	18832026 	beq	r3,r2,200af74 <___vfiprintf_internal_r+0x12e8>
 200a2f4:	8c400414 	ori	r17,r17,16
 200a2f8:	003ec106 	br	2009e00 <__alt_data_end+0xff009e00>
 200a2fc:	9cc03fcc 	andi	r19,r19,255
 200a300:	b811883a 	mov	r8,r23
 200a304:	9803981e 	bne	r19,zero,200b168 <___vfiprintf_internal_r+0x14dc>
 200a308:	8880080c 	andi	r2,r17,32
 200a30c:	1002be26 	beq	r2,zero,200ae08 <___vfiprintf_internal_r+0x117c>
 200a310:	d9002217 	ldw	r4,136(sp)
 200a314:	d9402417 	ldw	r5,144(sp)
 200a318:	20800017 	ldw	r2,0(r4)
 200a31c:	2807d7fa 	srai	r3,r5,31
 200a320:	21000104 	addi	r4,r4,4
 200a324:	d9002215 	stw	r4,136(sp)
 200a328:	11400015 	stw	r5,0(r2)
 200a32c:	10c00115 	stw	r3,4(r2)
 200a330:	003e8a06 	br	2009d5c <__alt_data_end+0xff009d5c>
 200a334:	9cc03fcc 	andi	r19,r19,255
 200a338:	b811883a 	mov	r8,r23
 200a33c:	9803871e 	bne	r19,zero,200b15c <___vfiprintf_internal_r+0x14d0>
 200a340:	8880080c 	andi	r2,r17,32
 200a344:	10009a26 	beq	r2,zero,200a5b0 <___vfiprintf_internal_r+0x924>
 200a348:	d9002217 	ldw	r4,136(sp)
 200a34c:	d8001d85 	stb	zero,118(sp)
 200a350:	20800204 	addi	r2,r4,8
 200a354:	24c00017 	ldw	r19,0(r4)
 200a358:	25000117 	ldw	r20,4(r4)
 200a35c:	8002a416 	blt	r16,zero,200adf0 <___vfiprintf_internal_r+0x1164>
 200a360:	013fdfc4 	movi	r4,-129
 200a364:	9d06b03a 	or	r3,r19,r20
 200a368:	d8802215 	stw	r2,136(sp)
 200a36c:	8922703a 	and	r17,r17,r4
 200a370:	18009b26 	beq	r3,zero,200a5e0 <___vfiprintf_internal_r+0x954>
 200a374:	002b883a 	mov	r21,zero
 200a378:	ddc01a04 	addi	r23,sp,104
 200a37c:	9806d0fa 	srli	r3,r19,3
 200a380:	a008977a 	slli	r4,r20,29
 200a384:	a028d0fa 	srli	r20,r20,3
 200a388:	9cc001cc 	andi	r19,r19,7
 200a38c:	98800c04 	addi	r2,r19,48
 200a390:	bdffffc4 	addi	r23,r23,-1
 200a394:	20e6b03a 	or	r19,r4,r3
 200a398:	b8800005 	stb	r2,0(r23)
 200a39c:	9d06b03a 	or	r3,r19,r20
 200a3a0:	183ff61e 	bne	r3,zero,200a37c <__alt_data_end+0xff00a37c>
 200a3a4:	88c0004c 	andi	r3,r17,1
 200a3a8:	18021f1e 	bne	r3,zero,200ac28 <___vfiprintf_internal_r+0xf9c>
 200a3ac:	d9401e17 	ldw	r5,120(sp)
 200a3b0:	2de9c83a 	sub	r20,r5,r23
 200a3b4:	003f3806 	br	200a098 <__alt_data_end+0xff00a098>
 200a3b8:	9cc03fcc 	andi	r19,r19,255
 200a3bc:	b811883a 	mov	r8,r23
 200a3c0:	98034f1e 	bne	r19,zero,200b100 <___vfiprintf_internal_r+0x1474>
 200a3c4:	00808074 	movhi	r2,513
 200a3c8:	10887004 	addi	r2,r2,8640
 200a3cc:	d8802615 	stw	r2,152(sp)
 200a3d0:	8880080c 	andi	r2,r17,32
 200a3d4:	1000ac26 	beq	r2,zero,200a688 <___vfiprintf_internal_r+0x9fc>
 200a3d8:	d9002217 	ldw	r4,136(sp)
 200a3dc:	24c00017 	ldw	r19,0(r4)
 200a3e0:	25000117 	ldw	r20,4(r4)
 200a3e4:	21000204 	addi	r4,r4,8
 200a3e8:	d9002215 	stw	r4,136(sp)
 200a3ec:	8880004c 	andi	r2,r17,1
 200a3f0:	1001e726 	beq	r2,zero,200ab90 <___vfiprintf_internal_r+0xf04>
 200a3f4:	9d04b03a 	or	r2,r19,r20
 200a3f8:	10025c1e 	bne	r2,zero,200ad6c <___vfiprintf_internal_r+0x10e0>
 200a3fc:	d8001d85 	stb	zero,118(sp)
 200a400:	80024416 	blt	r16,zero,200ad14 <___vfiprintf_internal_r+0x1088>
 200a404:	00bfdfc4 	movi	r2,-129
 200a408:	88a2703a 	and	r17,r17,r2
 200a40c:	003f1d06 	br	200a084 <__alt_data_end+0xff00a084>
 200a410:	d8c02217 	ldw	r3,136(sp)
 200a414:	04c00044 	movi	r19,1
 200a418:	b811883a 	mov	r8,r23
 200a41c:	18800017 	ldw	r2,0(r3)
 200a420:	18c00104 	addi	r3,r3,4
 200a424:	d8001d85 	stb	zero,118(sp)
 200a428:	d8801005 	stb	r2,64(sp)
 200a42c:	d8c02215 	stw	r3,136(sp)
 200a430:	9829883a 	mov	r20,r19
 200a434:	ddc01004 	addi	r23,sp,64
 200a438:	0021883a 	mov	r16,zero
 200a43c:	003f1e06 	br	200a0b8 <__alt_data_end+0xff00a0b8>
 200a440:	9cc03fcc 	andi	r19,r19,255
 200a444:	b811883a 	mov	r8,r23
 200a448:	9803331e 	bne	r19,zero,200b118 <___vfiprintf_internal_r+0x148c>
 200a44c:	8880080c 	andi	r2,r17,32
 200a450:	10004826 	beq	r2,zero,200a574 <___vfiprintf_internal_r+0x8e8>
 200a454:	d9002217 	ldw	r4,136(sp)
 200a458:	20800117 	ldw	r2,4(r4)
 200a45c:	24c00017 	ldw	r19,0(r4)
 200a460:	21000204 	addi	r4,r4,8
 200a464:	d9002215 	stw	r4,136(sp)
 200a468:	1029883a 	mov	r20,r2
 200a46c:	10024c16 	blt	r2,zero,200ada0 <___vfiprintf_internal_r+0x1114>
 200a470:	dd401d83 	ldbu	r21,118(sp)
 200a474:	80007116 	blt	r16,zero,200a63c <___vfiprintf_internal_r+0x9b0>
 200a478:	00ffdfc4 	movi	r3,-129
 200a47c:	9d04b03a 	or	r2,r19,r20
 200a480:	88e2703a 	and	r17,r17,r3
 200a484:	1000d126 	beq	r2,zero,200a7cc <___vfiprintf_internal_r+0xb40>
 200a488:	a0023526 	beq	r20,zero,200ad60 <___vfiprintf_internal_r+0x10d4>
 200a48c:	ddc01a04 	addi	r23,sp,104
 200a490:	4039883a 	mov	fp,r8
 200a494:	9809883a 	mov	r4,r19
 200a498:	a00b883a 	mov	r5,r20
 200a49c:	01800284 	movi	r6,10
 200a4a0:	000f883a 	mov	r7,zero
 200a4a4:	200c1b80 	call	200c1b8 <__umoddi3>
 200a4a8:	10800c04 	addi	r2,r2,48
 200a4ac:	bdffffc4 	addi	r23,r23,-1
 200a4b0:	9809883a 	mov	r4,r19
 200a4b4:	a00b883a 	mov	r5,r20
 200a4b8:	b8800005 	stb	r2,0(r23)
 200a4bc:	01800284 	movi	r6,10
 200a4c0:	000f883a 	mov	r7,zero
 200a4c4:	200bbbc0 	call	200bbbc <__udivdi3>
 200a4c8:	1027883a 	mov	r19,r2
 200a4cc:	10c4b03a 	or	r2,r2,r3
 200a4d0:	1829883a 	mov	r20,r3
 200a4d4:	103fef1e 	bne	r2,zero,200a494 <__alt_data_end+0xff00a494>
 200a4d8:	d9001e17 	ldw	r4,120(sp)
 200a4dc:	e011883a 	mov	r8,fp
 200a4e0:	25e9c83a 	sub	r20,r4,r23
 200a4e4:	003eec06 	br	200a098 <__alt_data_end+0xff00a098>
 200a4e8:	d8802307 	ldb	r2,140(sp)
 200a4ec:	1002361e 	bne	r2,zero,200adc8 <___vfiprintf_internal_r+0x113c>
 200a4f0:	00c00804 	movi	r3,32
 200a4f4:	d8c02305 	stb	r3,140(sp)
 200a4f8:	04c00044 	movi	r19,1
 200a4fc:	b0c00007 	ldb	r3,0(r22)
 200a500:	003e3f06 	br	2009e00 <__alt_data_end+0xff009e00>
 200a504:	8c400054 	ori	r17,r17,1
 200a508:	b0c00007 	ldb	r3,0(r22)
 200a50c:	003e3c06 	br	2009e00 <__alt_data_end+0xff009e00>
 200a510:	8c402014 	ori	r17,r17,128
 200a514:	b0c00007 	ldb	r3,0(r22)
 200a518:	003e3906 	br	2009e00 <__alt_data_end+0xff009e00>
 200a51c:	dc002715 	stw	r16,156(sp)
 200a520:	d8002515 	stw	zero,148(sp)
 200a524:	1f3ff404 	addi	fp,r3,-48
 200a528:	0009883a 	mov	r4,zero
 200a52c:	b021883a 	mov	r16,r22
 200a530:	01400284 	movi	r5,10
 200a534:	200c9300 	call	200c930 <__mulsi3>
 200a538:	80c00007 	ldb	r3,0(r16)
 200a53c:	e089883a 	add	r4,fp,r2
 200a540:	b5800044 	addi	r22,r22,1
 200a544:	1f3ff404 	addi	fp,r3,-48
 200a548:	b021883a 	mov	r16,r22
 200a54c:	af3ff82e 	bgeu	r21,fp,200a530 <__alt_data_end+0xff00a530>
 200a550:	d9002515 	stw	r4,148(sp)
 200a554:	dc002717 	ldw	r16,156(sp)
 200a558:	003e2a06 	br	2009e04 <__alt_data_end+0xff009e04>
 200a55c:	9cc03fcc 	andi	r19,r19,255
 200a560:	b811883a 	mov	r8,r23
 200a564:	9802e91e 	bne	r19,zero,200b10c <___vfiprintf_internal_r+0x1480>
 200a568:	8c400414 	ori	r17,r17,16
 200a56c:	8880080c 	andi	r2,r17,32
 200a570:	103fb81e 	bne	r2,zero,200a454 <__alt_data_end+0xff00a454>
 200a574:	8880040c 	andi	r2,r17,16
 200a578:	10022e26 	beq	r2,zero,200ae34 <___vfiprintf_internal_r+0x11a8>
 200a57c:	d9402217 	ldw	r5,136(sp)
 200a580:	2cc00017 	ldw	r19,0(r5)
 200a584:	29400104 	addi	r5,r5,4
 200a588:	d9402215 	stw	r5,136(sp)
 200a58c:	9829d7fa 	srai	r20,r19,31
 200a590:	a005883a 	mov	r2,r20
 200a594:	003fb506 	br	200a46c <__alt_data_end+0xff00a46c>
 200a598:	9cc03fcc 	andi	r19,r19,255
 200a59c:	b811883a 	mov	r8,r23
 200a5a0:	9802fa1e 	bne	r19,zero,200b18c <___vfiprintf_internal_r+0x1500>
 200a5a4:	8c400414 	ori	r17,r17,16
 200a5a8:	8880080c 	andi	r2,r17,32
 200a5ac:	103f661e 	bne	r2,zero,200a348 <__alt_data_end+0xff00a348>
 200a5b0:	8880040c 	andi	r2,r17,16
 200a5b4:	10020626 	beq	r2,zero,200add0 <___vfiprintf_internal_r+0x1144>
 200a5b8:	d9402217 	ldw	r5,136(sp)
 200a5bc:	d8001d85 	stb	zero,118(sp)
 200a5c0:	0029883a 	mov	r20,zero
 200a5c4:	28800104 	addi	r2,r5,4
 200a5c8:	2cc00017 	ldw	r19,0(r5)
 200a5cc:	80020816 	blt	r16,zero,200adf0 <___vfiprintf_internal_r+0x1164>
 200a5d0:	00ffdfc4 	movi	r3,-129
 200a5d4:	d8802215 	stw	r2,136(sp)
 200a5d8:	88e2703a 	and	r17,r17,r3
 200a5dc:	983f651e 	bne	r19,zero,200a374 <__alt_data_end+0xff00a374>
 200a5e0:	002b883a 	mov	r21,zero
 200a5e4:	8002cf26 	beq	r16,zero,200b124 <___vfiprintf_internal_r+0x1498>
 200a5e8:	0027883a 	mov	r19,zero
 200a5ec:	0029883a 	mov	r20,zero
 200a5f0:	003f6106 	br	200a378 <__alt_data_end+0xff00a378>
 200a5f4:	9cc03fcc 	andi	r19,r19,255
 200a5f8:	b811883a 	mov	r8,r23
 200a5fc:	9802e01e 	bne	r19,zero,200b180 <___vfiprintf_internal_r+0x14f4>
 200a600:	8c400414 	ori	r17,r17,16
 200a604:	8880080c 	andi	r2,r17,32
 200a608:	1000641e 	bne	r2,zero,200a79c <___vfiprintf_internal_r+0xb10>
 200a60c:	8880040c 	andi	r2,r17,16
 200a610:	1001c81e 	bne	r2,zero,200ad34 <___vfiprintf_internal_r+0x10a8>
 200a614:	8880100c 	andi	r2,r17,64
 200a618:	d8001d85 	stb	zero,118(sp)
 200a61c:	1002281e 	bne	r2,zero,200aec0 <___vfiprintf_internal_r+0x1234>
 200a620:	d9002217 	ldw	r4,136(sp)
 200a624:	0029883a 	mov	r20,zero
 200a628:	20800104 	addi	r2,r4,4
 200a62c:	24c00017 	ldw	r19,0(r4)
 200a630:	8001c60e 	bge	r16,zero,200ad4c <___vfiprintf_internal_r+0x10c0>
 200a634:	d8802215 	stw	r2,136(sp)
 200a638:	002b883a 	mov	r21,zero
 200a63c:	9d04b03a 	or	r2,r19,r20
 200a640:	103f911e 	bne	r2,zero,200a488 <__alt_data_end+0xff00a488>
 200a644:	00800044 	movi	r2,1
 200a648:	10803fcc 	andi	r2,r2,255
 200a64c:	00c00044 	movi	r3,1
 200a650:	10c05f26 	beq	r2,r3,200a7d0 <___vfiprintf_internal_r+0xb44>
 200a654:	00c00084 	movi	r3,2
 200a658:	10ffe31e 	bne	r2,r3,200a5e8 <__alt_data_end+0xff00a5e8>
 200a65c:	0027883a 	mov	r19,zero
 200a660:	0029883a 	mov	r20,zero
 200a664:	00015106 	br	200abac <___vfiprintf_internal_r+0xf20>
 200a668:	9cc03fcc 	andi	r19,r19,255
 200a66c:	b811883a 	mov	r8,r23
 200a670:	9802c01e 	bne	r19,zero,200b174 <___vfiprintf_internal_r+0x14e8>
 200a674:	01408074 	movhi	r5,513
 200a678:	29486b04 	addi	r5,r5,8620
 200a67c:	d9402615 	stw	r5,152(sp)
 200a680:	8880080c 	andi	r2,r17,32
 200a684:	103f541e 	bne	r2,zero,200a3d8 <__alt_data_end+0xff00a3d8>
 200a688:	8880040c 	andi	r2,r17,16
 200a68c:	1001f226 	beq	r2,zero,200ae58 <___vfiprintf_internal_r+0x11cc>
 200a690:	d9402217 	ldw	r5,136(sp)
 200a694:	0029883a 	mov	r20,zero
 200a698:	2cc00017 	ldw	r19,0(r5)
 200a69c:	29400104 	addi	r5,r5,4
 200a6a0:	d9402215 	stw	r5,136(sp)
 200a6a4:	003f5106 	br	200a3ec <__alt_data_end+0xff00a3ec>
 200a6a8:	d8c02217 	ldw	r3,136(sp)
 200a6ac:	b811883a 	mov	r8,r23
 200a6b0:	d8001d85 	stb	zero,118(sp)
 200a6b4:	1dc00017 	ldw	r23,0(r3)
 200a6b8:	1f000104 	addi	fp,r3,4
 200a6bc:	b8025926 	beq	r23,zero,200b024 <___vfiprintf_internal_r+0x1398>
 200a6c0:	80023316 	blt	r16,zero,200af90 <___vfiprintf_internal_r+0x1304>
 200a6c4:	800d883a 	mov	r6,r16
 200a6c8:	000b883a 	mov	r5,zero
 200a6cc:	b809883a 	mov	r4,r23
 200a6d0:	da002a15 	stw	r8,168(sp)
 200a6d4:	2007dcc0 	call	2007dcc <memchr>
 200a6d8:	da002a17 	ldw	r8,168(sp)
 200a6dc:	10026826 	beq	r2,zero,200b080 <___vfiprintf_internal_r+0x13f4>
 200a6e0:	15e9c83a 	sub	r20,r2,r23
 200a6e4:	dd401d83 	ldbu	r21,118(sp)
 200a6e8:	df002215 	stw	fp,136(sp)
 200a6ec:	0021883a 	mov	r16,zero
 200a6f0:	003e6906 	br	200a098 <__alt_data_end+0xff00a098>
 200a6f4:	9cc03fcc 	andi	r19,r19,255
 200a6f8:	b811883a 	mov	r8,r23
 200a6fc:	983fc126 	beq	r19,zero,200a604 <__alt_data_end+0xff00a604>
 200a700:	d8c02303 	ldbu	r3,140(sp)
 200a704:	d8c01d85 	stb	r3,118(sp)
 200a708:	003fbe06 	br	200a604 <__alt_data_end+0xff00a604>
 200a70c:	d9002217 	ldw	r4,136(sp)
 200a710:	d9402217 	ldw	r5,136(sp)
 200a714:	21000017 	ldw	r4,0(r4)
 200a718:	28800104 	addi	r2,r5,4
 200a71c:	d9002515 	stw	r4,148(sp)
 200a720:	203e3d16 	blt	r4,zero,200a018 <__alt_data_end+0xff00a018>
 200a724:	d8802215 	stw	r2,136(sp)
 200a728:	b0c00007 	ldb	r3,0(r22)
 200a72c:	003db406 	br	2009e00 <__alt_data_end+0xff009e00>
 200a730:	00c00ac4 	movi	r3,43
 200a734:	d8c02305 	stb	r3,140(sp)
 200a738:	04c00044 	movi	r19,1
 200a73c:	b0c00007 	ldb	r3,0(r22)
 200a740:	003daf06 	br	2009e00 <__alt_data_end+0xff009e00>
 200a744:	b0c00007 	ldb	r3,0(r22)
 200a748:	01000a84 	movi	r4,42
 200a74c:	b4000044 	addi	r16,r22,1
 200a750:	19025e26 	beq	r3,r4,200b0cc <___vfiprintf_internal_r+0x1440>
 200a754:	1f3ff404 	addi	fp,r3,-48
 200a758:	0009883a 	mov	r4,zero
 200a75c:	af025236 	bltu	r21,fp,200b0a8 <___vfiprintf_internal_r+0x141c>
 200a760:	01400284 	movi	r5,10
 200a764:	200c9300 	call	200c930 <__mulsi3>
 200a768:	80c00007 	ldb	r3,0(r16)
 200a76c:	1709883a 	add	r4,r2,fp
 200a770:	85800044 	addi	r22,r16,1
 200a774:	1f3ff404 	addi	fp,r3,-48
 200a778:	b021883a 	mov	r16,r22
 200a77c:	af3ff82e 	bgeu	r21,fp,200a760 <__alt_data_end+0xff00a760>
 200a780:	2021883a 	mov	r16,r4
 200a784:	203d9f0e 	bge	r4,zero,2009e04 <__alt_data_end+0xff009e04>
 200a788:	043fffc4 	movi	r16,-1
 200a78c:	003d9d06 	br	2009e04 <__alt_data_end+0xff009e04>
 200a790:	8c401014 	ori	r17,r17,64
 200a794:	b0c00007 	ldb	r3,0(r22)
 200a798:	003d9906 	br	2009e00 <__alt_data_end+0xff009e00>
 200a79c:	d9002217 	ldw	r4,136(sp)
 200a7a0:	d8001d85 	stb	zero,118(sp)
 200a7a4:	20c00204 	addi	r3,r4,8
 200a7a8:	24c00017 	ldw	r19,0(r4)
 200a7ac:	25000117 	ldw	r20,4(r4)
 200a7b0:	8001e716 	blt	r16,zero,200af50 <___vfiprintf_internal_r+0x12c4>
 200a7b4:	013fdfc4 	movi	r4,-129
 200a7b8:	9d04b03a 	or	r2,r19,r20
 200a7bc:	d8c02215 	stw	r3,136(sp)
 200a7c0:	8922703a 	and	r17,r17,r4
 200a7c4:	002b883a 	mov	r21,zero
 200a7c8:	103f2f1e 	bne	r2,zero,200a488 <__alt_data_end+0xff00a488>
 200a7cc:	803e2f26 	beq	r16,zero,200a08c <__alt_data_end+0xff00a08c>
 200a7d0:	0027883a 	mov	r19,zero
 200a7d4:	9cc00c04 	addi	r19,r19,48
 200a7d8:	dcc019c5 	stb	r19,103(sp)
 200a7dc:	dd002817 	ldw	r20,160(sp)
 200a7e0:	ddc019c4 	addi	r23,sp,103
 200a7e4:	003e2c06 	br	200a098 <__alt_data_end+0xff00a098>
 200a7e8:	9cc03fcc 	andi	r19,r19,255
 200a7ec:	b811883a 	mov	r8,r23
 200a7f0:	9802571e 	bne	r19,zero,200b150 <___vfiprintf_internal_r+0x14c4>
 200a7f4:	18005726 	beq	r3,zero,200a954 <___vfiprintf_internal_r+0xcc8>
 200a7f8:	04c00044 	movi	r19,1
 200a7fc:	d8c01005 	stb	r3,64(sp)
 200a800:	d8001d85 	stb	zero,118(sp)
 200a804:	9829883a 	mov	r20,r19
 200a808:	ddc01004 	addi	r23,sp,64
 200a80c:	003f0a06 	br	200a438 <__alt_data_end+0xff00a438>
 200a810:	d9402017 	ldw	r5,128(sp)
 200a814:	d9002117 	ldw	r4,132(sp)
 200a818:	d9801a04 	addi	r6,sp,104
 200a81c:	da802a15 	stw	r10,168(sp)
 200a820:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200a824:	da802a17 	ldw	r10,168(sp)
 200a828:	1000501e 	bne	r2,zero,200a96c <___vfiprintf_internal_r+0xce0>
 200a82c:	d9801b17 	ldw	r6,108(sp)
 200a830:	d8801c17 	ldw	r2,112(sp)
 200a834:	d811883a 	mov	r8,sp
 200a838:	31000044 	addi	r4,r6,1
 200a83c:	003e3606 	br	200a118 <__alt_data_end+0xff00a118>
 200a840:	d9001b17 	ldw	r4,108(sp)
 200a844:	d8801c17 	ldw	r2,112(sp)
 200a848:	21400044 	addi	r5,r4,1
 200a84c:	d9801d87 	ldb	r6,118(sp)
 200a850:	303e5226 	beq	r6,zero,200a19c <__alt_data_end+0xff00a19c>
 200a854:	01800044 	movi	r6,1
 200a858:	d9001d84 	addi	r4,sp,118
 200a85c:	1185883a 	add	r2,r2,r6
 200a860:	41000015 	stw	r4,0(r8)
 200a864:	41800115 	stw	r6,4(r8)
 200a868:	d8801c15 	stw	r2,112(sp)
 200a86c:	d9401b15 	stw	r5,108(sp)
 200a870:	010001c4 	movi	r4,7
 200a874:	2140b00e 	bge	r4,r5,200ab38 <___vfiprintf_internal_r+0xeac>
 200a878:	1000f61e 	bne	r2,zero,200ac54 <___vfiprintf_internal_r+0xfc8>
 200a87c:	3800b31e 	bne	r7,zero,200ab4c <___vfiprintf_internal_r+0xec0>
 200a880:	0009883a 	mov	r4,zero
 200a884:	300b883a 	mov	r5,r6
 200a888:	d811883a 	mov	r8,sp
 200a88c:	01802004 	movi	r6,128
 200a890:	19be5226 	beq	r3,r6,200a1dc <__alt_data_end+0xff00a1dc>
 200a894:	8521c83a 	sub	r16,r16,r20
 200a898:	043e790e 	bge	zero,r16,200a280 <__alt_data_end+0xff00a280>
 200a89c:	05400404 	movi	r21,16
 200a8a0:	ac01b00e 	bge	r21,r16,200af64 <___vfiprintf_internal_r+0x12d8>
 200a8a4:	01408074 	movhi	r5,513
 200a8a8:	2948d104 	addi	r5,r5,9028
 200a8ac:	d9402315 	stw	r5,140(sp)
 200a8b0:	070001c4 	movi	fp,7
 200a8b4:	00000506 	br	200a8cc <___vfiprintf_internal_r+0xc40>
 200a8b8:	21400084 	addi	r5,r4,2
 200a8bc:	42000204 	addi	r8,r8,8
 200a8c0:	1809883a 	mov	r4,r3
 200a8c4:	843ffc04 	addi	r16,r16,-16
 200a8c8:	ac000d0e 	bge	r21,r16,200a900 <___vfiprintf_internal_r+0xc74>
 200a8cc:	10800404 	addi	r2,r2,16
 200a8d0:	20c00044 	addi	r3,r4,1
 200a8d4:	44800015 	stw	r18,0(r8)
 200a8d8:	45400115 	stw	r21,4(r8)
 200a8dc:	d8801c15 	stw	r2,112(sp)
 200a8e0:	d8c01b15 	stw	r3,108(sp)
 200a8e4:	e0fff40e 	bge	fp,r3,200a8b8 <__alt_data_end+0xff00a8b8>
 200a8e8:	1000101e 	bne	r2,zero,200a92c <___vfiprintf_internal_r+0xca0>
 200a8ec:	843ffc04 	addi	r16,r16,-16
 200a8f0:	01400044 	movi	r5,1
 200a8f4:	0009883a 	mov	r4,zero
 200a8f8:	d811883a 	mov	r8,sp
 200a8fc:	ac3ff316 	blt	r21,r16,200a8cc <__alt_data_end+0xff00a8cc>
 200a900:	d8c02317 	ldw	r3,140(sp)
 200a904:	1405883a 	add	r2,r2,r16
 200a908:	44000115 	stw	r16,4(r8)
 200a90c:	40c00015 	stw	r3,0(r8)
 200a910:	d8801c15 	stw	r2,112(sp)
 200a914:	d9401b15 	stw	r5,108(sp)
 200a918:	00c001c4 	movi	r3,7
 200a91c:	19401916 	blt	r3,r5,200a984 <___vfiprintf_internal_r+0xcf8>
 200a920:	42000204 	addi	r8,r8,8
 200a924:	29400044 	addi	r5,r5,1
 200a928:	003e5506 	br	200a280 <__alt_data_end+0xff00a280>
 200a92c:	d9402017 	ldw	r5,128(sp)
 200a930:	d9002117 	ldw	r4,132(sp)
 200a934:	d9801a04 	addi	r6,sp,104
 200a938:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200a93c:	10000b1e 	bne	r2,zero,200a96c <___vfiprintf_internal_r+0xce0>
 200a940:	d9001b17 	ldw	r4,108(sp)
 200a944:	d8801c17 	ldw	r2,112(sp)
 200a948:	d811883a 	mov	r8,sp
 200a94c:	21400044 	addi	r5,r4,1
 200a950:	003fdc06 	br	200a8c4 <__alt_data_end+0xff00a8c4>
 200a954:	d8801c17 	ldw	r2,112(sp)
 200a958:	10000426 	beq	r2,zero,200a96c <___vfiprintf_internal_r+0xce0>
 200a95c:	d9402017 	ldw	r5,128(sp)
 200a960:	d9002117 	ldw	r4,132(sp)
 200a964:	d9801a04 	addi	r6,sp,104
 200a968:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200a96c:	d9402017 	ldw	r5,128(sp)
 200a970:	2880030b 	ldhu	r2,12(r5)
 200a974:	1080100c 	andi	r2,r2,64
 200a978:	10014d1e 	bne	r2,zero,200aeb0 <___vfiprintf_internal_r+0x1224>
 200a97c:	d8802417 	ldw	r2,144(sp)
 200a980:	003d9706 	br	2009fe0 <__alt_data_end+0xff009fe0>
 200a984:	1000d21e 	bne	r2,zero,200acd0 <___vfiprintf_internal_r+0x1044>
 200a988:	00c00044 	movi	r3,1
 200a98c:	a005883a 	mov	r2,r20
 200a990:	ddc00015 	stw	r23,0(sp)
 200a994:	dd000115 	stw	r20,4(sp)
 200a998:	dd001c15 	stw	r20,112(sp)
 200a99c:	d8c01b15 	stw	r3,108(sp)
 200a9a0:	d811883a 	mov	r8,sp
 200a9a4:	42000204 	addi	r8,r8,8
 200a9a8:	8c40010c 	andi	r17,r17,4
 200a9ac:	88004026 	beq	r17,zero,200aab0 <___vfiprintf_internal_r+0xe24>
 200a9b0:	d9002517 	ldw	r4,148(sp)
 200a9b4:	24e3c83a 	sub	r17,r4,r19
 200a9b8:	04403d0e 	bge	zero,r17,200aab0 <___vfiprintf_internal_r+0xe24>
 200a9bc:	04000404 	movi	r16,16
 200a9c0:	8441a90e 	bge	r16,r17,200b068 <___vfiprintf_internal_r+0x13dc>
 200a9c4:	00c08074 	movhi	r3,513
 200a9c8:	18c8d504 	addi	r3,r3,9044
 200a9cc:	d9001b17 	ldw	r4,108(sp)
 200a9d0:	d8c02315 	stw	r3,140(sp)
 200a9d4:	050001c4 	movi	r20,7
 200a9d8:	dd402117 	ldw	r21,132(sp)
 200a9dc:	ddc02017 	ldw	r23,128(sp)
 200a9e0:	00000506 	br	200a9f8 <___vfiprintf_internal_r+0xd6c>
 200a9e4:	21400084 	addi	r5,r4,2
 200a9e8:	42000204 	addi	r8,r8,8
 200a9ec:	1809883a 	mov	r4,r3
 200a9f0:	8c7ffc04 	addi	r17,r17,-16
 200a9f4:	84400f0e 	bge	r16,r17,200aa34 <___vfiprintf_internal_r+0xda8>
 200a9f8:	01408074 	movhi	r5,513
 200a9fc:	10800404 	addi	r2,r2,16
 200aa00:	20c00044 	addi	r3,r4,1
 200aa04:	2948d504 	addi	r5,r5,9044
 200aa08:	41400015 	stw	r5,0(r8)
 200aa0c:	44000115 	stw	r16,4(r8)
 200aa10:	d8801c15 	stw	r2,112(sp)
 200aa14:	d8c01b15 	stw	r3,108(sp)
 200aa18:	a0fff20e 	bge	r20,r3,200a9e4 <__alt_data_end+0xff00a9e4>
 200aa1c:	1000141e 	bne	r2,zero,200aa70 <___vfiprintf_internal_r+0xde4>
 200aa20:	8c7ffc04 	addi	r17,r17,-16
 200aa24:	01400044 	movi	r5,1
 200aa28:	0009883a 	mov	r4,zero
 200aa2c:	d811883a 	mov	r8,sp
 200aa30:	847ff116 	blt	r16,r17,200a9f8 <__alt_data_end+0xff00a9f8>
 200aa34:	d8c02317 	ldw	r3,140(sp)
 200aa38:	1445883a 	add	r2,r2,r17
 200aa3c:	44400115 	stw	r17,4(r8)
 200aa40:	40c00015 	stw	r3,0(r8)
 200aa44:	d8801c15 	stw	r2,112(sp)
 200aa48:	d9401b15 	stw	r5,108(sp)
 200aa4c:	00c001c4 	movi	r3,7
 200aa50:	1940170e 	bge	r3,r5,200aab0 <___vfiprintf_internal_r+0xe24>
 200aa54:	1000101e 	bne	r2,zero,200aa98 <___vfiprintf_internal_r+0xe0c>
 200aa58:	d8802517 	ldw	r2,148(sp)
 200aa5c:	14c11616 	blt	r2,r19,200aeb8 <___vfiprintf_internal_r+0x122c>
 200aa60:	d9002417 	ldw	r4,144(sp)
 200aa64:	2089883a 	add	r4,r4,r2
 200aa68:	d9002415 	stw	r4,144(sp)
 200aa6c:	003e1806 	br	200a2d0 <__alt_data_end+0xff00a2d0>
 200aa70:	d9801a04 	addi	r6,sp,104
 200aa74:	b80b883a 	mov	r5,r23
 200aa78:	a809883a 	mov	r4,r21
 200aa7c:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200aa80:	103fba1e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200aa84:	d9001b17 	ldw	r4,108(sp)
 200aa88:	d8801c17 	ldw	r2,112(sp)
 200aa8c:	d811883a 	mov	r8,sp
 200aa90:	21400044 	addi	r5,r4,1
 200aa94:	003fd606 	br	200a9f0 <__alt_data_end+0xff00a9f0>
 200aa98:	d9402017 	ldw	r5,128(sp)
 200aa9c:	d9002117 	ldw	r4,132(sp)
 200aaa0:	d9801a04 	addi	r6,sp,104
 200aaa4:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200aaa8:	103fb01e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200aaac:	d8801c17 	ldw	r2,112(sp)
 200aab0:	d8c02517 	ldw	r3,148(sp)
 200aab4:	1cc0010e 	bge	r3,r19,200aabc <___vfiprintf_internal_r+0xe30>
 200aab8:	9807883a 	mov	r3,r19
 200aabc:	d9002417 	ldw	r4,144(sp)
 200aac0:	20c9883a 	add	r4,r4,r3
 200aac4:	d9002415 	stw	r4,144(sp)
 200aac8:	103e0126 	beq	r2,zero,200a2d0 <__alt_data_end+0xff00a2d0>
 200aacc:	d9402017 	ldw	r5,128(sp)
 200aad0:	d9002117 	ldw	r4,132(sp)
 200aad4:	d9801a04 	addi	r6,sp,104
 200aad8:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200aadc:	103dfc26 	beq	r2,zero,200a2d0 <__alt_data_end+0xff00a2d0>
 200aae0:	003fa206 	br	200a96c <__alt_data_end+0xff00a96c>
 200aae4:	d9402017 	ldw	r5,128(sp)
 200aae8:	d9002117 	ldw	r4,132(sp)
 200aaec:	d9801a04 	addi	r6,sp,104
 200aaf0:	d9c02b15 	stw	r7,172(sp)
 200aaf4:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200aaf8:	d9c02b17 	ldw	r7,172(sp)
 200aafc:	103f9b1e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200ab00:	d9001b17 	ldw	r4,108(sp)
 200ab04:	d8801c17 	ldw	r2,112(sp)
 200ab08:	d811883a 	mov	r8,sp
 200ab0c:	21800044 	addi	r6,r4,1
 200ab10:	003dbf06 	br	200a210 <__alt_data_end+0xff00a210>
 200ab14:	1000d81e 	bne	r2,zero,200ae78 <___vfiprintf_internal_r+0x11ec>
 200ab18:	d9001d87 	ldb	r4,118(sp)
 200ab1c:	20000a26 	beq	r4,zero,200ab48 <___vfiprintf_internal_r+0xebc>
 200ab20:	00800044 	movi	r2,1
 200ab24:	d9001d84 	addi	r4,sp,118
 200ab28:	100b883a 	mov	r5,r2
 200ab2c:	d9000015 	stw	r4,0(sp)
 200ab30:	d8800115 	stw	r2,4(sp)
 200ab34:	d811883a 	mov	r8,sp
 200ab38:	2809883a 	mov	r4,r5
 200ab3c:	42000204 	addi	r8,r8,8
 200ab40:	29400044 	addi	r5,r5,1
 200ab44:	003d9506 	br	200a19c <__alt_data_end+0xff00a19c>
 200ab48:	3800fd26 	beq	r7,zero,200af40 <___vfiprintf_internal_r+0x12b4>
 200ab4c:	00800084 	movi	r2,2
 200ab50:	d9001d04 	addi	r4,sp,116
 200ab54:	d9000015 	stw	r4,0(sp)
 200ab58:	d8800115 	stw	r2,4(sp)
 200ab5c:	01400044 	movi	r5,1
 200ab60:	d811883a 	mov	r8,sp
 200ab64:	2809883a 	mov	r4,r5
 200ab68:	42000204 	addi	r8,r8,8
 200ab6c:	29400044 	addi	r5,r5,1
 200ab70:	003f4606 	br	200a88c <__alt_data_end+0xff00a88c>
 200ab74:	d8802517 	ldw	r2,148(sp)
 200ab78:	14c0010e 	bge	r2,r19,200ab80 <___vfiprintf_internal_r+0xef4>
 200ab7c:	9805883a 	mov	r2,r19
 200ab80:	d9402417 	ldw	r5,144(sp)
 200ab84:	288b883a 	add	r5,r5,r2
 200ab88:	d9402415 	stw	r5,144(sp)
 200ab8c:	003dd006 	br	200a2d0 <__alt_data_end+0xff00a2d0>
 200ab90:	d8001d85 	stb	zero,118(sp)
 200ab94:	80005d16 	blt	r16,zero,200ad0c <___vfiprintf_internal_r+0x1080>
 200ab98:	00ffdfc4 	movi	r3,-129
 200ab9c:	9d04b03a 	or	r2,r19,r20
 200aba0:	88e2703a 	and	r17,r17,r3
 200aba4:	103d3726 	beq	r2,zero,200a084 <__alt_data_end+0xff00a084>
 200aba8:	002b883a 	mov	r21,zero
 200abac:	d9002617 	ldw	r4,152(sp)
 200abb0:	ddc01a04 	addi	r23,sp,104
 200abb4:	988003cc 	andi	r2,r19,15
 200abb8:	a006973a 	slli	r3,r20,28
 200abbc:	2085883a 	add	r2,r4,r2
 200abc0:	9826d13a 	srli	r19,r19,4
 200abc4:	10800003 	ldbu	r2,0(r2)
 200abc8:	a028d13a 	srli	r20,r20,4
 200abcc:	bdffffc4 	addi	r23,r23,-1
 200abd0:	1ce6b03a 	or	r19,r3,r19
 200abd4:	b8800005 	stb	r2,0(r23)
 200abd8:	9d04b03a 	or	r2,r19,r20
 200abdc:	103ff51e 	bne	r2,zero,200abb4 <__alt_data_end+0xff00abb4>
 200abe0:	d8801e17 	ldw	r2,120(sp)
 200abe4:	15e9c83a 	sub	r20,r2,r23
 200abe8:	003d2b06 	br	200a098 <__alt_data_end+0xff00a098>
 200abec:	d9402017 	ldw	r5,128(sp)
 200abf0:	d9002117 	ldw	r4,132(sp)
 200abf4:	d9801a04 	addi	r6,sp,104
 200abf8:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200abfc:	103f5b1e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200ac00:	d8801c17 	ldw	r2,112(sp)
 200ac04:	d811883a 	mov	r8,sp
 200ac08:	003f6706 	br	200a9a8 <__alt_data_end+0xff00a9a8>
 200ac0c:	d9402017 	ldw	r5,128(sp)
 200ac10:	d9002117 	ldw	r4,132(sp)
 200ac14:	d9801a04 	addi	r6,sp,104
 200ac18:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200ac1c:	103f531e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200ac20:	d811883a 	mov	r8,sp
 200ac24:	003cd906 	br	2009f8c <__alt_data_end+0xff009f8c>
 200ac28:	10803fcc 	andi	r2,r2,255
 200ac2c:	1080201c 	xori	r2,r2,128
 200ac30:	10bfe004 	addi	r2,r2,-128
 200ac34:	00c00c04 	movi	r3,48
 200ac38:	10ffe926 	beq	r2,r3,200abe0 <__alt_data_end+0xff00abe0>
 200ac3c:	b8ffffc5 	stb	r3,-1(r23)
 200ac40:	d8c01e17 	ldw	r3,120(sp)
 200ac44:	b8bfffc4 	addi	r2,r23,-1
 200ac48:	102f883a 	mov	r23,r2
 200ac4c:	18a9c83a 	sub	r20,r3,r2
 200ac50:	003d1106 	br	200a098 <__alt_data_end+0xff00a098>
 200ac54:	d9402017 	ldw	r5,128(sp)
 200ac58:	d9002117 	ldw	r4,132(sp)
 200ac5c:	d9801a04 	addi	r6,sp,104
 200ac60:	d8c02a15 	stw	r3,168(sp)
 200ac64:	d9c02b15 	stw	r7,172(sp)
 200ac68:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200ac6c:	d8c02a17 	ldw	r3,168(sp)
 200ac70:	d9c02b17 	ldw	r7,172(sp)
 200ac74:	103f3d1e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200ac78:	d9001b17 	ldw	r4,108(sp)
 200ac7c:	d8801c17 	ldw	r2,112(sp)
 200ac80:	d811883a 	mov	r8,sp
 200ac84:	21400044 	addi	r5,r4,1
 200ac88:	003d4406 	br	200a19c <__alt_data_end+0xff00a19c>
 200ac8c:	d9402017 	ldw	r5,128(sp)
 200ac90:	d9002117 	ldw	r4,132(sp)
 200ac94:	d9801a04 	addi	r6,sp,104
 200ac98:	d8c02a15 	stw	r3,168(sp)
 200ac9c:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200aca0:	d8c02a17 	ldw	r3,168(sp)
 200aca4:	103f311e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200aca8:	d9001b17 	ldw	r4,108(sp)
 200acac:	d8801c17 	ldw	r2,112(sp)
 200acb0:	d811883a 	mov	r8,sp
 200acb4:	21400044 	addi	r5,r4,1
 200acb8:	003ef406 	br	200a88c <__alt_data_end+0xff00a88c>
 200acbc:	1000bd1e 	bne	r2,zero,200afb4 <___vfiprintf_internal_r+0x1328>
 200acc0:	01400044 	movi	r5,1
 200acc4:	0009883a 	mov	r4,zero
 200acc8:	d811883a 	mov	r8,sp
 200accc:	003ef106 	br	200a894 <__alt_data_end+0xff00a894>
 200acd0:	d9402017 	ldw	r5,128(sp)
 200acd4:	d9002117 	ldw	r4,132(sp)
 200acd8:	d9801a04 	addi	r6,sp,104
 200acdc:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200ace0:	103f221e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200ace4:	d9401b17 	ldw	r5,108(sp)
 200ace8:	d8801c17 	ldw	r2,112(sp)
 200acec:	d811883a 	mov	r8,sp
 200acf0:	29400044 	addi	r5,r5,1
 200acf4:	003d6206 	br	200a280 <__alt_data_end+0xff00a280>
 200acf8:	01408074 	movhi	r5,513
 200acfc:	29487004 	addi	r5,r5,8640
 200ad00:	d9402615 	stw	r5,152(sp)
 200ad04:	d8c02215 	stw	r3,136(sp)
 200ad08:	1023883a 	mov	r17,r2
 200ad0c:	9d04b03a 	or	r2,r19,r20
 200ad10:	103fa51e 	bne	r2,zero,200aba8 <__alt_data_end+0xff00aba8>
 200ad14:	002b883a 	mov	r21,zero
 200ad18:	00800084 	movi	r2,2
 200ad1c:	003e4a06 	br	200a648 <__alt_data_end+0xff00a648>
 200ad20:	01408074 	movhi	r5,513
 200ad24:	29487004 	addi	r5,r5,8640
 200ad28:	002b883a 	mov	r21,zero
 200ad2c:	d9402615 	stw	r5,152(sp)
 200ad30:	003f9e06 	br	200abac <__alt_data_end+0xff00abac>
 200ad34:	d9402217 	ldw	r5,136(sp)
 200ad38:	d8001d85 	stb	zero,118(sp)
 200ad3c:	0029883a 	mov	r20,zero
 200ad40:	28800104 	addi	r2,r5,4
 200ad44:	2cc00017 	ldw	r19,0(r5)
 200ad48:	803e3a16 	blt	r16,zero,200a634 <__alt_data_end+0xff00a634>
 200ad4c:	00ffdfc4 	movi	r3,-129
 200ad50:	d8802215 	stw	r2,136(sp)
 200ad54:	88e2703a 	and	r17,r17,r3
 200ad58:	002b883a 	mov	r21,zero
 200ad5c:	983e9b26 	beq	r19,zero,200a7cc <__alt_data_end+0xff00a7cc>
 200ad60:	00800244 	movi	r2,9
 200ad64:	14fdc936 	bltu	r2,r19,200a48c <__alt_data_end+0xff00a48c>
 200ad68:	003e9a06 	br	200a7d4 <__alt_data_end+0xff00a7d4>
 200ad6c:	00800c04 	movi	r2,48
 200ad70:	d8c01d45 	stb	r3,117(sp)
 200ad74:	d8801d05 	stb	r2,116(sp)
 200ad78:	d8001d85 	stb	zero,118(sp)
 200ad7c:	88c00094 	ori	r3,r17,2
 200ad80:	80009c16 	blt	r16,zero,200aff4 <___vfiprintf_internal_r+0x1368>
 200ad84:	00bfdfc4 	movi	r2,-129
 200ad88:	88a2703a 	and	r17,r17,r2
 200ad8c:	8c400094 	ori	r17,r17,2
 200ad90:	002b883a 	mov	r21,zero
 200ad94:	003f8506 	br	200abac <__alt_data_end+0xff00abac>
 200ad98:	b029883a 	mov	r20,r22
 200ad9c:	003c0b06 	br	2009dcc <__alt_data_end+0xff009dcc>
 200ada0:	04e7c83a 	sub	r19,zero,r19
 200ada4:	05400b44 	movi	r21,45
 200ada8:	9804c03a 	cmpne	r2,r19,zero
 200adac:	0529c83a 	sub	r20,zero,r20
 200adb0:	dd401d85 	stb	r21,118(sp)
 200adb4:	a0a9c83a 	sub	r20,r20,r2
 200adb8:	80009716 	blt	r16,zero,200b018 <___vfiprintf_internal_r+0x138c>
 200adbc:	00bfdfc4 	movi	r2,-129
 200adc0:	88a2703a 	and	r17,r17,r2
 200adc4:	003db006 	br	200a488 <__alt_data_end+0xff00a488>
 200adc8:	b0c00007 	ldb	r3,0(r22)
 200adcc:	003c0c06 	br	2009e00 <__alt_data_end+0xff009e00>
 200add0:	8880100c 	andi	r2,r17,64
 200add4:	d8001d85 	stb	zero,118(sp)
 200add8:	1000461e 	bne	r2,zero,200aef4 <___vfiprintf_internal_r+0x1268>
 200addc:	d9002217 	ldw	r4,136(sp)
 200ade0:	0029883a 	mov	r20,zero
 200ade4:	20800104 	addi	r2,r4,4
 200ade8:	24c00017 	ldw	r19,0(r4)
 200adec:	803df80e 	bge	r16,zero,200a5d0 <__alt_data_end+0xff00a5d0>
 200adf0:	9d06b03a 	or	r3,r19,r20
 200adf4:	d8802215 	stw	r2,136(sp)
 200adf8:	183d5e1e 	bne	r3,zero,200a374 <__alt_data_end+0xff00a374>
 200adfc:	002b883a 	mov	r21,zero
 200ae00:	0005883a 	mov	r2,zero
 200ae04:	003e1006 	br	200a648 <__alt_data_end+0xff00a648>
 200ae08:	8880040c 	andi	r2,r17,16
 200ae0c:	1000321e 	bne	r2,zero,200aed8 <___vfiprintf_internal_r+0x124c>
 200ae10:	8c40100c 	andi	r17,r17,64
 200ae14:	88008d26 	beq	r17,zero,200b04c <___vfiprintf_internal_r+0x13c0>
 200ae18:	d9402217 	ldw	r5,136(sp)
 200ae1c:	d8c02417 	ldw	r3,144(sp)
 200ae20:	28800017 	ldw	r2,0(r5)
 200ae24:	29400104 	addi	r5,r5,4
 200ae28:	d9402215 	stw	r5,136(sp)
 200ae2c:	10c0000d 	sth	r3,0(r2)
 200ae30:	003bca06 	br	2009d5c <__alt_data_end+0xff009d5c>
 200ae34:	8880100c 	andi	r2,r17,64
 200ae38:	10003a26 	beq	r2,zero,200af24 <___vfiprintf_internal_r+0x1298>
 200ae3c:	d8802217 	ldw	r2,136(sp)
 200ae40:	14c0000f 	ldh	r19,0(r2)
 200ae44:	10800104 	addi	r2,r2,4
 200ae48:	d8802215 	stw	r2,136(sp)
 200ae4c:	9829d7fa 	srai	r20,r19,31
 200ae50:	a005883a 	mov	r2,r20
 200ae54:	003d8506 	br	200a46c <__alt_data_end+0xff00a46c>
 200ae58:	8880100c 	andi	r2,r17,64
 200ae5c:	10002b26 	beq	r2,zero,200af0c <___vfiprintf_internal_r+0x1280>
 200ae60:	d8802217 	ldw	r2,136(sp)
 200ae64:	0029883a 	mov	r20,zero
 200ae68:	14c0000b 	ldhu	r19,0(r2)
 200ae6c:	10800104 	addi	r2,r2,4
 200ae70:	d8802215 	stw	r2,136(sp)
 200ae74:	003d5d06 	br	200a3ec <__alt_data_end+0xff00a3ec>
 200ae78:	d9402017 	ldw	r5,128(sp)
 200ae7c:	d9002117 	ldw	r4,132(sp)
 200ae80:	d9801a04 	addi	r6,sp,104
 200ae84:	d8c02a15 	stw	r3,168(sp)
 200ae88:	d9c02b15 	stw	r7,172(sp)
 200ae8c:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200ae90:	d8c02a17 	ldw	r3,168(sp)
 200ae94:	d9c02b17 	ldw	r7,172(sp)
 200ae98:	103eb41e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200ae9c:	d9001b17 	ldw	r4,108(sp)
 200aea0:	d8801c17 	ldw	r2,112(sp)
 200aea4:	d811883a 	mov	r8,sp
 200aea8:	21400044 	addi	r5,r4,1
 200aeac:	003e6706 	br	200a84c <__alt_data_end+0xff00a84c>
 200aeb0:	00bfffc4 	movi	r2,-1
 200aeb4:	003c4a06 	br	2009fe0 <__alt_data_end+0xff009fe0>
 200aeb8:	9805883a 	mov	r2,r19
 200aebc:	003ee806 	br	200aa60 <__alt_data_end+0xff00aa60>
 200aec0:	d8c02217 	ldw	r3,136(sp)
 200aec4:	0029883a 	mov	r20,zero
 200aec8:	18800104 	addi	r2,r3,4
 200aecc:	1cc0000b 	ldhu	r19,0(r3)
 200aed0:	803f9e0e 	bge	r16,zero,200ad4c <__alt_data_end+0xff00ad4c>
 200aed4:	003dd706 	br	200a634 <__alt_data_end+0xff00a634>
 200aed8:	d8c02217 	ldw	r3,136(sp)
 200aedc:	d9002417 	ldw	r4,144(sp)
 200aee0:	18800017 	ldw	r2,0(r3)
 200aee4:	18c00104 	addi	r3,r3,4
 200aee8:	d8c02215 	stw	r3,136(sp)
 200aeec:	11000015 	stw	r4,0(r2)
 200aef0:	003b9a06 	br	2009d5c <__alt_data_end+0xff009d5c>
 200aef4:	d8c02217 	ldw	r3,136(sp)
 200aef8:	0029883a 	mov	r20,zero
 200aefc:	18800104 	addi	r2,r3,4
 200af00:	1cc0000b 	ldhu	r19,0(r3)
 200af04:	803db20e 	bge	r16,zero,200a5d0 <__alt_data_end+0xff00a5d0>
 200af08:	003fb906 	br	200adf0 <__alt_data_end+0xff00adf0>
 200af0c:	d9002217 	ldw	r4,136(sp)
 200af10:	0029883a 	mov	r20,zero
 200af14:	24c00017 	ldw	r19,0(r4)
 200af18:	21000104 	addi	r4,r4,4
 200af1c:	d9002215 	stw	r4,136(sp)
 200af20:	003d3206 	br	200a3ec <__alt_data_end+0xff00a3ec>
 200af24:	d8c02217 	ldw	r3,136(sp)
 200af28:	1cc00017 	ldw	r19,0(r3)
 200af2c:	18c00104 	addi	r3,r3,4
 200af30:	d8c02215 	stw	r3,136(sp)
 200af34:	9829d7fa 	srai	r20,r19,31
 200af38:	a005883a 	mov	r2,r20
 200af3c:	003d4b06 	br	200a46c <__alt_data_end+0xff00a46c>
 200af40:	0009883a 	mov	r4,zero
 200af44:	01400044 	movi	r5,1
 200af48:	d811883a 	mov	r8,sp
 200af4c:	003e4f06 	br	200a88c <__alt_data_end+0xff00a88c>
 200af50:	d8c02215 	stw	r3,136(sp)
 200af54:	002b883a 	mov	r21,zero
 200af58:	003db806 	br	200a63c <__alt_data_end+0xff00a63c>
 200af5c:	d811883a 	mov	r8,sp
 200af60:	003e9606 	br	200a9bc <__alt_data_end+0xff00a9bc>
 200af64:	01008074 	movhi	r4,513
 200af68:	2108d104 	addi	r4,r4,9028
 200af6c:	d9002315 	stw	r4,140(sp)
 200af70:	003e6306 	br	200a900 <__alt_data_end+0xff00a900>
 200af74:	b0c00043 	ldbu	r3,1(r22)
 200af78:	8c400814 	ori	r17,r17,32
 200af7c:	b5800044 	addi	r22,r22,1
 200af80:	18c03fcc 	andi	r3,r3,255
 200af84:	18c0201c 	xori	r3,r3,128
 200af88:	18ffe004 	addi	r3,r3,-128
 200af8c:	003b9c06 	br	2009e00 <__alt_data_end+0xff009e00>
 200af90:	b809883a 	mov	r4,r23
 200af94:	da002a15 	stw	r8,168(sp)
 200af98:	20023fc0 	call	20023fc <strlen>
 200af9c:	1029883a 	mov	r20,r2
 200afa0:	dd401d83 	ldbu	r21,118(sp)
 200afa4:	df002215 	stw	fp,136(sp)
 200afa8:	0021883a 	mov	r16,zero
 200afac:	da002a17 	ldw	r8,168(sp)
 200afb0:	003c3906 	br	200a098 <__alt_data_end+0xff00a098>
 200afb4:	d9402017 	ldw	r5,128(sp)
 200afb8:	d9002117 	ldw	r4,132(sp)
 200afbc:	d9801a04 	addi	r6,sp,104
 200afc0:	2009b780 	call	2009b78 <__sprint_r.part.0>
 200afc4:	103e691e 	bne	r2,zero,200a96c <__alt_data_end+0xff00a96c>
 200afc8:	d9001b17 	ldw	r4,108(sp)
 200afcc:	d8801c17 	ldw	r2,112(sp)
 200afd0:	d811883a 	mov	r8,sp
 200afd4:	21400044 	addi	r5,r4,1
 200afd8:	003e2e06 	br	200a894 <__alt_data_end+0xff00a894>
 200afdc:	01008074 	movhi	r4,513
 200afe0:	2108d504 	addi	r4,r4,9044
 200afe4:	d9002315 	stw	r4,140(sp)
 200afe8:	d9001b17 	ldw	r4,108(sp)
 200afec:	21000044 	addi	r4,r4,1
 200aff0:	003c5e06 	br	200a16c <__alt_data_end+0xff00a16c>
 200aff4:	002b883a 	mov	r21,zero
 200aff8:	00800084 	movi	r2,2
 200affc:	10803fcc 	andi	r2,r2,255
 200b000:	01000044 	movi	r4,1
 200b004:	11002b26 	beq	r2,r4,200b0b4 <___vfiprintf_internal_r+0x1428>
 200b008:	01000084 	movi	r4,2
 200b00c:	11002b1e 	bne	r2,r4,200b0bc <___vfiprintf_internal_r+0x1430>
 200b010:	1823883a 	mov	r17,r3
 200b014:	003ee506 	br	200abac <__alt_data_end+0xff00abac>
 200b018:	8807883a 	mov	r3,r17
 200b01c:	00800044 	movi	r2,1
 200b020:	003ff606 	br	200affc <__alt_data_end+0xff00affc>
 200b024:	00800184 	movi	r2,6
 200b028:	1400012e 	bgeu	r2,r16,200b030 <___vfiprintf_internal_r+0x13a4>
 200b02c:	1021883a 	mov	r16,r2
 200b030:	8029883a 	mov	r20,r16
 200b034:	8027883a 	mov	r19,r16
 200b038:	80002216 	blt	r16,zero,200b0c4 <___vfiprintf_internal_r+0x1438>
 200b03c:	05c08074 	movhi	r23,513
 200b040:	df002215 	stw	fp,136(sp)
 200b044:	bdc87504 	addi	r23,r23,8660
 200b048:	003cfb06 	br	200a438 <__alt_data_end+0xff00a438>
 200b04c:	d9002217 	ldw	r4,136(sp)
 200b050:	d9402417 	ldw	r5,144(sp)
 200b054:	20800017 	ldw	r2,0(r4)
 200b058:	21000104 	addi	r4,r4,4
 200b05c:	d9002215 	stw	r4,136(sp)
 200b060:	11400015 	stw	r5,0(r2)
 200b064:	003b3d06 	br	2009d5c <__alt_data_end+0xff009d5c>
 200b068:	01408074 	movhi	r5,513
 200b06c:	2948d504 	addi	r5,r5,9044
 200b070:	d9402315 	stw	r5,140(sp)
 200b074:	d9401b17 	ldw	r5,108(sp)
 200b078:	29400044 	addi	r5,r5,1
 200b07c:	003e6d06 	br	200aa34 <__alt_data_end+0xff00aa34>
 200b080:	8029883a 	mov	r20,r16
 200b084:	dd401d83 	ldbu	r21,118(sp)
 200b088:	df002215 	stw	fp,136(sp)
 200b08c:	0021883a 	mov	r16,zero
 200b090:	003c0106 	br	200a098 <__alt_data_end+0xff00a098>
 200b094:	00c08074 	movhi	r3,513
 200b098:	18c8d104 	addi	r3,r3,9028
 200b09c:	d8c02315 	stw	r3,140(sp)
 200b0a0:	280d883a 	mov	r6,r5
 200b0a4:	003c6906 	br	200a24c <__alt_data_end+0xff00a24c>
 200b0a8:	802d883a 	mov	r22,r16
 200b0ac:	0021883a 	mov	r16,zero
 200b0b0:	003b5406 	br	2009e04 <__alt_data_end+0xff009e04>
 200b0b4:	1823883a 	mov	r17,r3
 200b0b8:	003cf306 	br	200a488 <__alt_data_end+0xff00a488>
 200b0bc:	1823883a 	mov	r17,r3
 200b0c0:	003cad06 	br	200a378 <__alt_data_end+0xff00a378>
 200b0c4:	0027883a 	mov	r19,zero
 200b0c8:	003fdc06 	br	200b03c <__alt_data_end+0xff00b03c>
 200b0cc:	d9402217 	ldw	r5,136(sp)
 200b0d0:	8005883a 	mov	r2,r16
 200b0d4:	b0c00043 	ldbu	r3,1(r22)
 200b0d8:	2c000017 	ldw	r16,0(r5)
 200b0dc:	29000104 	addi	r4,r5,4
 200b0e0:	d9002215 	stw	r4,136(sp)
 200b0e4:	102d883a 	mov	r22,r2
 200b0e8:	803fa50e 	bge	r16,zero,200af80 <__alt_data_end+0xff00af80>
 200b0ec:	18c03fcc 	andi	r3,r3,255
 200b0f0:	18c0201c 	xori	r3,r3,128
 200b0f4:	043fffc4 	movi	r16,-1
 200b0f8:	18ffe004 	addi	r3,r3,-128
 200b0fc:	003b4006 	br	2009e00 <__alt_data_end+0xff009e00>
 200b100:	d9402303 	ldbu	r5,140(sp)
 200b104:	d9401d85 	stb	r5,118(sp)
 200b108:	003cae06 	br	200a3c4 <__alt_data_end+0xff00a3c4>
 200b10c:	d8c02303 	ldbu	r3,140(sp)
 200b110:	d8c01d85 	stb	r3,118(sp)
 200b114:	003d1406 	br	200a568 <__alt_data_end+0xff00a568>
 200b118:	d8c02303 	ldbu	r3,140(sp)
 200b11c:	d8c01d85 	stb	r3,118(sp)
 200b120:	003cca06 	br	200a44c <__alt_data_end+0xff00a44c>
 200b124:	8880004c 	andi	r2,r17,1
 200b128:	002b883a 	mov	r21,zero
 200b12c:	10000526 	beq	r2,zero,200b144 <___vfiprintf_internal_r+0x14b8>
 200b130:	00800c04 	movi	r2,48
 200b134:	d88019c5 	stb	r2,103(sp)
 200b138:	dd002817 	ldw	r20,160(sp)
 200b13c:	ddc019c4 	addi	r23,sp,103
 200b140:	003bd506 	br	200a098 <__alt_data_end+0xff00a098>
 200b144:	0029883a 	mov	r20,zero
 200b148:	ddc01a04 	addi	r23,sp,104
 200b14c:	003bd206 	br	200a098 <__alt_data_end+0xff00a098>
 200b150:	d9002303 	ldbu	r4,140(sp)
 200b154:	d9001d85 	stb	r4,118(sp)
 200b158:	003da606 	br	200a7f4 <__alt_data_end+0xff00a7f4>
 200b15c:	d8c02303 	ldbu	r3,140(sp)
 200b160:	d8c01d85 	stb	r3,118(sp)
 200b164:	003c7606 	br	200a340 <__alt_data_end+0xff00a340>
 200b168:	d8c02303 	ldbu	r3,140(sp)
 200b16c:	d8c01d85 	stb	r3,118(sp)
 200b170:	003c6506 	br	200a308 <__alt_data_end+0xff00a308>
 200b174:	d9002303 	ldbu	r4,140(sp)
 200b178:	d9001d85 	stb	r4,118(sp)
 200b17c:	003d3d06 	br	200a674 <__alt_data_end+0xff00a674>
 200b180:	d8c02303 	ldbu	r3,140(sp)
 200b184:	d8c01d85 	stb	r3,118(sp)
 200b188:	003d1d06 	br	200a600 <__alt_data_end+0xff00a600>
 200b18c:	d8c02303 	ldbu	r3,140(sp)
 200b190:	d8c01d85 	stb	r3,118(sp)
 200b194:	003d0306 	br	200a5a4 <__alt_data_end+0xff00a5a4>

0200b198 <__vfiprintf_internal>:
 200b198:	00808074 	movhi	r2,513
 200b19c:	108fd204 	addi	r2,r2,16200
 200b1a0:	300f883a 	mov	r7,r6
 200b1a4:	280d883a 	mov	r6,r5
 200b1a8:	200b883a 	mov	r5,r4
 200b1ac:	11000017 	ldw	r4,0(r2)
 200b1b0:	2009c8c1 	jmpi	2009c8c <___vfiprintf_internal_r>

0200b1b4 <__sbprintf>:
 200b1b4:	2880030b 	ldhu	r2,12(r5)
 200b1b8:	2ac01917 	ldw	r11,100(r5)
 200b1bc:	2a80038b 	ldhu	r10,14(r5)
 200b1c0:	2a400717 	ldw	r9,28(r5)
 200b1c4:	2a000917 	ldw	r8,36(r5)
 200b1c8:	defee204 	addi	sp,sp,-1144
 200b1cc:	00c10004 	movi	r3,1024
 200b1d0:	dc011a15 	stw	r16,1128(sp)
 200b1d4:	10bfff4c 	andi	r2,r2,65533
 200b1d8:	2821883a 	mov	r16,r5
 200b1dc:	d8cb883a 	add	r5,sp,r3
 200b1e0:	dc811c15 	stw	r18,1136(sp)
 200b1e4:	dc411b15 	stw	r17,1132(sp)
 200b1e8:	dfc11d15 	stw	ra,1140(sp)
 200b1ec:	2025883a 	mov	r18,r4
 200b1f0:	d881030d 	sth	r2,1036(sp)
 200b1f4:	dac11915 	stw	r11,1124(sp)
 200b1f8:	da81038d 	sth	r10,1038(sp)
 200b1fc:	da410715 	stw	r9,1052(sp)
 200b200:	da010915 	stw	r8,1060(sp)
 200b204:	dec10015 	stw	sp,1024(sp)
 200b208:	dec10415 	stw	sp,1040(sp)
 200b20c:	d8c10215 	stw	r3,1032(sp)
 200b210:	d8c10515 	stw	r3,1044(sp)
 200b214:	d8010615 	stw	zero,1048(sp)
 200b218:	2009c8c0 	call	2009c8c <___vfiprintf_internal_r>
 200b21c:	1023883a 	mov	r17,r2
 200b220:	10000416 	blt	r2,zero,200b234 <__sbprintf+0x80>
 200b224:	d9410004 	addi	r5,sp,1024
 200b228:	9009883a 	mov	r4,r18
 200b22c:	20064680 	call	2006468 <_fflush_r>
 200b230:	10000d1e 	bne	r2,zero,200b268 <__sbprintf+0xb4>
 200b234:	d881030b 	ldhu	r2,1036(sp)
 200b238:	1080100c 	andi	r2,r2,64
 200b23c:	10000326 	beq	r2,zero,200b24c <__sbprintf+0x98>
 200b240:	8080030b 	ldhu	r2,12(r16)
 200b244:	10801014 	ori	r2,r2,64
 200b248:	8080030d 	sth	r2,12(r16)
 200b24c:	8805883a 	mov	r2,r17
 200b250:	dfc11d17 	ldw	ra,1140(sp)
 200b254:	dc811c17 	ldw	r18,1136(sp)
 200b258:	dc411b17 	ldw	r17,1132(sp)
 200b25c:	dc011a17 	ldw	r16,1128(sp)
 200b260:	dec11e04 	addi	sp,sp,1144
 200b264:	f800283a 	ret
 200b268:	047fffc4 	movi	r17,-1
 200b26c:	003ff106 	br	200b234 <__alt_data_end+0xff00b234>

0200b270 <_write_r>:
 200b270:	defffd04 	addi	sp,sp,-12
 200b274:	2805883a 	mov	r2,r5
 200b278:	dc000015 	stw	r16,0(sp)
 200b27c:	04008074 	movhi	r16,513
 200b280:	dc400115 	stw	r17,4(sp)
 200b284:	300b883a 	mov	r5,r6
 200b288:	8416a304 	addi	r16,r16,23180
 200b28c:	2023883a 	mov	r17,r4
 200b290:	380d883a 	mov	r6,r7
 200b294:	1009883a 	mov	r4,r2
 200b298:	dfc00215 	stw	ra,8(sp)
 200b29c:	80000015 	stw	zero,0(r16)
 200b2a0:	200fac00 	call	200fac0 <write>
 200b2a4:	00ffffc4 	movi	r3,-1
 200b2a8:	10c00526 	beq	r2,r3,200b2c0 <_write_r+0x50>
 200b2ac:	dfc00217 	ldw	ra,8(sp)
 200b2b0:	dc400117 	ldw	r17,4(sp)
 200b2b4:	dc000017 	ldw	r16,0(sp)
 200b2b8:	dec00304 	addi	sp,sp,12
 200b2bc:	f800283a 	ret
 200b2c0:	80c00017 	ldw	r3,0(r16)
 200b2c4:	183ff926 	beq	r3,zero,200b2ac <__alt_data_end+0xff00b2ac>
 200b2c8:	88c00015 	stw	r3,0(r17)
 200b2cc:	003ff706 	br	200b2ac <__alt_data_end+0xff00b2ac>

0200b2d0 <_close_r>:
 200b2d0:	defffd04 	addi	sp,sp,-12
 200b2d4:	dc000015 	stw	r16,0(sp)
 200b2d8:	04008074 	movhi	r16,513
 200b2dc:	dc400115 	stw	r17,4(sp)
 200b2e0:	8416a304 	addi	r16,r16,23180
 200b2e4:	2023883a 	mov	r17,r4
 200b2e8:	2809883a 	mov	r4,r5
 200b2ec:	dfc00215 	stw	ra,8(sp)
 200b2f0:	80000015 	stw	zero,0(r16)
 200b2f4:	200f2380 	call	200f238 <close>
 200b2f8:	00ffffc4 	movi	r3,-1
 200b2fc:	10c00526 	beq	r2,r3,200b314 <_close_r+0x44>
 200b300:	dfc00217 	ldw	ra,8(sp)
 200b304:	dc400117 	ldw	r17,4(sp)
 200b308:	dc000017 	ldw	r16,0(sp)
 200b30c:	dec00304 	addi	sp,sp,12
 200b310:	f800283a 	ret
 200b314:	80c00017 	ldw	r3,0(r16)
 200b318:	183ff926 	beq	r3,zero,200b300 <__alt_data_end+0xff00b300>
 200b31c:	88c00015 	stw	r3,0(r17)
 200b320:	003ff706 	br	200b300 <__alt_data_end+0xff00b300>

0200b324 <_calloc_r>:
 200b324:	defffe04 	addi	sp,sp,-8
 200b328:	2805883a 	mov	r2,r5
 200b32c:	dc000015 	stw	r16,0(sp)
 200b330:	300b883a 	mov	r5,r6
 200b334:	2021883a 	mov	r16,r4
 200b338:	1009883a 	mov	r4,r2
 200b33c:	dfc00115 	stw	ra,4(sp)
 200b340:	200c9300 	call	200c930 <__mulsi3>
 200b344:	100b883a 	mov	r5,r2
 200b348:	8009883a 	mov	r4,r16
 200b34c:	20075c00 	call	20075c0 <_malloc_r>
 200b350:	10002926 	beq	r2,zero,200b3f8 <_calloc_r+0xd4>
 200b354:	11bfff17 	ldw	r6,-4(r2)
 200b358:	1021883a 	mov	r16,r2
 200b35c:	00bfff04 	movi	r2,-4
 200b360:	308c703a 	and	r6,r6,r2
 200b364:	00c00904 	movi	r3,36
 200b368:	308d883a 	add	r6,r6,r2
 200b36c:	19801636 	bltu	r3,r6,200b3c8 <_calloc_r+0xa4>
 200b370:	008004c4 	movi	r2,19
 200b374:	11800b2e 	bgeu	r2,r6,200b3a4 <_calloc_r+0x80>
 200b378:	80000015 	stw	zero,0(r16)
 200b37c:	80000115 	stw	zero,4(r16)
 200b380:	008006c4 	movi	r2,27
 200b384:	11801a2e 	bgeu	r2,r6,200b3f0 <_calloc_r+0xcc>
 200b388:	80000215 	stw	zero,8(r16)
 200b38c:	80000315 	stw	zero,12(r16)
 200b390:	30c0151e 	bne	r6,r3,200b3e8 <_calloc_r+0xc4>
 200b394:	80000415 	stw	zero,16(r16)
 200b398:	80800604 	addi	r2,r16,24
 200b39c:	80000515 	stw	zero,20(r16)
 200b3a0:	00000106 	br	200b3a8 <_calloc_r+0x84>
 200b3a4:	8005883a 	mov	r2,r16
 200b3a8:	10000015 	stw	zero,0(r2)
 200b3ac:	10000115 	stw	zero,4(r2)
 200b3b0:	10000215 	stw	zero,8(r2)
 200b3b4:	8005883a 	mov	r2,r16
 200b3b8:	dfc00117 	ldw	ra,4(sp)
 200b3bc:	dc000017 	ldw	r16,0(sp)
 200b3c0:	dec00204 	addi	sp,sp,8
 200b3c4:	f800283a 	ret
 200b3c8:	000b883a 	mov	r5,zero
 200b3cc:	8009883a 	mov	r4,r16
 200b3d0:	20081540 	call	2008154 <memset>
 200b3d4:	8005883a 	mov	r2,r16
 200b3d8:	dfc00117 	ldw	ra,4(sp)
 200b3dc:	dc000017 	ldw	r16,0(sp)
 200b3e0:	dec00204 	addi	sp,sp,8
 200b3e4:	f800283a 	ret
 200b3e8:	80800404 	addi	r2,r16,16
 200b3ec:	003fee06 	br	200b3a8 <__alt_data_end+0xff00b3a8>
 200b3f0:	80800204 	addi	r2,r16,8
 200b3f4:	003fec06 	br	200b3a8 <__alt_data_end+0xff00b3a8>
 200b3f8:	0005883a 	mov	r2,zero
 200b3fc:	003fee06 	br	200b3b8 <__alt_data_end+0xff00b3b8>

0200b400 <_fclose_r>:
 200b400:	28003926 	beq	r5,zero,200b4e8 <_fclose_r+0xe8>
 200b404:	defffc04 	addi	sp,sp,-16
 200b408:	dc400115 	stw	r17,4(sp)
 200b40c:	dc000015 	stw	r16,0(sp)
 200b410:	dfc00315 	stw	ra,12(sp)
 200b414:	dc800215 	stw	r18,8(sp)
 200b418:	2023883a 	mov	r17,r4
 200b41c:	2821883a 	mov	r16,r5
 200b420:	20000226 	beq	r4,zero,200b42c <_fclose_r+0x2c>
 200b424:	20800e17 	ldw	r2,56(r4)
 200b428:	10002726 	beq	r2,zero,200b4c8 <_fclose_r+0xc8>
 200b42c:	8080030f 	ldh	r2,12(r16)
 200b430:	1000071e 	bne	r2,zero,200b450 <_fclose_r+0x50>
 200b434:	0005883a 	mov	r2,zero
 200b438:	dfc00317 	ldw	ra,12(sp)
 200b43c:	dc800217 	ldw	r18,8(sp)
 200b440:	dc400117 	ldw	r17,4(sp)
 200b444:	dc000017 	ldw	r16,0(sp)
 200b448:	dec00404 	addi	sp,sp,16
 200b44c:	f800283a 	ret
 200b450:	800b883a 	mov	r5,r16
 200b454:	8809883a 	mov	r4,r17
 200b458:	200624c0 	call	200624c <__sflush_r>
 200b45c:	1025883a 	mov	r18,r2
 200b460:	80800b17 	ldw	r2,44(r16)
 200b464:	10000426 	beq	r2,zero,200b478 <_fclose_r+0x78>
 200b468:	81400717 	ldw	r5,28(r16)
 200b46c:	8809883a 	mov	r4,r17
 200b470:	103ee83a 	callr	r2
 200b474:	10001616 	blt	r2,zero,200b4d0 <_fclose_r+0xd0>
 200b478:	8080030b 	ldhu	r2,12(r16)
 200b47c:	1080200c 	andi	r2,r2,128
 200b480:	1000151e 	bne	r2,zero,200b4d8 <_fclose_r+0xd8>
 200b484:	81400c17 	ldw	r5,48(r16)
 200b488:	28000526 	beq	r5,zero,200b4a0 <_fclose_r+0xa0>
 200b48c:	80801004 	addi	r2,r16,64
 200b490:	28800226 	beq	r5,r2,200b49c <_fclose_r+0x9c>
 200b494:	8809883a 	mov	r4,r17
 200b498:	20069c80 	call	20069c8 <_free_r>
 200b49c:	80000c15 	stw	zero,48(r16)
 200b4a0:	81401117 	ldw	r5,68(r16)
 200b4a4:	28000326 	beq	r5,zero,200b4b4 <_fclose_r+0xb4>
 200b4a8:	8809883a 	mov	r4,r17
 200b4ac:	20069c80 	call	20069c8 <_free_r>
 200b4b0:	80001115 	stw	zero,68(r16)
 200b4b4:	20068640 	call	2006864 <__sfp_lock_acquire>
 200b4b8:	8000030d 	sth	zero,12(r16)
 200b4bc:	20068680 	call	2006868 <__sfp_lock_release>
 200b4c0:	9005883a 	mov	r2,r18
 200b4c4:	003fdc06 	br	200b438 <__alt_data_end+0xff00b438>
 200b4c8:	20068540 	call	2006854 <__sinit>
 200b4cc:	003fd706 	br	200b42c <__alt_data_end+0xff00b42c>
 200b4d0:	04bfffc4 	movi	r18,-1
 200b4d4:	003fe806 	br	200b478 <__alt_data_end+0xff00b478>
 200b4d8:	81400417 	ldw	r5,16(r16)
 200b4dc:	8809883a 	mov	r4,r17
 200b4e0:	20069c80 	call	20069c8 <_free_r>
 200b4e4:	003fe706 	br	200b484 <__alt_data_end+0xff00b484>
 200b4e8:	0005883a 	mov	r2,zero
 200b4ec:	f800283a 	ret

0200b4f0 <fclose>:
 200b4f0:	00808074 	movhi	r2,513
 200b4f4:	108fd204 	addi	r2,r2,16200
 200b4f8:	200b883a 	mov	r5,r4
 200b4fc:	11000017 	ldw	r4,0(r2)
 200b500:	200b4001 	jmpi	200b400 <_fclose_r>

0200b504 <__fputwc>:
 200b504:	defff804 	addi	sp,sp,-32
 200b508:	dcc00415 	stw	r19,16(sp)
 200b50c:	dc800315 	stw	r18,12(sp)
 200b510:	dc000115 	stw	r16,4(sp)
 200b514:	dfc00715 	stw	ra,28(sp)
 200b518:	dd400615 	stw	r21,24(sp)
 200b51c:	dd000515 	stw	r20,20(sp)
 200b520:	dc400215 	stw	r17,8(sp)
 200b524:	2027883a 	mov	r19,r4
 200b528:	2825883a 	mov	r18,r5
 200b52c:	3021883a 	mov	r16,r6
 200b530:	20073b00 	call	20073b0 <__locale_mb_cur_max>
 200b534:	00c00044 	movi	r3,1
 200b538:	10c03e26 	beq	r2,r3,200b634 <__fputwc+0x130>
 200b53c:	81c01704 	addi	r7,r16,92
 200b540:	900d883a 	mov	r6,r18
 200b544:	d80b883a 	mov	r5,sp
 200b548:	9809883a 	mov	r4,r19
 200b54c:	200b9d40 	call	200b9d4 <_wcrtomb_r>
 200b550:	1029883a 	mov	r20,r2
 200b554:	00bfffc4 	movi	r2,-1
 200b558:	a0802026 	beq	r20,r2,200b5dc <__fputwc+0xd8>
 200b55c:	d9400003 	ldbu	r5,0(sp)
 200b560:	a0001c26 	beq	r20,zero,200b5d4 <__fputwc+0xd0>
 200b564:	0023883a 	mov	r17,zero
 200b568:	05400284 	movi	r21,10
 200b56c:	00000906 	br	200b594 <__fputwc+0x90>
 200b570:	80800017 	ldw	r2,0(r16)
 200b574:	11400005 	stb	r5,0(r2)
 200b578:	80c00017 	ldw	r3,0(r16)
 200b57c:	18c00044 	addi	r3,r3,1
 200b580:	80c00015 	stw	r3,0(r16)
 200b584:	8c400044 	addi	r17,r17,1
 200b588:	dc45883a 	add	r2,sp,r17
 200b58c:	8d00112e 	bgeu	r17,r20,200b5d4 <__fputwc+0xd0>
 200b590:	11400003 	ldbu	r5,0(r2)
 200b594:	80c00217 	ldw	r3,8(r16)
 200b598:	18ffffc4 	addi	r3,r3,-1
 200b59c:	80c00215 	stw	r3,8(r16)
 200b5a0:	183ff30e 	bge	r3,zero,200b570 <__alt_data_end+0xff00b570>
 200b5a4:	80800617 	ldw	r2,24(r16)
 200b5a8:	18801916 	blt	r3,r2,200b610 <__fputwc+0x10c>
 200b5ac:	80800017 	ldw	r2,0(r16)
 200b5b0:	11400005 	stb	r5,0(r2)
 200b5b4:	80800017 	ldw	r2,0(r16)
 200b5b8:	10c00003 	ldbu	r3,0(r2)
 200b5bc:	10800044 	addi	r2,r2,1
 200b5c0:	1d402326 	beq	r3,r21,200b650 <__fputwc+0x14c>
 200b5c4:	80800015 	stw	r2,0(r16)
 200b5c8:	8c400044 	addi	r17,r17,1
 200b5cc:	dc45883a 	add	r2,sp,r17
 200b5d0:	8d3fef36 	bltu	r17,r20,200b590 <__alt_data_end+0xff00b590>
 200b5d4:	9005883a 	mov	r2,r18
 200b5d8:	00000406 	br	200b5ec <__fputwc+0xe8>
 200b5dc:	80c0030b 	ldhu	r3,12(r16)
 200b5e0:	a005883a 	mov	r2,r20
 200b5e4:	18c01014 	ori	r3,r3,64
 200b5e8:	80c0030d 	sth	r3,12(r16)
 200b5ec:	dfc00717 	ldw	ra,28(sp)
 200b5f0:	dd400617 	ldw	r21,24(sp)
 200b5f4:	dd000517 	ldw	r20,20(sp)
 200b5f8:	dcc00417 	ldw	r19,16(sp)
 200b5fc:	dc800317 	ldw	r18,12(sp)
 200b600:	dc400217 	ldw	r17,8(sp)
 200b604:	dc000117 	ldw	r16,4(sp)
 200b608:	dec00804 	addi	sp,sp,32
 200b60c:	f800283a 	ret
 200b610:	800d883a 	mov	r6,r16
 200b614:	29403fcc 	andi	r5,r5,255
 200b618:	9809883a 	mov	r4,r19
 200b61c:	200b87c0 	call	200b87c <__swbuf_r>
 200b620:	10bfffe0 	cmpeqi	r2,r2,-1
 200b624:	10803fcc 	andi	r2,r2,255
 200b628:	103fd626 	beq	r2,zero,200b584 <__alt_data_end+0xff00b584>
 200b62c:	00bfffc4 	movi	r2,-1
 200b630:	003fee06 	br	200b5ec <__alt_data_end+0xff00b5ec>
 200b634:	90ffffc4 	addi	r3,r18,-1
 200b638:	01003f84 	movi	r4,254
 200b63c:	20ffbf36 	bltu	r4,r3,200b53c <__alt_data_end+0xff00b53c>
 200b640:	900b883a 	mov	r5,r18
 200b644:	dc800005 	stb	r18,0(sp)
 200b648:	1029883a 	mov	r20,r2
 200b64c:	003fc506 	br	200b564 <__alt_data_end+0xff00b564>
 200b650:	800d883a 	mov	r6,r16
 200b654:	a80b883a 	mov	r5,r21
 200b658:	9809883a 	mov	r4,r19
 200b65c:	200b87c0 	call	200b87c <__swbuf_r>
 200b660:	10bfffe0 	cmpeqi	r2,r2,-1
 200b664:	003fef06 	br	200b624 <__alt_data_end+0xff00b624>

0200b668 <_fputwc_r>:
 200b668:	3080030b 	ldhu	r2,12(r6)
 200b66c:	10c8000c 	andi	r3,r2,8192
 200b670:	1800051e 	bne	r3,zero,200b688 <_fputwc_r+0x20>
 200b674:	30c01917 	ldw	r3,100(r6)
 200b678:	10880014 	ori	r2,r2,8192
 200b67c:	3080030d 	sth	r2,12(r6)
 200b680:	18880014 	ori	r2,r3,8192
 200b684:	30801915 	stw	r2,100(r6)
 200b688:	200b5041 	jmpi	200b504 <__fputwc>

0200b68c <fputwc>:
 200b68c:	00808074 	movhi	r2,513
 200b690:	defffc04 	addi	sp,sp,-16
 200b694:	108fd204 	addi	r2,r2,16200
 200b698:	dc000115 	stw	r16,4(sp)
 200b69c:	14000017 	ldw	r16,0(r2)
 200b6a0:	dc400215 	stw	r17,8(sp)
 200b6a4:	dfc00315 	stw	ra,12(sp)
 200b6a8:	2023883a 	mov	r17,r4
 200b6ac:	80000226 	beq	r16,zero,200b6b8 <fputwc+0x2c>
 200b6b0:	80800e17 	ldw	r2,56(r16)
 200b6b4:	10001026 	beq	r2,zero,200b6f8 <fputwc+0x6c>
 200b6b8:	2880030b 	ldhu	r2,12(r5)
 200b6bc:	10c8000c 	andi	r3,r2,8192
 200b6c0:	1800051e 	bne	r3,zero,200b6d8 <fputwc+0x4c>
 200b6c4:	28c01917 	ldw	r3,100(r5)
 200b6c8:	10880014 	ori	r2,r2,8192
 200b6cc:	2880030d 	sth	r2,12(r5)
 200b6d0:	18880014 	ori	r2,r3,8192
 200b6d4:	28801915 	stw	r2,100(r5)
 200b6d8:	280d883a 	mov	r6,r5
 200b6dc:	8009883a 	mov	r4,r16
 200b6e0:	880b883a 	mov	r5,r17
 200b6e4:	dfc00317 	ldw	ra,12(sp)
 200b6e8:	dc400217 	ldw	r17,8(sp)
 200b6ec:	dc000117 	ldw	r16,4(sp)
 200b6f0:	dec00404 	addi	sp,sp,16
 200b6f4:	200b5041 	jmpi	200b504 <__fputwc>
 200b6f8:	8009883a 	mov	r4,r16
 200b6fc:	d9400015 	stw	r5,0(sp)
 200b700:	20068540 	call	2006854 <__sinit>
 200b704:	d9400017 	ldw	r5,0(sp)
 200b708:	003feb06 	br	200b6b8 <__alt_data_end+0xff00b6b8>

0200b70c <_fstat_r>:
 200b70c:	defffd04 	addi	sp,sp,-12
 200b710:	2805883a 	mov	r2,r5
 200b714:	dc000015 	stw	r16,0(sp)
 200b718:	04008074 	movhi	r16,513
 200b71c:	dc400115 	stw	r17,4(sp)
 200b720:	8416a304 	addi	r16,r16,23180
 200b724:	2023883a 	mov	r17,r4
 200b728:	300b883a 	mov	r5,r6
 200b72c:	1009883a 	mov	r4,r2
 200b730:	dfc00215 	stw	ra,8(sp)
 200b734:	80000015 	stw	zero,0(r16)
 200b738:	200f3780 	call	200f378 <fstat>
 200b73c:	00ffffc4 	movi	r3,-1
 200b740:	10c00526 	beq	r2,r3,200b758 <_fstat_r+0x4c>
 200b744:	dfc00217 	ldw	ra,8(sp)
 200b748:	dc400117 	ldw	r17,4(sp)
 200b74c:	dc000017 	ldw	r16,0(sp)
 200b750:	dec00304 	addi	sp,sp,12
 200b754:	f800283a 	ret
 200b758:	80c00017 	ldw	r3,0(r16)
 200b75c:	183ff926 	beq	r3,zero,200b744 <__alt_data_end+0xff00b744>
 200b760:	88c00015 	stw	r3,0(r17)
 200b764:	003ff706 	br	200b744 <__alt_data_end+0xff00b744>

0200b768 <_isatty_r>:
 200b768:	defffd04 	addi	sp,sp,-12
 200b76c:	dc000015 	stw	r16,0(sp)
 200b770:	04008074 	movhi	r16,513
 200b774:	dc400115 	stw	r17,4(sp)
 200b778:	8416a304 	addi	r16,r16,23180
 200b77c:	2023883a 	mov	r17,r4
 200b780:	2809883a 	mov	r4,r5
 200b784:	dfc00215 	stw	ra,8(sp)
 200b788:	80000015 	stw	zero,0(r16)
 200b78c:	200f46c0 	call	200f46c <isatty>
 200b790:	00ffffc4 	movi	r3,-1
 200b794:	10c00526 	beq	r2,r3,200b7ac <_isatty_r+0x44>
 200b798:	dfc00217 	ldw	ra,8(sp)
 200b79c:	dc400117 	ldw	r17,4(sp)
 200b7a0:	dc000017 	ldw	r16,0(sp)
 200b7a4:	dec00304 	addi	sp,sp,12
 200b7a8:	f800283a 	ret
 200b7ac:	80c00017 	ldw	r3,0(r16)
 200b7b0:	183ff926 	beq	r3,zero,200b798 <__alt_data_end+0xff00b798>
 200b7b4:	88c00015 	stw	r3,0(r17)
 200b7b8:	003ff706 	br	200b798 <__alt_data_end+0xff00b798>

0200b7bc <_lseek_r>:
 200b7bc:	defffd04 	addi	sp,sp,-12
 200b7c0:	2805883a 	mov	r2,r5
 200b7c4:	dc000015 	stw	r16,0(sp)
 200b7c8:	04008074 	movhi	r16,513
 200b7cc:	dc400115 	stw	r17,4(sp)
 200b7d0:	300b883a 	mov	r5,r6
 200b7d4:	8416a304 	addi	r16,r16,23180
 200b7d8:	2023883a 	mov	r17,r4
 200b7dc:	380d883a 	mov	r6,r7
 200b7e0:	1009883a 	mov	r4,r2
 200b7e4:	dfc00215 	stw	ra,8(sp)
 200b7e8:	80000015 	stw	zero,0(r16)
 200b7ec:	200f6400 	call	200f640 <lseek>
 200b7f0:	00ffffc4 	movi	r3,-1
 200b7f4:	10c00526 	beq	r2,r3,200b80c <_lseek_r+0x50>
 200b7f8:	dfc00217 	ldw	ra,8(sp)
 200b7fc:	dc400117 	ldw	r17,4(sp)
 200b800:	dc000017 	ldw	r16,0(sp)
 200b804:	dec00304 	addi	sp,sp,12
 200b808:	f800283a 	ret
 200b80c:	80c00017 	ldw	r3,0(r16)
 200b810:	183ff926 	beq	r3,zero,200b7f8 <__alt_data_end+0xff00b7f8>
 200b814:	88c00015 	stw	r3,0(r17)
 200b818:	003ff706 	br	200b7f8 <__alt_data_end+0xff00b7f8>

0200b81c <_read_r>:
 200b81c:	defffd04 	addi	sp,sp,-12
 200b820:	2805883a 	mov	r2,r5
 200b824:	dc000015 	stw	r16,0(sp)
 200b828:	04008074 	movhi	r16,513
 200b82c:	dc400115 	stw	r17,4(sp)
 200b830:	300b883a 	mov	r5,r6
 200b834:	8416a304 	addi	r16,r16,23180
 200b838:	2023883a 	mov	r17,r4
 200b83c:	380d883a 	mov	r6,r7
 200b840:	1009883a 	mov	r4,r2
 200b844:	dfc00215 	stw	ra,8(sp)
 200b848:	80000015 	stw	zero,0(r16)
 200b84c:	200f81c0 	call	200f81c <read>
 200b850:	00ffffc4 	movi	r3,-1
 200b854:	10c00526 	beq	r2,r3,200b86c <_read_r+0x50>
 200b858:	dfc00217 	ldw	ra,8(sp)
 200b85c:	dc400117 	ldw	r17,4(sp)
 200b860:	dc000017 	ldw	r16,0(sp)
 200b864:	dec00304 	addi	sp,sp,12
 200b868:	f800283a 	ret
 200b86c:	80c00017 	ldw	r3,0(r16)
 200b870:	183ff926 	beq	r3,zero,200b858 <__alt_data_end+0xff00b858>
 200b874:	88c00015 	stw	r3,0(r17)
 200b878:	003ff706 	br	200b858 <__alt_data_end+0xff00b858>

0200b87c <__swbuf_r>:
 200b87c:	defffb04 	addi	sp,sp,-20
 200b880:	dcc00315 	stw	r19,12(sp)
 200b884:	dc800215 	stw	r18,8(sp)
 200b888:	dc000015 	stw	r16,0(sp)
 200b88c:	dfc00415 	stw	ra,16(sp)
 200b890:	dc400115 	stw	r17,4(sp)
 200b894:	2025883a 	mov	r18,r4
 200b898:	2827883a 	mov	r19,r5
 200b89c:	3021883a 	mov	r16,r6
 200b8a0:	20000226 	beq	r4,zero,200b8ac <__swbuf_r+0x30>
 200b8a4:	20800e17 	ldw	r2,56(r4)
 200b8a8:	10004226 	beq	r2,zero,200b9b4 <__swbuf_r+0x138>
 200b8ac:	80800617 	ldw	r2,24(r16)
 200b8b0:	8100030b 	ldhu	r4,12(r16)
 200b8b4:	80800215 	stw	r2,8(r16)
 200b8b8:	2080020c 	andi	r2,r4,8
 200b8bc:	10003626 	beq	r2,zero,200b998 <__swbuf_r+0x11c>
 200b8c0:	80c00417 	ldw	r3,16(r16)
 200b8c4:	18003426 	beq	r3,zero,200b998 <__swbuf_r+0x11c>
 200b8c8:	2088000c 	andi	r2,r4,8192
 200b8cc:	9c403fcc 	andi	r17,r19,255
 200b8d0:	10001a26 	beq	r2,zero,200b93c <__swbuf_r+0xc0>
 200b8d4:	80800017 	ldw	r2,0(r16)
 200b8d8:	81000517 	ldw	r4,20(r16)
 200b8dc:	10c7c83a 	sub	r3,r2,r3
 200b8e0:	1900200e 	bge	r3,r4,200b964 <__swbuf_r+0xe8>
 200b8e4:	18c00044 	addi	r3,r3,1
 200b8e8:	81000217 	ldw	r4,8(r16)
 200b8ec:	11400044 	addi	r5,r2,1
 200b8f0:	81400015 	stw	r5,0(r16)
 200b8f4:	213fffc4 	addi	r4,r4,-1
 200b8f8:	81000215 	stw	r4,8(r16)
 200b8fc:	14c00005 	stb	r19,0(r2)
 200b900:	80800517 	ldw	r2,20(r16)
 200b904:	10c01e26 	beq	r2,r3,200b980 <__swbuf_r+0x104>
 200b908:	8080030b 	ldhu	r2,12(r16)
 200b90c:	1080004c 	andi	r2,r2,1
 200b910:	10000226 	beq	r2,zero,200b91c <__swbuf_r+0xa0>
 200b914:	00800284 	movi	r2,10
 200b918:	88801926 	beq	r17,r2,200b980 <__swbuf_r+0x104>
 200b91c:	8805883a 	mov	r2,r17
 200b920:	dfc00417 	ldw	ra,16(sp)
 200b924:	dcc00317 	ldw	r19,12(sp)
 200b928:	dc800217 	ldw	r18,8(sp)
 200b92c:	dc400117 	ldw	r17,4(sp)
 200b930:	dc000017 	ldw	r16,0(sp)
 200b934:	dec00504 	addi	sp,sp,20
 200b938:	f800283a 	ret
 200b93c:	81401917 	ldw	r5,100(r16)
 200b940:	00b7ffc4 	movi	r2,-8193
 200b944:	21080014 	ori	r4,r4,8192
 200b948:	2884703a 	and	r2,r5,r2
 200b94c:	80801915 	stw	r2,100(r16)
 200b950:	80800017 	ldw	r2,0(r16)
 200b954:	8100030d 	sth	r4,12(r16)
 200b958:	81000517 	ldw	r4,20(r16)
 200b95c:	10c7c83a 	sub	r3,r2,r3
 200b960:	193fe016 	blt	r3,r4,200b8e4 <__alt_data_end+0xff00b8e4>
 200b964:	800b883a 	mov	r5,r16
 200b968:	9009883a 	mov	r4,r18
 200b96c:	20064680 	call	2006468 <_fflush_r>
 200b970:	1000071e 	bne	r2,zero,200b990 <__swbuf_r+0x114>
 200b974:	80800017 	ldw	r2,0(r16)
 200b978:	00c00044 	movi	r3,1
 200b97c:	003fda06 	br	200b8e8 <__alt_data_end+0xff00b8e8>
 200b980:	800b883a 	mov	r5,r16
 200b984:	9009883a 	mov	r4,r18
 200b988:	20064680 	call	2006468 <_fflush_r>
 200b98c:	103fe326 	beq	r2,zero,200b91c <__alt_data_end+0xff00b91c>
 200b990:	00bfffc4 	movi	r2,-1
 200b994:	003fe206 	br	200b920 <__alt_data_end+0xff00b920>
 200b998:	800b883a 	mov	r5,r16
 200b99c:	9009883a 	mov	r4,r18
 200b9a0:	20048480 	call	2004848 <__swsetup_r>
 200b9a4:	103ffa1e 	bne	r2,zero,200b990 <__alt_data_end+0xff00b990>
 200b9a8:	8100030b 	ldhu	r4,12(r16)
 200b9ac:	80c00417 	ldw	r3,16(r16)
 200b9b0:	003fc506 	br	200b8c8 <__alt_data_end+0xff00b8c8>
 200b9b4:	20068540 	call	2006854 <__sinit>
 200b9b8:	003fbc06 	br	200b8ac <__alt_data_end+0xff00b8ac>

0200b9bc <__swbuf>:
 200b9bc:	00808074 	movhi	r2,513
 200b9c0:	108fd204 	addi	r2,r2,16200
 200b9c4:	280d883a 	mov	r6,r5
 200b9c8:	200b883a 	mov	r5,r4
 200b9cc:	11000017 	ldw	r4,0(r2)
 200b9d0:	200b87c1 	jmpi	200b87c <__swbuf_r>

0200b9d4 <_wcrtomb_r>:
 200b9d4:	defff604 	addi	sp,sp,-40
 200b9d8:	00808074 	movhi	r2,513
 200b9dc:	dc800815 	stw	r18,32(sp)
 200b9e0:	dc400715 	stw	r17,28(sp)
 200b9e4:	dc000615 	stw	r16,24(sp)
 200b9e8:	108fd604 	addi	r2,r2,16216
 200b9ec:	dfc00915 	stw	ra,36(sp)
 200b9f0:	2021883a 	mov	r16,r4
 200b9f4:	3823883a 	mov	r17,r7
 200b9f8:	14800017 	ldw	r18,0(r2)
 200b9fc:	28001426 	beq	r5,zero,200ba50 <_wcrtomb_r+0x7c>
 200ba00:	d9400415 	stw	r5,16(sp)
 200ba04:	d9800515 	stw	r6,20(sp)
 200ba08:	20073a40 	call	20073a4 <__locale_charset>
 200ba0c:	d9800517 	ldw	r6,20(sp)
 200ba10:	d9400417 	ldw	r5,16(sp)
 200ba14:	100f883a 	mov	r7,r2
 200ba18:	dc400015 	stw	r17,0(sp)
 200ba1c:	8009883a 	mov	r4,r16
 200ba20:	903ee83a 	callr	r18
 200ba24:	00ffffc4 	movi	r3,-1
 200ba28:	10c0031e 	bne	r2,r3,200ba38 <_wcrtomb_r+0x64>
 200ba2c:	88000015 	stw	zero,0(r17)
 200ba30:	00c02284 	movi	r3,138
 200ba34:	80c00015 	stw	r3,0(r16)
 200ba38:	dfc00917 	ldw	ra,36(sp)
 200ba3c:	dc800817 	ldw	r18,32(sp)
 200ba40:	dc400717 	ldw	r17,28(sp)
 200ba44:	dc000617 	ldw	r16,24(sp)
 200ba48:	dec00a04 	addi	sp,sp,40
 200ba4c:	f800283a 	ret
 200ba50:	20073a40 	call	20073a4 <__locale_charset>
 200ba54:	100f883a 	mov	r7,r2
 200ba58:	dc400015 	stw	r17,0(sp)
 200ba5c:	000d883a 	mov	r6,zero
 200ba60:	d9400104 	addi	r5,sp,4
 200ba64:	8009883a 	mov	r4,r16
 200ba68:	903ee83a 	callr	r18
 200ba6c:	003fed06 	br	200ba24 <__alt_data_end+0xff00ba24>

0200ba70 <wcrtomb>:
 200ba70:	defff604 	addi	sp,sp,-40
 200ba74:	00808074 	movhi	r2,513
 200ba78:	dc800615 	stw	r18,24(sp)
 200ba7c:	dc400515 	stw	r17,20(sp)
 200ba80:	108fd204 	addi	r2,r2,16200
 200ba84:	dfc00915 	stw	ra,36(sp)
 200ba88:	dd000815 	stw	r20,32(sp)
 200ba8c:	dcc00715 	stw	r19,28(sp)
 200ba90:	dc000415 	stw	r16,16(sp)
 200ba94:	3025883a 	mov	r18,r6
 200ba98:	14400017 	ldw	r17,0(r2)
 200ba9c:	20001926 	beq	r4,zero,200bb04 <wcrtomb+0x94>
 200baa0:	00808074 	movhi	r2,513
 200baa4:	108fd604 	addi	r2,r2,16216
 200baa8:	15000017 	ldw	r20,0(r2)
 200baac:	2021883a 	mov	r16,r4
 200bab0:	2827883a 	mov	r19,r5
 200bab4:	20073a40 	call	20073a4 <__locale_charset>
 200bab8:	100f883a 	mov	r7,r2
 200babc:	dc800015 	stw	r18,0(sp)
 200bac0:	980d883a 	mov	r6,r19
 200bac4:	800b883a 	mov	r5,r16
 200bac8:	8809883a 	mov	r4,r17
 200bacc:	a03ee83a 	callr	r20
 200bad0:	00ffffc4 	movi	r3,-1
 200bad4:	10c0031e 	bne	r2,r3,200bae4 <wcrtomb+0x74>
 200bad8:	90000015 	stw	zero,0(r18)
 200badc:	00c02284 	movi	r3,138
 200bae0:	88c00015 	stw	r3,0(r17)
 200bae4:	dfc00917 	ldw	ra,36(sp)
 200bae8:	dd000817 	ldw	r20,32(sp)
 200baec:	dcc00717 	ldw	r19,28(sp)
 200baf0:	dc800617 	ldw	r18,24(sp)
 200baf4:	dc400517 	ldw	r17,20(sp)
 200baf8:	dc000417 	ldw	r16,16(sp)
 200bafc:	dec00a04 	addi	sp,sp,40
 200bb00:	f800283a 	ret
 200bb04:	00808074 	movhi	r2,513
 200bb08:	108fd604 	addi	r2,r2,16216
 200bb0c:	14000017 	ldw	r16,0(r2)
 200bb10:	20073a40 	call	20073a4 <__locale_charset>
 200bb14:	100f883a 	mov	r7,r2
 200bb18:	dc800015 	stw	r18,0(sp)
 200bb1c:	000d883a 	mov	r6,zero
 200bb20:	d9400104 	addi	r5,sp,4
 200bb24:	8809883a 	mov	r4,r17
 200bb28:	803ee83a 	callr	r16
 200bb2c:	003fe806 	br	200bad0 <__alt_data_end+0xff00bad0>

0200bb30 <__ascii_wctomb>:
 200bb30:	28000526 	beq	r5,zero,200bb48 <__ascii_wctomb+0x18>
 200bb34:	00803fc4 	movi	r2,255
 200bb38:	11800536 	bltu	r2,r6,200bb50 <__ascii_wctomb+0x20>
 200bb3c:	29800005 	stb	r6,0(r5)
 200bb40:	00800044 	movi	r2,1
 200bb44:	f800283a 	ret
 200bb48:	0005883a 	mov	r2,zero
 200bb4c:	f800283a 	ret
 200bb50:	00802284 	movi	r2,138
 200bb54:	20800015 	stw	r2,0(r4)
 200bb58:	00bfffc4 	movi	r2,-1
 200bb5c:	f800283a 	ret

0200bb60 <_wctomb_r>:
 200bb60:	00808074 	movhi	r2,513
 200bb64:	defff904 	addi	sp,sp,-28
 200bb68:	108fd604 	addi	r2,r2,16216
 200bb6c:	dfc00615 	stw	ra,24(sp)
 200bb70:	dc400515 	stw	r17,20(sp)
 200bb74:	dc000415 	stw	r16,16(sp)
 200bb78:	3823883a 	mov	r17,r7
 200bb7c:	14000017 	ldw	r16,0(r2)
 200bb80:	d9000115 	stw	r4,4(sp)
 200bb84:	d9400215 	stw	r5,8(sp)
 200bb88:	d9800315 	stw	r6,12(sp)
 200bb8c:	20073a40 	call	20073a4 <__locale_charset>
 200bb90:	d9800317 	ldw	r6,12(sp)
 200bb94:	d9400217 	ldw	r5,8(sp)
 200bb98:	d9000117 	ldw	r4,4(sp)
 200bb9c:	100f883a 	mov	r7,r2
 200bba0:	dc400015 	stw	r17,0(sp)
 200bba4:	803ee83a 	callr	r16
 200bba8:	dfc00617 	ldw	ra,24(sp)
 200bbac:	dc400517 	ldw	r17,20(sp)
 200bbb0:	dc000417 	ldw	r16,16(sp)
 200bbb4:	dec00704 	addi	sp,sp,28
 200bbb8:	f800283a 	ret

0200bbbc <__udivdi3>:
 200bbbc:	defff404 	addi	sp,sp,-48
 200bbc0:	dcc00515 	stw	r19,20(sp)
 200bbc4:	dc000215 	stw	r16,8(sp)
 200bbc8:	dfc00b15 	stw	ra,44(sp)
 200bbcc:	df000a15 	stw	fp,40(sp)
 200bbd0:	ddc00915 	stw	r23,36(sp)
 200bbd4:	dd800815 	stw	r22,32(sp)
 200bbd8:	dd400715 	stw	r21,28(sp)
 200bbdc:	dd000615 	stw	r20,24(sp)
 200bbe0:	dc800415 	stw	r18,16(sp)
 200bbe4:	dc400315 	stw	r17,12(sp)
 200bbe8:	2027883a 	mov	r19,r4
 200bbec:	2821883a 	mov	r16,r5
 200bbf0:	3800461e 	bne	r7,zero,200bd0c <__udivdi3+0x150>
 200bbf4:	3023883a 	mov	r17,r6
 200bbf8:	2025883a 	mov	r18,r4
 200bbfc:	2980572e 	bgeu	r5,r6,200bd5c <__udivdi3+0x1a0>
 200bc00:	00bfffd4 	movui	r2,65535
 200bc04:	282d883a 	mov	r22,r5
 200bc08:	1180b236 	bltu	r2,r6,200bed4 <__udivdi3+0x318>
 200bc0c:	00803fc4 	movi	r2,255
 200bc10:	1185803a 	cmpltu	r2,r2,r6
 200bc14:	100490fa 	slli	r2,r2,3
 200bc18:	3086d83a 	srl	r3,r6,r2
 200bc1c:	01008074 	movhi	r4,513
 200bc20:	2108d904 	addi	r4,r4,9060
 200bc24:	20c7883a 	add	r3,r4,r3
 200bc28:	18c00003 	ldbu	r3,0(r3)
 200bc2c:	1885883a 	add	r2,r3,r2
 200bc30:	00c00804 	movi	r3,32
 200bc34:	1887c83a 	sub	r3,r3,r2
 200bc38:	18000526 	beq	r3,zero,200bc50 <__udivdi3+0x94>
 200bc3c:	80e0983a 	sll	r16,r16,r3
 200bc40:	9884d83a 	srl	r2,r19,r2
 200bc44:	30e2983a 	sll	r17,r6,r3
 200bc48:	98e4983a 	sll	r18,r19,r3
 200bc4c:	142cb03a 	or	r22,r2,r16
 200bc50:	882ad43a 	srli	r21,r17,16
 200bc54:	b009883a 	mov	r4,r22
 200bc58:	8d3fffcc 	andi	r20,r17,65535
 200bc5c:	a80b883a 	mov	r5,r21
 200bc60:	200c8d80 	call	200c8d8 <__umodsi3>
 200bc64:	b009883a 	mov	r4,r22
 200bc68:	a80b883a 	mov	r5,r21
 200bc6c:	1027883a 	mov	r19,r2
 200bc70:	200c8740 	call	200c874 <__udivsi3>
 200bc74:	100b883a 	mov	r5,r2
 200bc78:	a009883a 	mov	r4,r20
 200bc7c:	102d883a 	mov	r22,r2
 200bc80:	200c9300 	call	200c930 <__mulsi3>
 200bc84:	9826943a 	slli	r19,r19,16
 200bc88:	9006d43a 	srli	r3,r18,16
 200bc8c:	1cc6b03a 	or	r3,r3,r19
 200bc90:	1880052e 	bgeu	r3,r2,200bca8 <__udivdi3+0xec>
 200bc94:	1c47883a 	add	r3,r3,r17
 200bc98:	b13fffc4 	addi	r4,r22,-1
 200bc9c:	1c400136 	bltu	r3,r17,200bca4 <__udivdi3+0xe8>
 200bca0:	18814236 	bltu	r3,r2,200c1ac <__udivdi3+0x5f0>
 200bca4:	202d883a 	mov	r22,r4
 200bca8:	18a1c83a 	sub	r16,r3,r2
 200bcac:	8009883a 	mov	r4,r16
 200bcb0:	a80b883a 	mov	r5,r21
 200bcb4:	200c8d80 	call	200c8d8 <__umodsi3>
 200bcb8:	1027883a 	mov	r19,r2
 200bcbc:	8009883a 	mov	r4,r16
 200bcc0:	a80b883a 	mov	r5,r21
 200bcc4:	9826943a 	slli	r19,r19,16
 200bcc8:	200c8740 	call	200c874 <__udivsi3>
 200bccc:	100b883a 	mov	r5,r2
 200bcd0:	a009883a 	mov	r4,r20
 200bcd4:	94bfffcc 	andi	r18,r18,65535
 200bcd8:	1021883a 	mov	r16,r2
 200bcdc:	94e4b03a 	or	r18,r18,r19
 200bce0:	200c9300 	call	200c930 <__mulsi3>
 200bce4:	9080052e 	bgeu	r18,r2,200bcfc <__udivdi3+0x140>
 200bce8:	8ca5883a 	add	r18,r17,r18
 200bcec:	80ffffc4 	addi	r3,r16,-1
 200bcf0:	94410c36 	bltu	r18,r17,200c124 <__udivdi3+0x568>
 200bcf4:	90810b2e 	bgeu	r18,r2,200c124 <__udivdi3+0x568>
 200bcf8:	843fff84 	addi	r16,r16,-2
 200bcfc:	b004943a 	slli	r2,r22,16
 200bd00:	0007883a 	mov	r3,zero
 200bd04:	1404b03a 	or	r2,r2,r16
 200bd08:	00005e06 	br	200be84 <__udivdi3+0x2c8>
 200bd0c:	29c05b36 	bltu	r5,r7,200be7c <__udivdi3+0x2c0>
 200bd10:	00bfffd4 	movui	r2,65535
 200bd14:	11c0672e 	bgeu	r2,r7,200beb4 <__udivdi3+0x2f8>
 200bd18:	00804034 	movhi	r2,256
 200bd1c:	10bfffc4 	addi	r2,r2,-1
 200bd20:	11c10a36 	bltu	r2,r7,200c14c <__udivdi3+0x590>
 200bd24:	00800404 	movi	r2,16
 200bd28:	3886d83a 	srl	r3,r7,r2
 200bd2c:	01008074 	movhi	r4,513
 200bd30:	2108d904 	addi	r4,r4,9060
 200bd34:	20c7883a 	add	r3,r4,r3
 200bd38:	18c00003 	ldbu	r3,0(r3)
 200bd3c:	05c00804 	movi	r23,32
 200bd40:	1885883a 	add	r2,r3,r2
 200bd44:	b8afc83a 	sub	r23,r23,r2
 200bd48:	b800671e 	bne	r23,zero,200bee8 <__udivdi3+0x32c>
 200bd4c:	3c010536 	bltu	r7,r16,200c164 <__udivdi3+0x5a8>
 200bd50:	9985403a 	cmpgeu	r2,r19,r6
 200bd54:	0007883a 	mov	r3,zero
 200bd58:	00004a06 	br	200be84 <__udivdi3+0x2c8>
 200bd5c:	3000041e 	bne	r6,zero,200bd70 <__udivdi3+0x1b4>
 200bd60:	000b883a 	mov	r5,zero
 200bd64:	01000044 	movi	r4,1
 200bd68:	200c8740 	call	200c874 <__udivsi3>
 200bd6c:	1023883a 	mov	r17,r2
 200bd70:	00bfffd4 	movui	r2,65535
 200bd74:	1440532e 	bgeu	r2,r17,200bec4 <__udivdi3+0x308>
 200bd78:	00804034 	movhi	r2,256
 200bd7c:	10bfffc4 	addi	r2,r2,-1
 200bd80:	1440f436 	bltu	r2,r17,200c154 <__udivdi3+0x598>
 200bd84:	00800404 	movi	r2,16
 200bd88:	8886d83a 	srl	r3,r17,r2
 200bd8c:	01008074 	movhi	r4,513
 200bd90:	2108d904 	addi	r4,r4,9060
 200bd94:	20c7883a 	add	r3,r4,r3
 200bd98:	18c00003 	ldbu	r3,0(r3)
 200bd9c:	1885883a 	add	r2,r3,r2
 200bda0:	00c00804 	movi	r3,32
 200bda4:	1887c83a 	sub	r3,r3,r2
 200bda8:	1800a51e 	bne	r3,zero,200c040 <__udivdi3+0x484>
 200bdac:	882ad43a 	srli	r21,r17,16
 200bdb0:	8461c83a 	sub	r16,r16,r17
 200bdb4:	8d3fffcc 	andi	r20,r17,65535
 200bdb8:	00c00044 	movi	r3,1
 200bdbc:	a80b883a 	mov	r5,r21
 200bdc0:	8009883a 	mov	r4,r16
 200bdc4:	d8c00115 	stw	r3,4(sp)
 200bdc8:	200c8d80 	call	200c8d8 <__umodsi3>
 200bdcc:	a80b883a 	mov	r5,r21
 200bdd0:	8009883a 	mov	r4,r16
 200bdd4:	1027883a 	mov	r19,r2
 200bdd8:	200c8740 	call	200c874 <__udivsi3>
 200bddc:	a00b883a 	mov	r5,r20
 200bde0:	1009883a 	mov	r4,r2
 200bde4:	102d883a 	mov	r22,r2
 200bde8:	200c9300 	call	200c930 <__mulsi3>
 200bdec:	9826943a 	slli	r19,r19,16
 200bdf0:	900ed43a 	srli	r7,r18,16
 200bdf4:	d8c00117 	ldw	r3,4(sp)
 200bdf8:	3cceb03a 	or	r7,r7,r19
 200bdfc:	3880052e 	bgeu	r7,r2,200be14 <__udivdi3+0x258>
 200be00:	3c4f883a 	add	r7,r7,r17
 200be04:	b13fffc4 	addi	r4,r22,-1
 200be08:	3c400136 	bltu	r7,r17,200be10 <__udivdi3+0x254>
 200be0c:	3880e436 	bltu	r7,r2,200c1a0 <__udivdi3+0x5e4>
 200be10:	202d883a 	mov	r22,r4
 200be14:	38a1c83a 	sub	r16,r7,r2
 200be18:	8009883a 	mov	r4,r16
 200be1c:	a80b883a 	mov	r5,r21
 200be20:	d8c00115 	stw	r3,4(sp)
 200be24:	200c8d80 	call	200c8d8 <__umodsi3>
 200be28:	1027883a 	mov	r19,r2
 200be2c:	8009883a 	mov	r4,r16
 200be30:	a80b883a 	mov	r5,r21
 200be34:	9826943a 	slli	r19,r19,16
 200be38:	200c8740 	call	200c874 <__udivsi3>
 200be3c:	a00b883a 	mov	r5,r20
 200be40:	1009883a 	mov	r4,r2
 200be44:	94bfffcc 	andi	r18,r18,65535
 200be48:	1021883a 	mov	r16,r2
 200be4c:	94e4b03a 	or	r18,r18,r19
 200be50:	200c9300 	call	200c930 <__mulsi3>
 200be54:	d8c00117 	ldw	r3,4(sp)
 200be58:	9080052e 	bgeu	r18,r2,200be70 <__udivdi3+0x2b4>
 200be5c:	8ca5883a 	add	r18,r17,r18
 200be60:	813fffc4 	addi	r4,r16,-1
 200be64:	9440ad36 	bltu	r18,r17,200c11c <__udivdi3+0x560>
 200be68:	9080ac2e 	bgeu	r18,r2,200c11c <__udivdi3+0x560>
 200be6c:	843fff84 	addi	r16,r16,-2
 200be70:	b004943a 	slli	r2,r22,16
 200be74:	1404b03a 	or	r2,r2,r16
 200be78:	00000206 	br	200be84 <__udivdi3+0x2c8>
 200be7c:	0007883a 	mov	r3,zero
 200be80:	0005883a 	mov	r2,zero
 200be84:	dfc00b17 	ldw	ra,44(sp)
 200be88:	df000a17 	ldw	fp,40(sp)
 200be8c:	ddc00917 	ldw	r23,36(sp)
 200be90:	dd800817 	ldw	r22,32(sp)
 200be94:	dd400717 	ldw	r21,28(sp)
 200be98:	dd000617 	ldw	r20,24(sp)
 200be9c:	dcc00517 	ldw	r19,20(sp)
 200bea0:	dc800417 	ldw	r18,16(sp)
 200bea4:	dc400317 	ldw	r17,12(sp)
 200bea8:	dc000217 	ldw	r16,8(sp)
 200beac:	dec00c04 	addi	sp,sp,48
 200beb0:	f800283a 	ret
 200beb4:	00803fc4 	movi	r2,255
 200beb8:	11c5803a 	cmpltu	r2,r2,r7
 200bebc:	100490fa 	slli	r2,r2,3
 200bec0:	003f9906 	br	200bd28 <__alt_data_end+0xff00bd28>
 200bec4:	00803fc4 	movi	r2,255
 200bec8:	1445803a 	cmpltu	r2,r2,r17
 200becc:	100490fa 	slli	r2,r2,3
 200bed0:	003fad06 	br	200bd88 <__alt_data_end+0xff00bd88>
 200bed4:	00804034 	movhi	r2,256
 200bed8:	10bfffc4 	addi	r2,r2,-1
 200bedc:	11809f36 	bltu	r2,r6,200c15c <__udivdi3+0x5a0>
 200bee0:	00800404 	movi	r2,16
 200bee4:	003f4c06 	br	200bc18 <__alt_data_end+0xff00bc18>
 200bee8:	3dce983a 	sll	r7,r7,r23
 200beec:	30b8d83a 	srl	fp,r6,r2
 200bef0:	80a2d83a 	srl	r17,r16,r2
 200bef4:	35cc983a 	sll	r6,r6,r23
 200bef8:	3f38b03a 	or	fp,r7,fp
 200befc:	e024d43a 	srli	r18,fp,16
 200bf00:	9884d83a 	srl	r2,r19,r2
 200bf04:	85e0983a 	sll	r16,r16,r23
 200bf08:	8809883a 	mov	r4,r17
 200bf0c:	900b883a 	mov	r5,r18
 200bf10:	d9800015 	stw	r6,0(sp)
 200bf14:	1420b03a 	or	r16,r2,r16
 200bf18:	200c8d80 	call	200c8d8 <__umodsi3>
 200bf1c:	900b883a 	mov	r5,r18
 200bf20:	8809883a 	mov	r4,r17
 200bf24:	1029883a 	mov	r20,r2
 200bf28:	e5bfffcc 	andi	r22,fp,65535
 200bf2c:	200c8740 	call	200c874 <__udivsi3>
 200bf30:	100b883a 	mov	r5,r2
 200bf34:	b009883a 	mov	r4,r22
 200bf38:	102b883a 	mov	r21,r2
 200bf3c:	200c9300 	call	200c930 <__mulsi3>
 200bf40:	a028943a 	slli	r20,r20,16
 200bf44:	8006d43a 	srli	r3,r16,16
 200bf48:	1d06b03a 	or	r3,r3,r20
 200bf4c:	1880042e 	bgeu	r3,r2,200bf60 <__udivdi3+0x3a4>
 200bf50:	1f07883a 	add	r3,r3,fp
 200bf54:	a93fffc4 	addi	r4,r21,-1
 200bf58:	1f00892e 	bgeu	r3,fp,200c180 <__udivdi3+0x5c4>
 200bf5c:	202b883a 	mov	r21,r4
 200bf60:	18a3c83a 	sub	r17,r3,r2
 200bf64:	8809883a 	mov	r4,r17
 200bf68:	900b883a 	mov	r5,r18
 200bf6c:	200c8d80 	call	200c8d8 <__umodsi3>
 200bf70:	1029883a 	mov	r20,r2
 200bf74:	8809883a 	mov	r4,r17
 200bf78:	900b883a 	mov	r5,r18
 200bf7c:	a028943a 	slli	r20,r20,16
 200bf80:	200c8740 	call	200c874 <__udivsi3>
 200bf84:	100b883a 	mov	r5,r2
 200bf88:	b009883a 	mov	r4,r22
 200bf8c:	843fffcc 	andi	r16,r16,65535
 200bf90:	1023883a 	mov	r17,r2
 200bf94:	8520b03a 	or	r16,r16,r20
 200bf98:	200c9300 	call	200c930 <__mulsi3>
 200bf9c:	8080042e 	bgeu	r16,r2,200bfb0 <__udivdi3+0x3f4>
 200bfa0:	8721883a 	add	r16,r16,fp
 200bfa4:	88ffffc4 	addi	r3,r17,-1
 200bfa8:	8700712e 	bgeu	r16,fp,200c170 <__udivdi3+0x5b4>
 200bfac:	1823883a 	mov	r17,r3
 200bfb0:	a80e943a 	slli	r7,r21,16
 200bfb4:	d8c00017 	ldw	r3,0(sp)
 200bfb8:	80a1c83a 	sub	r16,r16,r2
 200bfbc:	3c64b03a 	or	r18,r7,r17
 200bfc0:	1d3fffcc 	andi	r20,r3,65535
 200bfc4:	9022d43a 	srli	r17,r18,16
 200bfc8:	95bfffcc 	andi	r22,r18,65535
 200bfcc:	a00b883a 	mov	r5,r20
 200bfd0:	b009883a 	mov	r4,r22
 200bfd4:	182ad43a 	srli	r21,r3,16
 200bfd8:	200c9300 	call	200c930 <__mulsi3>
 200bfdc:	a00b883a 	mov	r5,r20
 200bfe0:	8809883a 	mov	r4,r17
 200bfe4:	1039883a 	mov	fp,r2
 200bfe8:	200c9300 	call	200c930 <__mulsi3>
 200bfec:	8809883a 	mov	r4,r17
 200bff0:	a80b883a 	mov	r5,r21
 200bff4:	1029883a 	mov	r20,r2
 200bff8:	200c9300 	call	200c930 <__mulsi3>
 200bffc:	a80b883a 	mov	r5,r21
 200c000:	b009883a 	mov	r4,r22
 200c004:	1023883a 	mov	r17,r2
 200c008:	200c9300 	call	200c930 <__mulsi3>
 200c00c:	e006d43a 	srli	r3,fp,16
 200c010:	1505883a 	add	r2,r2,r20
 200c014:	1887883a 	add	r3,r3,r2
 200c018:	1d00022e 	bgeu	r3,r20,200c024 <__udivdi3+0x468>
 200c01c:	00800074 	movhi	r2,1
 200c020:	88a3883a 	add	r17,r17,r2
 200c024:	1804d43a 	srli	r2,r3,16
 200c028:	1463883a 	add	r17,r2,r17
 200c02c:	84404436 	bltu	r16,r17,200c140 <__udivdi3+0x584>
 200c030:	84403e26 	beq	r16,r17,200c12c <__udivdi3+0x570>
 200c034:	9005883a 	mov	r2,r18
 200c038:	0007883a 	mov	r3,zero
 200c03c:	003f9106 	br	200be84 <__alt_data_end+0xff00be84>
 200c040:	88e2983a 	sll	r17,r17,r3
 200c044:	80aed83a 	srl	r23,r16,r2
 200c048:	80e0983a 	sll	r16,r16,r3
 200c04c:	882ad43a 	srli	r21,r17,16
 200c050:	9884d83a 	srl	r2,r19,r2
 200c054:	b809883a 	mov	r4,r23
 200c058:	a80b883a 	mov	r5,r21
 200c05c:	98e4983a 	sll	r18,r19,r3
 200c060:	142cb03a 	or	r22,r2,r16
 200c064:	200c8d80 	call	200c8d8 <__umodsi3>
 200c068:	b809883a 	mov	r4,r23
 200c06c:	a80b883a 	mov	r5,r21
 200c070:	1027883a 	mov	r19,r2
 200c074:	8d3fffcc 	andi	r20,r17,65535
 200c078:	200c8740 	call	200c874 <__udivsi3>
 200c07c:	a009883a 	mov	r4,r20
 200c080:	100b883a 	mov	r5,r2
 200c084:	102f883a 	mov	r23,r2
 200c088:	200c9300 	call	200c930 <__mulsi3>
 200c08c:	9826943a 	slli	r19,r19,16
 200c090:	b008d43a 	srli	r4,r22,16
 200c094:	24c8b03a 	or	r4,r4,r19
 200c098:	2080062e 	bgeu	r4,r2,200c0b4 <__udivdi3+0x4f8>
 200c09c:	2449883a 	add	r4,r4,r17
 200c0a0:	b8ffffc4 	addi	r3,r23,-1
 200c0a4:	24403c36 	bltu	r4,r17,200c198 <__udivdi3+0x5dc>
 200c0a8:	20803b2e 	bgeu	r4,r2,200c198 <__udivdi3+0x5dc>
 200c0ac:	bdffff84 	addi	r23,r23,-2
 200c0b0:	2449883a 	add	r4,r4,r17
 200c0b4:	20a1c83a 	sub	r16,r4,r2
 200c0b8:	a80b883a 	mov	r5,r21
 200c0bc:	8009883a 	mov	r4,r16
 200c0c0:	200c8d80 	call	200c8d8 <__umodsi3>
 200c0c4:	a80b883a 	mov	r5,r21
 200c0c8:	8009883a 	mov	r4,r16
 200c0cc:	1027883a 	mov	r19,r2
 200c0d0:	200c8740 	call	200c874 <__udivsi3>
 200c0d4:	a009883a 	mov	r4,r20
 200c0d8:	100b883a 	mov	r5,r2
 200c0dc:	9826943a 	slli	r19,r19,16
 200c0e0:	1039883a 	mov	fp,r2
 200c0e4:	200c9300 	call	200c930 <__mulsi3>
 200c0e8:	b13fffcc 	andi	r4,r22,65535
 200c0ec:	24c8b03a 	or	r4,r4,r19
 200c0f0:	2080062e 	bgeu	r4,r2,200c10c <__udivdi3+0x550>
 200c0f4:	2449883a 	add	r4,r4,r17
 200c0f8:	e0ffffc4 	addi	r3,fp,-1
 200c0fc:	24402436 	bltu	r4,r17,200c190 <__udivdi3+0x5d4>
 200c100:	2080232e 	bgeu	r4,r2,200c190 <__udivdi3+0x5d4>
 200c104:	e73fff84 	addi	fp,fp,-2
 200c108:	2449883a 	add	r4,r4,r17
 200c10c:	b82e943a 	slli	r23,r23,16
 200c110:	20a1c83a 	sub	r16,r4,r2
 200c114:	bf06b03a 	or	r3,r23,fp
 200c118:	003f2806 	br	200bdbc <__alt_data_end+0xff00bdbc>
 200c11c:	2021883a 	mov	r16,r4
 200c120:	003f5306 	br	200be70 <__alt_data_end+0xff00be70>
 200c124:	1821883a 	mov	r16,r3
 200c128:	003ef406 	br	200bcfc <__alt_data_end+0xff00bcfc>
 200c12c:	1806943a 	slli	r3,r3,16
 200c130:	9de6983a 	sll	r19,r19,r23
 200c134:	e73fffcc 	andi	fp,fp,65535
 200c138:	1f07883a 	add	r3,r3,fp
 200c13c:	98ffbd2e 	bgeu	r19,r3,200c034 <__alt_data_end+0xff00c034>
 200c140:	90bfffc4 	addi	r2,r18,-1
 200c144:	0007883a 	mov	r3,zero
 200c148:	003f4e06 	br	200be84 <__alt_data_end+0xff00be84>
 200c14c:	00800604 	movi	r2,24
 200c150:	003ef506 	br	200bd28 <__alt_data_end+0xff00bd28>
 200c154:	00800604 	movi	r2,24
 200c158:	003f0b06 	br	200bd88 <__alt_data_end+0xff00bd88>
 200c15c:	00800604 	movi	r2,24
 200c160:	003ead06 	br	200bc18 <__alt_data_end+0xff00bc18>
 200c164:	0007883a 	mov	r3,zero
 200c168:	00800044 	movi	r2,1
 200c16c:	003f4506 	br	200be84 <__alt_data_end+0xff00be84>
 200c170:	80bf8e2e 	bgeu	r16,r2,200bfac <__alt_data_end+0xff00bfac>
 200c174:	8c7fff84 	addi	r17,r17,-2
 200c178:	8721883a 	add	r16,r16,fp
 200c17c:	003f8c06 	br	200bfb0 <__alt_data_end+0xff00bfb0>
 200c180:	18bf762e 	bgeu	r3,r2,200bf5c <__alt_data_end+0xff00bf5c>
 200c184:	ad7fff84 	addi	r21,r21,-2
 200c188:	1f07883a 	add	r3,r3,fp
 200c18c:	003f7406 	br	200bf60 <__alt_data_end+0xff00bf60>
 200c190:	1839883a 	mov	fp,r3
 200c194:	003fdd06 	br	200c10c <__alt_data_end+0xff00c10c>
 200c198:	182f883a 	mov	r23,r3
 200c19c:	003fc506 	br	200c0b4 <__alt_data_end+0xff00c0b4>
 200c1a0:	b5bfff84 	addi	r22,r22,-2
 200c1a4:	3c4f883a 	add	r7,r7,r17
 200c1a8:	003f1a06 	br	200be14 <__alt_data_end+0xff00be14>
 200c1ac:	b5bfff84 	addi	r22,r22,-2
 200c1b0:	1c47883a 	add	r3,r3,r17
 200c1b4:	003ebc06 	br	200bca8 <__alt_data_end+0xff00bca8>

0200c1b8 <__umoddi3>:
 200c1b8:	defff304 	addi	sp,sp,-52
 200c1bc:	df000b15 	stw	fp,44(sp)
 200c1c0:	dc400415 	stw	r17,16(sp)
 200c1c4:	dc000315 	stw	r16,12(sp)
 200c1c8:	dfc00c15 	stw	ra,48(sp)
 200c1cc:	ddc00a15 	stw	r23,40(sp)
 200c1d0:	dd800915 	stw	r22,36(sp)
 200c1d4:	dd400815 	stw	r21,32(sp)
 200c1d8:	dd000715 	stw	r20,28(sp)
 200c1dc:	dcc00615 	stw	r19,24(sp)
 200c1e0:	dc800515 	stw	r18,20(sp)
 200c1e4:	2021883a 	mov	r16,r4
 200c1e8:	2823883a 	mov	r17,r5
 200c1ec:	2839883a 	mov	fp,r5
 200c1f0:	3800401e 	bne	r7,zero,200c2f4 <__umoddi3+0x13c>
 200c1f4:	3027883a 	mov	r19,r6
 200c1f8:	2029883a 	mov	r20,r4
 200c1fc:	2980552e 	bgeu	r5,r6,200c354 <__umoddi3+0x19c>
 200c200:	00bfffd4 	movui	r2,65535
 200c204:	1180a236 	bltu	r2,r6,200c490 <__umoddi3+0x2d8>
 200c208:	01003fc4 	movi	r4,255
 200c20c:	2189803a 	cmpltu	r4,r4,r6
 200c210:	200890fa 	slli	r4,r4,3
 200c214:	3104d83a 	srl	r2,r6,r4
 200c218:	00c08074 	movhi	r3,513
 200c21c:	18c8d904 	addi	r3,r3,9060
 200c220:	1885883a 	add	r2,r3,r2
 200c224:	10c00003 	ldbu	r3,0(r2)
 200c228:	00800804 	movi	r2,32
 200c22c:	1909883a 	add	r4,r3,r4
 200c230:	1125c83a 	sub	r18,r2,r4
 200c234:	90000526 	beq	r18,zero,200c24c <__umoddi3+0x94>
 200c238:	8ca2983a 	sll	r17,r17,r18
 200c23c:	8108d83a 	srl	r4,r16,r4
 200c240:	34a6983a 	sll	r19,r6,r18
 200c244:	84a8983a 	sll	r20,r16,r18
 200c248:	2478b03a 	or	fp,r4,r17
 200c24c:	982cd43a 	srli	r22,r19,16
 200c250:	e009883a 	mov	r4,fp
 200c254:	9dffffcc 	andi	r23,r19,65535
 200c258:	b00b883a 	mov	r5,r22
 200c25c:	200c8d80 	call	200c8d8 <__umodsi3>
 200c260:	b00b883a 	mov	r5,r22
 200c264:	e009883a 	mov	r4,fp
 200c268:	102b883a 	mov	r21,r2
 200c26c:	200c8740 	call	200c874 <__udivsi3>
 200c270:	100b883a 	mov	r5,r2
 200c274:	b809883a 	mov	r4,r23
 200c278:	200c9300 	call	200c930 <__mulsi3>
 200c27c:	a82a943a 	slli	r21,r21,16
 200c280:	a006d43a 	srli	r3,r20,16
 200c284:	1d46b03a 	or	r3,r3,r21
 200c288:	1880032e 	bgeu	r3,r2,200c298 <__umoddi3+0xe0>
 200c28c:	1cc7883a 	add	r3,r3,r19
 200c290:	1cc00136 	bltu	r3,r19,200c298 <__umoddi3+0xe0>
 200c294:	18813136 	bltu	r3,r2,200c75c <__umoddi3+0x5a4>
 200c298:	18a1c83a 	sub	r16,r3,r2
 200c29c:	b00b883a 	mov	r5,r22
 200c2a0:	8009883a 	mov	r4,r16
 200c2a4:	200c8d80 	call	200c8d8 <__umodsi3>
 200c2a8:	b00b883a 	mov	r5,r22
 200c2ac:	8009883a 	mov	r4,r16
 200c2b0:	1023883a 	mov	r17,r2
 200c2b4:	200c8740 	call	200c874 <__udivsi3>
 200c2b8:	100b883a 	mov	r5,r2
 200c2bc:	b809883a 	mov	r4,r23
 200c2c0:	8822943a 	slli	r17,r17,16
 200c2c4:	200c9300 	call	200c930 <__mulsi3>
 200c2c8:	a0ffffcc 	andi	r3,r20,65535
 200c2cc:	1c46b03a 	or	r3,r3,r17
 200c2d0:	1880042e 	bgeu	r3,r2,200c2e4 <__umoddi3+0x12c>
 200c2d4:	1cc7883a 	add	r3,r3,r19
 200c2d8:	1cc00236 	bltu	r3,r19,200c2e4 <__umoddi3+0x12c>
 200c2dc:	1880012e 	bgeu	r3,r2,200c2e4 <__umoddi3+0x12c>
 200c2e0:	1cc7883a 	add	r3,r3,r19
 200c2e4:	1885c83a 	sub	r2,r3,r2
 200c2e8:	1484d83a 	srl	r2,r2,r18
 200c2ec:	0007883a 	mov	r3,zero
 200c2f0:	00005306 	br	200c440 <__umoddi3+0x288>
 200c2f4:	29c05036 	bltu	r5,r7,200c438 <__umoddi3+0x280>
 200c2f8:	00bfffd4 	movui	r2,65535
 200c2fc:	11c05c2e 	bgeu	r2,r7,200c470 <__umoddi3+0x2b8>
 200c300:	00804034 	movhi	r2,256
 200c304:	10bfffc4 	addi	r2,r2,-1
 200c308:	11c10636 	bltu	r2,r7,200c724 <__umoddi3+0x56c>
 200c30c:	01000404 	movi	r4,16
 200c310:	3904d83a 	srl	r2,r7,r4
 200c314:	00c08074 	movhi	r3,513
 200c318:	18c8d904 	addi	r3,r3,9060
 200c31c:	1885883a 	add	r2,r3,r2
 200c320:	14c00003 	ldbu	r19,0(r2)
 200c324:	00c00804 	movi	r3,32
 200c328:	9927883a 	add	r19,r19,r4
 200c32c:	1ce9c83a 	sub	r20,r3,r19
 200c330:	a0005c1e 	bne	r20,zero,200c4a4 <__umoddi3+0x2ec>
 200c334:	3c400136 	bltu	r7,r17,200c33c <__umoddi3+0x184>
 200c338:	81810a36 	bltu	r16,r6,200c764 <__umoddi3+0x5ac>
 200c33c:	8185c83a 	sub	r2,r16,r6
 200c340:	89e3c83a 	sub	r17,r17,r7
 200c344:	8089803a 	cmpltu	r4,r16,r2
 200c348:	8939c83a 	sub	fp,r17,r4
 200c34c:	e007883a 	mov	r3,fp
 200c350:	00003b06 	br	200c440 <__umoddi3+0x288>
 200c354:	3000041e 	bne	r6,zero,200c368 <__umoddi3+0x1b0>
 200c358:	000b883a 	mov	r5,zero
 200c35c:	01000044 	movi	r4,1
 200c360:	200c8740 	call	200c874 <__udivsi3>
 200c364:	1027883a 	mov	r19,r2
 200c368:	00bfffd4 	movui	r2,65535
 200c36c:	14c0442e 	bgeu	r2,r19,200c480 <__umoddi3+0x2c8>
 200c370:	00804034 	movhi	r2,256
 200c374:	10bfffc4 	addi	r2,r2,-1
 200c378:	14c0ec36 	bltu	r2,r19,200c72c <__umoddi3+0x574>
 200c37c:	00800404 	movi	r2,16
 200c380:	9886d83a 	srl	r3,r19,r2
 200c384:	01008074 	movhi	r4,513
 200c388:	2108d904 	addi	r4,r4,9060
 200c38c:	20c7883a 	add	r3,r4,r3
 200c390:	18c00003 	ldbu	r3,0(r3)
 200c394:	1887883a 	add	r3,r3,r2
 200c398:	00800804 	movi	r2,32
 200c39c:	10e5c83a 	sub	r18,r2,r3
 200c3a0:	9000ab1e 	bne	r18,zero,200c650 <__umoddi3+0x498>
 200c3a4:	982cd43a 	srli	r22,r19,16
 200c3a8:	8ce3c83a 	sub	r17,r17,r19
 200c3ac:	9dffffcc 	andi	r23,r19,65535
 200c3b0:	b00b883a 	mov	r5,r22
 200c3b4:	8809883a 	mov	r4,r17
 200c3b8:	200c8d80 	call	200c8d8 <__umodsi3>
 200c3bc:	b00b883a 	mov	r5,r22
 200c3c0:	8809883a 	mov	r4,r17
 200c3c4:	102b883a 	mov	r21,r2
 200c3c8:	200c8740 	call	200c874 <__udivsi3>
 200c3cc:	b80b883a 	mov	r5,r23
 200c3d0:	1009883a 	mov	r4,r2
 200c3d4:	200c9300 	call	200c930 <__mulsi3>
 200c3d8:	a82a943a 	slli	r21,r21,16
 200c3dc:	a006d43a 	srli	r3,r20,16
 200c3e0:	1d46b03a 	or	r3,r3,r21
 200c3e4:	1880042e 	bgeu	r3,r2,200c3f8 <__umoddi3+0x240>
 200c3e8:	1cc7883a 	add	r3,r3,r19
 200c3ec:	1cc00236 	bltu	r3,r19,200c3f8 <__umoddi3+0x240>
 200c3f0:	1880012e 	bgeu	r3,r2,200c3f8 <__umoddi3+0x240>
 200c3f4:	1cc7883a 	add	r3,r3,r19
 200c3f8:	18a1c83a 	sub	r16,r3,r2
 200c3fc:	b00b883a 	mov	r5,r22
 200c400:	8009883a 	mov	r4,r16
 200c404:	200c8d80 	call	200c8d8 <__umodsi3>
 200c408:	1023883a 	mov	r17,r2
 200c40c:	b00b883a 	mov	r5,r22
 200c410:	8009883a 	mov	r4,r16
 200c414:	200c8740 	call	200c874 <__udivsi3>
 200c418:	8822943a 	slli	r17,r17,16
 200c41c:	b80b883a 	mov	r5,r23
 200c420:	1009883a 	mov	r4,r2
 200c424:	200c9300 	call	200c930 <__mulsi3>
 200c428:	a53fffcc 	andi	r20,r20,65535
 200c42c:	a446b03a 	or	r3,r20,r17
 200c430:	18bfac2e 	bgeu	r3,r2,200c2e4 <__alt_data_end+0xff00c2e4>
 200c434:	003fa706 	br	200c2d4 <__alt_data_end+0xff00c2d4>
 200c438:	2005883a 	mov	r2,r4
 200c43c:	2807883a 	mov	r3,r5
 200c440:	dfc00c17 	ldw	ra,48(sp)
 200c444:	df000b17 	ldw	fp,44(sp)
 200c448:	ddc00a17 	ldw	r23,40(sp)
 200c44c:	dd800917 	ldw	r22,36(sp)
 200c450:	dd400817 	ldw	r21,32(sp)
 200c454:	dd000717 	ldw	r20,28(sp)
 200c458:	dcc00617 	ldw	r19,24(sp)
 200c45c:	dc800517 	ldw	r18,20(sp)
 200c460:	dc400417 	ldw	r17,16(sp)
 200c464:	dc000317 	ldw	r16,12(sp)
 200c468:	dec00d04 	addi	sp,sp,52
 200c46c:	f800283a 	ret
 200c470:	04c03fc4 	movi	r19,255
 200c474:	99c9803a 	cmpltu	r4,r19,r7
 200c478:	200890fa 	slli	r4,r4,3
 200c47c:	003fa406 	br	200c310 <__alt_data_end+0xff00c310>
 200c480:	00803fc4 	movi	r2,255
 200c484:	14c5803a 	cmpltu	r2,r2,r19
 200c488:	100490fa 	slli	r2,r2,3
 200c48c:	003fbc06 	br	200c380 <__alt_data_end+0xff00c380>
 200c490:	00804034 	movhi	r2,256
 200c494:	10bfffc4 	addi	r2,r2,-1
 200c498:	1180a636 	bltu	r2,r6,200c734 <__umoddi3+0x57c>
 200c49c:	01000404 	movi	r4,16
 200c4a0:	003f5c06 	br	200c214 <__alt_data_end+0xff00c214>
 200c4a4:	3d0e983a 	sll	r7,r7,r20
 200c4a8:	34ead83a 	srl	r21,r6,r19
 200c4ac:	8cc6d83a 	srl	r3,r17,r19
 200c4b0:	8d10983a 	sll	r8,r17,r20
 200c4b4:	3d6ab03a 	or	r21,r7,r21
 200c4b8:	a82cd43a 	srli	r22,r21,16
 200c4bc:	84e2d83a 	srl	r17,r16,r19
 200c4c0:	1809883a 	mov	r4,r3
 200c4c4:	b00b883a 	mov	r5,r22
 200c4c8:	8a22b03a 	or	r17,r17,r8
 200c4cc:	3524983a 	sll	r18,r6,r20
 200c4d0:	dc400015 	stw	r17,0(sp)
 200c4d4:	d8c00115 	stw	r3,4(sp)
 200c4d8:	200c8d80 	call	200c8d8 <__umodsi3>
 200c4dc:	d8c00117 	ldw	r3,4(sp)
 200c4e0:	b00b883a 	mov	r5,r22
 200c4e4:	1039883a 	mov	fp,r2
 200c4e8:	1809883a 	mov	r4,r3
 200c4ec:	200c8740 	call	200c874 <__udivsi3>
 200c4f0:	adffffcc 	andi	r23,r21,65535
 200c4f4:	100b883a 	mov	r5,r2
 200c4f8:	b809883a 	mov	r4,r23
 200c4fc:	1023883a 	mov	r17,r2
 200c500:	200c9300 	call	200c930 <__mulsi3>
 200c504:	d9400017 	ldw	r5,0(sp)
 200c508:	e008943a 	slli	r4,fp,16
 200c50c:	8520983a 	sll	r16,r16,r20
 200c510:	2806d43a 	srli	r3,r5,16
 200c514:	1906b03a 	or	r3,r3,r4
 200c518:	1880042e 	bgeu	r3,r2,200c52c <__umoddi3+0x374>
 200c51c:	1d47883a 	add	r3,r3,r21
 200c520:	893fffc4 	addi	r4,r17,-1
 200c524:	1d40892e 	bgeu	r3,r21,200c74c <__umoddi3+0x594>
 200c528:	2023883a 	mov	r17,r4
 200c52c:	18b9c83a 	sub	fp,r3,r2
 200c530:	b00b883a 	mov	r5,r22
 200c534:	e009883a 	mov	r4,fp
 200c538:	200c8d80 	call	200c8d8 <__umodsi3>
 200c53c:	b00b883a 	mov	r5,r22
 200c540:	e009883a 	mov	r4,fp
 200c544:	d8800215 	stw	r2,8(sp)
 200c548:	200c8740 	call	200c874 <__udivsi3>
 200c54c:	100b883a 	mov	r5,r2
 200c550:	b809883a 	mov	r4,r23
 200c554:	102d883a 	mov	r22,r2
 200c558:	200c9300 	call	200c930 <__mulsi3>
 200c55c:	d9800217 	ldw	r6,8(sp)
 200c560:	d8c00017 	ldw	r3,0(sp)
 200c564:	300c943a 	slli	r6,r6,16
 200c568:	1a3fffcc 	andi	r8,r3,65535
 200c56c:	4190b03a 	or	r8,r8,r6
 200c570:	4080042e 	bgeu	r8,r2,200c584 <__umoddi3+0x3cc>
 200c574:	4551883a 	add	r8,r8,r21
 200c578:	b0ffffc4 	addi	r3,r22,-1
 200c57c:	45406f2e 	bgeu	r8,r21,200c73c <__umoddi3+0x584>
 200c580:	182d883a 	mov	r22,r3
 200c584:	880e943a 	slli	r7,r17,16
 200c588:	9006d43a 	srli	r3,r18,16
 200c58c:	91bfffcc 	andi	r6,r18,65535
 200c590:	3dacb03a 	or	r22,r7,r22
 200c594:	b02ed43a 	srli	r23,r22,16
 200c598:	b5bfffcc 	andi	r22,r22,65535
 200c59c:	300b883a 	mov	r5,r6
 200c5a0:	b009883a 	mov	r4,r22
 200c5a4:	40a3c83a 	sub	r17,r8,r2
 200c5a8:	d8c00115 	stw	r3,4(sp)
 200c5ac:	d9800215 	stw	r6,8(sp)
 200c5b0:	200c9300 	call	200c930 <__mulsi3>
 200c5b4:	d9800217 	ldw	r6,8(sp)
 200c5b8:	b809883a 	mov	r4,r23
 200c5bc:	1039883a 	mov	fp,r2
 200c5c0:	300b883a 	mov	r5,r6
 200c5c4:	200c9300 	call	200c930 <__mulsi3>
 200c5c8:	d8c00117 	ldw	r3,4(sp)
 200c5cc:	b809883a 	mov	r4,r23
 200c5d0:	d8800215 	stw	r2,8(sp)
 200c5d4:	180b883a 	mov	r5,r3
 200c5d8:	200c9300 	call	200c930 <__mulsi3>
 200c5dc:	d8c00117 	ldw	r3,4(sp)
 200c5e0:	b009883a 	mov	r4,r22
 200c5e4:	102f883a 	mov	r23,r2
 200c5e8:	180b883a 	mov	r5,r3
 200c5ec:	200c9300 	call	200c930 <__mulsi3>
 200c5f0:	d9800217 	ldw	r6,8(sp)
 200c5f4:	e006d43a 	srli	r3,fp,16
 200c5f8:	1185883a 	add	r2,r2,r6
 200c5fc:	1885883a 	add	r2,r3,r2
 200c600:	1180022e 	bgeu	r2,r6,200c60c <__umoddi3+0x454>
 200c604:	00c00074 	movhi	r3,1
 200c608:	b8ef883a 	add	r23,r23,r3
 200c60c:	1006d43a 	srli	r3,r2,16
 200c610:	1004943a 	slli	r2,r2,16
 200c614:	e73fffcc 	andi	fp,fp,65535
 200c618:	1dc7883a 	add	r3,r3,r23
 200c61c:	1739883a 	add	fp,r2,fp
 200c620:	88c03a36 	bltu	r17,r3,200c70c <__umoddi3+0x554>
 200c624:	88c05126 	beq	r17,r3,200c76c <__umoddi3+0x5b4>
 200c628:	88c9c83a 	sub	r4,r17,r3
 200c62c:	e00f883a 	mov	r7,fp
 200c630:	81cfc83a 	sub	r7,r16,r7
 200c634:	81c7803a 	cmpltu	r3,r16,r7
 200c638:	20c7c83a 	sub	r3,r4,r3
 200c63c:	1cc4983a 	sll	r2,r3,r19
 200c640:	3d0ed83a 	srl	r7,r7,r20
 200c644:	1d06d83a 	srl	r3,r3,r20
 200c648:	11c4b03a 	or	r2,r2,r7
 200c64c:	003f7c06 	br	200c440 <__alt_data_end+0xff00c440>
 200c650:	9ca6983a 	sll	r19,r19,r18
 200c654:	88f8d83a 	srl	fp,r17,r3
 200c658:	80c4d83a 	srl	r2,r16,r3
 200c65c:	982cd43a 	srli	r22,r19,16
 200c660:	8ca2983a 	sll	r17,r17,r18
 200c664:	e009883a 	mov	r4,fp
 200c668:	b00b883a 	mov	r5,r22
 200c66c:	146ab03a 	or	r21,r2,r17
 200c670:	200c8d80 	call	200c8d8 <__umodsi3>
 200c674:	b00b883a 	mov	r5,r22
 200c678:	e009883a 	mov	r4,fp
 200c67c:	1029883a 	mov	r20,r2
 200c680:	9dffffcc 	andi	r23,r19,65535
 200c684:	200c8740 	call	200c874 <__udivsi3>
 200c688:	b809883a 	mov	r4,r23
 200c68c:	100b883a 	mov	r5,r2
 200c690:	200c9300 	call	200c930 <__mulsi3>
 200c694:	a008943a 	slli	r4,r20,16
 200c698:	a806d43a 	srli	r3,r21,16
 200c69c:	84a8983a 	sll	r20,r16,r18
 200c6a0:	1906b03a 	or	r3,r3,r4
 200c6a4:	1880042e 	bgeu	r3,r2,200c6b8 <__umoddi3+0x500>
 200c6a8:	1cc7883a 	add	r3,r3,r19
 200c6ac:	1cc00236 	bltu	r3,r19,200c6b8 <__umoddi3+0x500>
 200c6b0:	1880012e 	bgeu	r3,r2,200c6b8 <__umoddi3+0x500>
 200c6b4:	1cc7883a 	add	r3,r3,r19
 200c6b8:	18a3c83a 	sub	r17,r3,r2
 200c6bc:	b00b883a 	mov	r5,r22
 200c6c0:	8809883a 	mov	r4,r17
 200c6c4:	200c8d80 	call	200c8d8 <__umodsi3>
 200c6c8:	b00b883a 	mov	r5,r22
 200c6cc:	8809883a 	mov	r4,r17
 200c6d0:	1021883a 	mov	r16,r2
 200c6d4:	200c8740 	call	200c874 <__udivsi3>
 200c6d8:	100b883a 	mov	r5,r2
 200c6dc:	b809883a 	mov	r4,r23
 200c6e0:	8020943a 	slli	r16,r16,16
 200c6e4:	200c9300 	call	200c930 <__mulsi3>
 200c6e8:	a8ffffcc 	andi	r3,r21,65535
 200c6ec:	1c06b03a 	or	r3,r3,r16
 200c6f0:	1880042e 	bgeu	r3,r2,200c704 <__umoddi3+0x54c>
 200c6f4:	1cc7883a 	add	r3,r3,r19
 200c6f8:	1cc00236 	bltu	r3,r19,200c704 <__umoddi3+0x54c>
 200c6fc:	1880012e 	bgeu	r3,r2,200c704 <__umoddi3+0x54c>
 200c700:	1cc7883a 	add	r3,r3,r19
 200c704:	18a3c83a 	sub	r17,r3,r2
 200c708:	003f2906 	br	200c3b0 <__alt_data_end+0xff00c3b0>
 200c70c:	e48fc83a 	sub	r7,fp,r18
 200c710:	1d49c83a 	sub	r4,r3,r21
 200c714:	e1f9803a 	cmpltu	fp,fp,r7
 200c718:	2739c83a 	sub	fp,r4,fp
 200c71c:	8f09c83a 	sub	r4,r17,fp
 200c720:	003fc306 	br	200c630 <__alt_data_end+0xff00c630>
 200c724:	01000604 	movi	r4,24
 200c728:	003ef906 	br	200c310 <__alt_data_end+0xff00c310>
 200c72c:	00800604 	movi	r2,24
 200c730:	003f1306 	br	200c380 <__alt_data_end+0xff00c380>
 200c734:	01000604 	movi	r4,24
 200c738:	003eb606 	br	200c214 <__alt_data_end+0xff00c214>
 200c73c:	40bf902e 	bgeu	r8,r2,200c580 <__alt_data_end+0xff00c580>
 200c740:	b5bfff84 	addi	r22,r22,-2
 200c744:	4551883a 	add	r8,r8,r21
 200c748:	003f8e06 	br	200c584 <__alt_data_end+0xff00c584>
 200c74c:	18bf762e 	bgeu	r3,r2,200c528 <__alt_data_end+0xff00c528>
 200c750:	8c7fff84 	addi	r17,r17,-2
 200c754:	1d47883a 	add	r3,r3,r21
 200c758:	003f7406 	br	200c52c <__alt_data_end+0xff00c52c>
 200c75c:	1cc7883a 	add	r3,r3,r19
 200c760:	003ecd06 	br	200c298 <__alt_data_end+0xff00c298>
 200c764:	8005883a 	mov	r2,r16
 200c768:	003ef806 	br	200c34c <__alt_data_end+0xff00c34c>
 200c76c:	873fe736 	bltu	r16,fp,200c70c <__alt_data_end+0xff00c70c>
 200c770:	e00f883a 	mov	r7,fp
 200c774:	0009883a 	mov	r4,zero
 200c778:	003fad06 	br	200c630 <__alt_data_end+0xff00c630>

0200c77c <__divsi3>:
 200c77c:	20001b16 	blt	r4,zero,200c7ec <__divsi3+0x70>
 200c780:	000f883a 	mov	r7,zero
 200c784:	28001616 	blt	r5,zero,200c7e0 <__divsi3+0x64>
 200c788:	200d883a 	mov	r6,r4
 200c78c:	29001a2e 	bgeu	r5,r4,200c7f8 <__divsi3+0x7c>
 200c790:	00800804 	movi	r2,32
 200c794:	00c00044 	movi	r3,1
 200c798:	00000106 	br	200c7a0 <__divsi3+0x24>
 200c79c:	10000d26 	beq	r2,zero,200c7d4 <__divsi3+0x58>
 200c7a0:	294b883a 	add	r5,r5,r5
 200c7a4:	10bfffc4 	addi	r2,r2,-1
 200c7a8:	18c7883a 	add	r3,r3,r3
 200c7ac:	293ffb36 	bltu	r5,r4,200c79c <__alt_data_end+0xff00c79c>
 200c7b0:	0005883a 	mov	r2,zero
 200c7b4:	18000726 	beq	r3,zero,200c7d4 <__divsi3+0x58>
 200c7b8:	0005883a 	mov	r2,zero
 200c7bc:	31400236 	bltu	r6,r5,200c7c8 <__divsi3+0x4c>
 200c7c0:	314dc83a 	sub	r6,r6,r5
 200c7c4:	10c4b03a 	or	r2,r2,r3
 200c7c8:	1806d07a 	srli	r3,r3,1
 200c7cc:	280ad07a 	srli	r5,r5,1
 200c7d0:	183ffa1e 	bne	r3,zero,200c7bc <__alt_data_end+0xff00c7bc>
 200c7d4:	38000126 	beq	r7,zero,200c7dc <__divsi3+0x60>
 200c7d8:	0085c83a 	sub	r2,zero,r2
 200c7dc:	f800283a 	ret
 200c7e0:	014bc83a 	sub	r5,zero,r5
 200c7e4:	39c0005c 	xori	r7,r7,1
 200c7e8:	003fe706 	br	200c788 <__alt_data_end+0xff00c788>
 200c7ec:	0109c83a 	sub	r4,zero,r4
 200c7f0:	01c00044 	movi	r7,1
 200c7f4:	003fe306 	br	200c784 <__alt_data_end+0xff00c784>
 200c7f8:	00c00044 	movi	r3,1
 200c7fc:	003fee06 	br	200c7b8 <__alt_data_end+0xff00c7b8>

0200c800 <__modsi3>:
 200c800:	20001716 	blt	r4,zero,200c860 <__modsi3+0x60>
 200c804:	000f883a 	mov	r7,zero
 200c808:	2005883a 	mov	r2,r4
 200c80c:	28001216 	blt	r5,zero,200c858 <__modsi3+0x58>
 200c810:	2900162e 	bgeu	r5,r4,200c86c <__modsi3+0x6c>
 200c814:	01800804 	movi	r6,32
 200c818:	00c00044 	movi	r3,1
 200c81c:	00000106 	br	200c824 <__modsi3+0x24>
 200c820:	30000a26 	beq	r6,zero,200c84c <__modsi3+0x4c>
 200c824:	294b883a 	add	r5,r5,r5
 200c828:	31bfffc4 	addi	r6,r6,-1
 200c82c:	18c7883a 	add	r3,r3,r3
 200c830:	293ffb36 	bltu	r5,r4,200c820 <__alt_data_end+0xff00c820>
 200c834:	18000526 	beq	r3,zero,200c84c <__modsi3+0x4c>
 200c838:	1806d07a 	srli	r3,r3,1
 200c83c:	11400136 	bltu	r2,r5,200c844 <__modsi3+0x44>
 200c840:	1145c83a 	sub	r2,r2,r5
 200c844:	280ad07a 	srli	r5,r5,1
 200c848:	183ffb1e 	bne	r3,zero,200c838 <__alt_data_end+0xff00c838>
 200c84c:	38000126 	beq	r7,zero,200c854 <__modsi3+0x54>
 200c850:	0085c83a 	sub	r2,zero,r2
 200c854:	f800283a 	ret
 200c858:	014bc83a 	sub	r5,zero,r5
 200c85c:	003fec06 	br	200c810 <__alt_data_end+0xff00c810>
 200c860:	0109c83a 	sub	r4,zero,r4
 200c864:	01c00044 	movi	r7,1
 200c868:	003fe706 	br	200c808 <__alt_data_end+0xff00c808>
 200c86c:	00c00044 	movi	r3,1
 200c870:	003ff106 	br	200c838 <__alt_data_end+0xff00c838>

0200c874 <__udivsi3>:
 200c874:	200d883a 	mov	r6,r4
 200c878:	2900152e 	bgeu	r5,r4,200c8d0 <__udivsi3+0x5c>
 200c87c:	28001416 	blt	r5,zero,200c8d0 <__udivsi3+0x5c>
 200c880:	00800804 	movi	r2,32
 200c884:	00c00044 	movi	r3,1
 200c888:	00000206 	br	200c894 <__udivsi3+0x20>
 200c88c:	10000e26 	beq	r2,zero,200c8c8 <__udivsi3+0x54>
 200c890:	28000516 	blt	r5,zero,200c8a8 <__udivsi3+0x34>
 200c894:	294b883a 	add	r5,r5,r5
 200c898:	10bfffc4 	addi	r2,r2,-1
 200c89c:	18c7883a 	add	r3,r3,r3
 200c8a0:	293ffa36 	bltu	r5,r4,200c88c <__alt_data_end+0xff00c88c>
 200c8a4:	18000826 	beq	r3,zero,200c8c8 <__udivsi3+0x54>
 200c8a8:	0005883a 	mov	r2,zero
 200c8ac:	31400236 	bltu	r6,r5,200c8b8 <__udivsi3+0x44>
 200c8b0:	314dc83a 	sub	r6,r6,r5
 200c8b4:	10c4b03a 	or	r2,r2,r3
 200c8b8:	1806d07a 	srli	r3,r3,1
 200c8bc:	280ad07a 	srli	r5,r5,1
 200c8c0:	183ffa1e 	bne	r3,zero,200c8ac <__alt_data_end+0xff00c8ac>
 200c8c4:	f800283a 	ret
 200c8c8:	0005883a 	mov	r2,zero
 200c8cc:	f800283a 	ret
 200c8d0:	00c00044 	movi	r3,1
 200c8d4:	003ff406 	br	200c8a8 <__alt_data_end+0xff00c8a8>

0200c8d8 <__umodsi3>:
 200c8d8:	2005883a 	mov	r2,r4
 200c8dc:	2900122e 	bgeu	r5,r4,200c928 <__umodsi3+0x50>
 200c8e0:	28001116 	blt	r5,zero,200c928 <__umodsi3+0x50>
 200c8e4:	01800804 	movi	r6,32
 200c8e8:	00c00044 	movi	r3,1
 200c8ec:	00000206 	br	200c8f8 <__umodsi3+0x20>
 200c8f0:	30000c26 	beq	r6,zero,200c924 <__umodsi3+0x4c>
 200c8f4:	28000516 	blt	r5,zero,200c90c <__umodsi3+0x34>
 200c8f8:	294b883a 	add	r5,r5,r5
 200c8fc:	31bfffc4 	addi	r6,r6,-1
 200c900:	18c7883a 	add	r3,r3,r3
 200c904:	293ffa36 	bltu	r5,r4,200c8f0 <__alt_data_end+0xff00c8f0>
 200c908:	18000626 	beq	r3,zero,200c924 <__umodsi3+0x4c>
 200c90c:	1806d07a 	srli	r3,r3,1
 200c910:	11400136 	bltu	r2,r5,200c918 <__umodsi3+0x40>
 200c914:	1145c83a 	sub	r2,r2,r5
 200c918:	280ad07a 	srli	r5,r5,1
 200c91c:	183ffb1e 	bne	r3,zero,200c90c <__alt_data_end+0xff00c90c>
 200c920:	f800283a 	ret
 200c924:	f800283a 	ret
 200c928:	00c00044 	movi	r3,1
 200c92c:	003ff706 	br	200c90c <__alt_data_end+0xff00c90c>

0200c930 <__mulsi3>:
 200c930:	0005883a 	mov	r2,zero
 200c934:	20000726 	beq	r4,zero,200c954 <__mulsi3+0x24>
 200c938:	20c0004c 	andi	r3,r4,1
 200c93c:	2008d07a 	srli	r4,r4,1
 200c940:	18000126 	beq	r3,zero,200c948 <__mulsi3+0x18>
 200c944:	1145883a 	add	r2,r2,r5
 200c948:	294b883a 	add	r5,r5,r5
 200c94c:	203ffa1e 	bne	r4,zero,200c938 <__alt_data_end+0xff00c938>
 200c950:	f800283a 	ret
 200c954:	f800283a 	ret

0200c958 <__adddf3>:
 200c958:	02c00434 	movhi	r11,16
 200c95c:	5affffc4 	addi	r11,r11,-1
 200c960:	2806d7fa 	srli	r3,r5,31
 200c964:	2ad4703a 	and	r10,r5,r11
 200c968:	3ad2703a 	and	r9,r7,r11
 200c96c:	3804d53a 	srli	r2,r7,20
 200c970:	3018d77a 	srli	r12,r6,29
 200c974:	280ad53a 	srli	r5,r5,20
 200c978:	501490fa 	slli	r10,r10,3
 200c97c:	2010d77a 	srli	r8,r4,29
 200c980:	481290fa 	slli	r9,r9,3
 200c984:	380ed7fa 	srli	r7,r7,31
 200c988:	defffb04 	addi	sp,sp,-20
 200c98c:	dc800215 	stw	r18,8(sp)
 200c990:	dc400115 	stw	r17,4(sp)
 200c994:	dc000015 	stw	r16,0(sp)
 200c998:	dfc00415 	stw	ra,16(sp)
 200c99c:	dcc00315 	stw	r19,12(sp)
 200c9a0:	1c803fcc 	andi	r18,r3,255
 200c9a4:	2c01ffcc 	andi	r16,r5,2047
 200c9a8:	5210b03a 	or	r8,r10,r8
 200c9ac:	202290fa 	slli	r17,r4,3
 200c9b0:	1081ffcc 	andi	r2,r2,2047
 200c9b4:	4b12b03a 	or	r9,r9,r12
 200c9b8:	300c90fa 	slli	r6,r6,3
 200c9bc:	91c07526 	beq	r18,r7,200cb94 <__adddf3+0x23c>
 200c9c0:	8087c83a 	sub	r3,r16,r2
 200c9c4:	00c0ab0e 	bge	zero,r3,200cc74 <__adddf3+0x31c>
 200c9c8:	10002a1e 	bne	r2,zero,200ca74 <__adddf3+0x11c>
 200c9cc:	4984b03a 	or	r2,r9,r6
 200c9d0:	1000961e 	bne	r2,zero,200cc2c <__adddf3+0x2d4>
 200c9d4:	888001cc 	andi	r2,r17,7
 200c9d8:	10000726 	beq	r2,zero,200c9f8 <__adddf3+0xa0>
 200c9dc:	888003cc 	andi	r2,r17,15
 200c9e0:	00c00104 	movi	r3,4
 200c9e4:	10c00426 	beq	r2,r3,200c9f8 <__adddf3+0xa0>
 200c9e8:	88c7883a 	add	r3,r17,r3
 200c9ec:	1c63803a 	cmpltu	r17,r3,r17
 200c9f0:	4451883a 	add	r8,r8,r17
 200c9f4:	1823883a 	mov	r17,r3
 200c9f8:	4080202c 	andhi	r2,r8,128
 200c9fc:	10005926 	beq	r2,zero,200cb64 <__adddf3+0x20c>
 200ca00:	84000044 	addi	r16,r16,1
 200ca04:	0081ffc4 	movi	r2,2047
 200ca08:	8080ba26 	beq	r16,r2,200ccf4 <__adddf3+0x39c>
 200ca0c:	00bfe034 	movhi	r2,65408
 200ca10:	10bfffc4 	addi	r2,r2,-1
 200ca14:	4090703a 	and	r8,r8,r2
 200ca18:	4004977a 	slli	r2,r8,29
 200ca1c:	4010927a 	slli	r8,r8,9
 200ca20:	8822d0fa 	srli	r17,r17,3
 200ca24:	8401ffcc 	andi	r16,r16,2047
 200ca28:	4010d33a 	srli	r8,r8,12
 200ca2c:	9007883a 	mov	r3,r18
 200ca30:	1444b03a 	or	r2,r2,r17
 200ca34:	8401ffcc 	andi	r16,r16,2047
 200ca38:	8020953a 	slli	r16,r16,20
 200ca3c:	18c03fcc 	andi	r3,r3,255
 200ca40:	01000434 	movhi	r4,16
 200ca44:	213fffc4 	addi	r4,r4,-1
 200ca48:	180697fa 	slli	r3,r3,31
 200ca4c:	4110703a 	and	r8,r8,r4
 200ca50:	4410b03a 	or	r8,r8,r16
 200ca54:	40c6b03a 	or	r3,r8,r3
 200ca58:	dfc00417 	ldw	ra,16(sp)
 200ca5c:	dcc00317 	ldw	r19,12(sp)
 200ca60:	dc800217 	ldw	r18,8(sp)
 200ca64:	dc400117 	ldw	r17,4(sp)
 200ca68:	dc000017 	ldw	r16,0(sp)
 200ca6c:	dec00504 	addi	sp,sp,20
 200ca70:	f800283a 	ret
 200ca74:	0081ffc4 	movi	r2,2047
 200ca78:	80bfd626 	beq	r16,r2,200c9d4 <__alt_data_end+0xff00c9d4>
 200ca7c:	4a402034 	orhi	r9,r9,128
 200ca80:	00800e04 	movi	r2,56
 200ca84:	10c09f16 	blt	r2,r3,200cd04 <__adddf3+0x3ac>
 200ca88:	008007c4 	movi	r2,31
 200ca8c:	10c0c216 	blt	r2,r3,200cd98 <__adddf3+0x440>
 200ca90:	00800804 	movi	r2,32
 200ca94:	10c5c83a 	sub	r2,r2,r3
 200ca98:	488a983a 	sll	r5,r9,r2
 200ca9c:	30c8d83a 	srl	r4,r6,r3
 200caa0:	3084983a 	sll	r2,r6,r2
 200caa4:	48c6d83a 	srl	r3,r9,r3
 200caa8:	290cb03a 	or	r6,r5,r4
 200caac:	1004c03a 	cmpne	r2,r2,zero
 200cab0:	308cb03a 	or	r6,r6,r2
 200cab4:	898dc83a 	sub	r6,r17,r6
 200cab8:	89a3803a 	cmpltu	r17,r17,r6
 200cabc:	40d1c83a 	sub	r8,r8,r3
 200cac0:	4451c83a 	sub	r8,r8,r17
 200cac4:	3023883a 	mov	r17,r6
 200cac8:	4080202c 	andhi	r2,r8,128
 200cacc:	10002326 	beq	r2,zero,200cb5c <__adddf3+0x204>
 200cad0:	04c02034 	movhi	r19,128
 200cad4:	9cffffc4 	addi	r19,r19,-1
 200cad8:	44e6703a 	and	r19,r8,r19
 200cadc:	98007626 	beq	r19,zero,200ccb8 <__adddf3+0x360>
 200cae0:	9809883a 	mov	r4,r19
 200cae4:	200f1980 	call	200f198 <__clzsi2>
 200cae8:	10fffe04 	addi	r3,r2,-8
 200caec:	010007c4 	movi	r4,31
 200caf0:	20c07716 	blt	r4,r3,200ccd0 <__adddf3+0x378>
 200caf4:	00800804 	movi	r2,32
 200caf8:	10c5c83a 	sub	r2,r2,r3
 200cafc:	8884d83a 	srl	r2,r17,r2
 200cb00:	98d0983a 	sll	r8,r19,r3
 200cb04:	88e2983a 	sll	r17,r17,r3
 200cb08:	1204b03a 	or	r2,r2,r8
 200cb0c:	1c007416 	blt	r3,r16,200cce0 <__adddf3+0x388>
 200cb10:	1c21c83a 	sub	r16,r3,r16
 200cb14:	82000044 	addi	r8,r16,1
 200cb18:	00c007c4 	movi	r3,31
 200cb1c:	1a009116 	blt	r3,r8,200cd64 <__adddf3+0x40c>
 200cb20:	00c00804 	movi	r3,32
 200cb24:	1a07c83a 	sub	r3,r3,r8
 200cb28:	8a08d83a 	srl	r4,r17,r8
 200cb2c:	88e2983a 	sll	r17,r17,r3
 200cb30:	10c6983a 	sll	r3,r2,r3
 200cb34:	1210d83a 	srl	r8,r2,r8
 200cb38:	8804c03a 	cmpne	r2,r17,zero
 200cb3c:	1906b03a 	or	r3,r3,r4
 200cb40:	18a2b03a 	or	r17,r3,r2
 200cb44:	0021883a 	mov	r16,zero
 200cb48:	003fa206 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cb4c:	1890b03a 	or	r8,r3,r2
 200cb50:	40017d26 	beq	r8,zero,200d148 <__adddf3+0x7f0>
 200cb54:	1011883a 	mov	r8,r2
 200cb58:	1823883a 	mov	r17,r3
 200cb5c:	888001cc 	andi	r2,r17,7
 200cb60:	103f9e1e 	bne	r2,zero,200c9dc <__alt_data_end+0xff00c9dc>
 200cb64:	4004977a 	slli	r2,r8,29
 200cb68:	8822d0fa 	srli	r17,r17,3
 200cb6c:	4010d0fa 	srli	r8,r8,3
 200cb70:	9007883a 	mov	r3,r18
 200cb74:	1444b03a 	or	r2,r2,r17
 200cb78:	0101ffc4 	movi	r4,2047
 200cb7c:	81002426 	beq	r16,r4,200cc10 <__adddf3+0x2b8>
 200cb80:	8120703a 	and	r16,r16,r4
 200cb84:	01000434 	movhi	r4,16
 200cb88:	213fffc4 	addi	r4,r4,-1
 200cb8c:	4110703a 	and	r8,r8,r4
 200cb90:	003fa806 	br	200ca34 <__alt_data_end+0xff00ca34>
 200cb94:	8089c83a 	sub	r4,r16,r2
 200cb98:	01005e0e 	bge	zero,r4,200cd14 <__adddf3+0x3bc>
 200cb9c:	10002b26 	beq	r2,zero,200cc4c <__adddf3+0x2f4>
 200cba0:	0081ffc4 	movi	r2,2047
 200cba4:	80bf8b26 	beq	r16,r2,200c9d4 <__alt_data_end+0xff00c9d4>
 200cba8:	4a402034 	orhi	r9,r9,128
 200cbac:	00800e04 	movi	r2,56
 200cbb0:	1100a40e 	bge	r2,r4,200ce44 <__adddf3+0x4ec>
 200cbb4:	498cb03a 	or	r6,r9,r6
 200cbb8:	300ac03a 	cmpne	r5,r6,zero
 200cbbc:	0013883a 	mov	r9,zero
 200cbc0:	2c4b883a 	add	r5,r5,r17
 200cbc4:	2c63803a 	cmpltu	r17,r5,r17
 200cbc8:	4a11883a 	add	r8,r9,r8
 200cbcc:	8a11883a 	add	r8,r17,r8
 200cbd0:	2823883a 	mov	r17,r5
 200cbd4:	4080202c 	andhi	r2,r8,128
 200cbd8:	103fe026 	beq	r2,zero,200cb5c <__alt_data_end+0xff00cb5c>
 200cbdc:	84000044 	addi	r16,r16,1
 200cbe0:	0081ffc4 	movi	r2,2047
 200cbe4:	8080d226 	beq	r16,r2,200cf30 <__adddf3+0x5d8>
 200cbe8:	00bfe034 	movhi	r2,65408
 200cbec:	10bfffc4 	addi	r2,r2,-1
 200cbf0:	4090703a 	and	r8,r8,r2
 200cbf4:	880ad07a 	srli	r5,r17,1
 200cbf8:	400897fa 	slli	r4,r8,31
 200cbfc:	88c0004c 	andi	r3,r17,1
 200cc00:	28e2b03a 	or	r17,r5,r3
 200cc04:	4010d07a 	srli	r8,r8,1
 200cc08:	2462b03a 	or	r17,r4,r17
 200cc0c:	003f7106 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cc10:	4088b03a 	or	r4,r8,r2
 200cc14:	20014526 	beq	r4,zero,200d12c <__adddf3+0x7d4>
 200cc18:	01000434 	movhi	r4,16
 200cc1c:	42000234 	orhi	r8,r8,8
 200cc20:	213fffc4 	addi	r4,r4,-1
 200cc24:	4110703a 	and	r8,r8,r4
 200cc28:	003f8206 	br	200ca34 <__alt_data_end+0xff00ca34>
 200cc2c:	18ffffc4 	addi	r3,r3,-1
 200cc30:	1800491e 	bne	r3,zero,200cd58 <__adddf3+0x400>
 200cc34:	898bc83a 	sub	r5,r17,r6
 200cc38:	8963803a 	cmpltu	r17,r17,r5
 200cc3c:	4251c83a 	sub	r8,r8,r9
 200cc40:	4451c83a 	sub	r8,r8,r17
 200cc44:	2823883a 	mov	r17,r5
 200cc48:	003f9f06 	br	200cac8 <__alt_data_end+0xff00cac8>
 200cc4c:	4984b03a 	or	r2,r9,r6
 200cc50:	103f6026 	beq	r2,zero,200c9d4 <__alt_data_end+0xff00c9d4>
 200cc54:	213fffc4 	addi	r4,r4,-1
 200cc58:	2000931e 	bne	r4,zero,200cea8 <__adddf3+0x550>
 200cc5c:	898d883a 	add	r6,r17,r6
 200cc60:	3463803a 	cmpltu	r17,r6,r17
 200cc64:	4251883a 	add	r8,r8,r9
 200cc68:	8a11883a 	add	r8,r17,r8
 200cc6c:	3023883a 	mov	r17,r6
 200cc70:	003fd806 	br	200cbd4 <__alt_data_end+0xff00cbd4>
 200cc74:	1800541e 	bne	r3,zero,200cdc8 <__adddf3+0x470>
 200cc78:	80800044 	addi	r2,r16,1
 200cc7c:	1081ffcc 	andi	r2,r2,2047
 200cc80:	00c00044 	movi	r3,1
 200cc84:	1880a00e 	bge	r3,r2,200cf08 <__adddf3+0x5b0>
 200cc88:	8989c83a 	sub	r4,r17,r6
 200cc8c:	8905803a 	cmpltu	r2,r17,r4
 200cc90:	4267c83a 	sub	r19,r8,r9
 200cc94:	98a7c83a 	sub	r19,r19,r2
 200cc98:	9880202c 	andhi	r2,r19,128
 200cc9c:	10006326 	beq	r2,zero,200ce2c <__adddf3+0x4d4>
 200cca0:	3463c83a 	sub	r17,r6,r17
 200cca4:	4a07c83a 	sub	r3,r9,r8
 200cca8:	344d803a 	cmpltu	r6,r6,r17
 200ccac:	19a7c83a 	sub	r19,r3,r6
 200ccb0:	3825883a 	mov	r18,r7
 200ccb4:	983f8a1e 	bne	r19,zero,200cae0 <__alt_data_end+0xff00cae0>
 200ccb8:	8809883a 	mov	r4,r17
 200ccbc:	200f1980 	call	200f198 <__clzsi2>
 200ccc0:	10800804 	addi	r2,r2,32
 200ccc4:	10fffe04 	addi	r3,r2,-8
 200ccc8:	010007c4 	movi	r4,31
 200cccc:	20ff890e 	bge	r4,r3,200caf4 <__alt_data_end+0xff00caf4>
 200ccd0:	10bff604 	addi	r2,r2,-40
 200ccd4:	8884983a 	sll	r2,r17,r2
 200ccd8:	0023883a 	mov	r17,zero
 200ccdc:	1c3f8c0e 	bge	r3,r16,200cb10 <__alt_data_end+0xff00cb10>
 200cce0:	023fe034 	movhi	r8,65408
 200cce4:	423fffc4 	addi	r8,r8,-1
 200cce8:	80e1c83a 	sub	r16,r16,r3
 200ccec:	1210703a 	and	r8,r2,r8
 200ccf0:	003f3806 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200ccf4:	9007883a 	mov	r3,r18
 200ccf8:	0011883a 	mov	r8,zero
 200ccfc:	0005883a 	mov	r2,zero
 200cd00:	003f4c06 	br	200ca34 <__alt_data_end+0xff00ca34>
 200cd04:	498cb03a 	or	r6,r9,r6
 200cd08:	300cc03a 	cmpne	r6,r6,zero
 200cd0c:	0007883a 	mov	r3,zero
 200cd10:	003f6806 	br	200cab4 <__alt_data_end+0xff00cab4>
 200cd14:	20009c1e 	bne	r4,zero,200cf88 <__adddf3+0x630>
 200cd18:	80800044 	addi	r2,r16,1
 200cd1c:	1141ffcc 	andi	r5,r2,2047
 200cd20:	01000044 	movi	r4,1
 200cd24:	2140670e 	bge	r4,r5,200cec4 <__adddf3+0x56c>
 200cd28:	0101ffc4 	movi	r4,2047
 200cd2c:	11007f26 	beq	r2,r4,200cf2c <__adddf3+0x5d4>
 200cd30:	898d883a 	add	r6,r17,r6
 200cd34:	4247883a 	add	r3,r8,r9
 200cd38:	3451803a 	cmpltu	r8,r6,r17
 200cd3c:	40d1883a 	add	r8,r8,r3
 200cd40:	402297fa 	slli	r17,r8,31
 200cd44:	300cd07a 	srli	r6,r6,1
 200cd48:	4010d07a 	srli	r8,r8,1
 200cd4c:	1021883a 	mov	r16,r2
 200cd50:	89a2b03a 	or	r17,r17,r6
 200cd54:	003f1f06 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cd58:	0081ffc4 	movi	r2,2047
 200cd5c:	80bf481e 	bne	r16,r2,200ca80 <__alt_data_end+0xff00ca80>
 200cd60:	003f1c06 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cd64:	843ff844 	addi	r16,r16,-31
 200cd68:	01000804 	movi	r4,32
 200cd6c:	1406d83a 	srl	r3,r2,r16
 200cd70:	41005026 	beq	r8,r4,200ceb4 <__adddf3+0x55c>
 200cd74:	01001004 	movi	r4,64
 200cd78:	2211c83a 	sub	r8,r4,r8
 200cd7c:	1204983a 	sll	r2,r2,r8
 200cd80:	88a2b03a 	or	r17,r17,r2
 200cd84:	8822c03a 	cmpne	r17,r17,zero
 200cd88:	1c62b03a 	or	r17,r3,r17
 200cd8c:	0011883a 	mov	r8,zero
 200cd90:	0021883a 	mov	r16,zero
 200cd94:	003f7106 	br	200cb5c <__alt_data_end+0xff00cb5c>
 200cd98:	193ff804 	addi	r4,r3,-32
 200cd9c:	00800804 	movi	r2,32
 200cda0:	4908d83a 	srl	r4,r9,r4
 200cda4:	18804526 	beq	r3,r2,200cebc <__adddf3+0x564>
 200cda8:	00801004 	movi	r2,64
 200cdac:	10c5c83a 	sub	r2,r2,r3
 200cdb0:	4886983a 	sll	r3,r9,r2
 200cdb4:	198cb03a 	or	r6,r3,r6
 200cdb8:	300cc03a 	cmpne	r6,r6,zero
 200cdbc:	218cb03a 	or	r6,r4,r6
 200cdc0:	0007883a 	mov	r3,zero
 200cdc4:	003f3b06 	br	200cab4 <__alt_data_end+0xff00cab4>
 200cdc8:	80002a26 	beq	r16,zero,200ce74 <__adddf3+0x51c>
 200cdcc:	0101ffc4 	movi	r4,2047
 200cdd0:	11006826 	beq	r2,r4,200cf74 <__adddf3+0x61c>
 200cdd4:	00c7c83a 	sub	r3,zero,r3
 200cdd8:	42002034 	orhi	r8,r8,128
 200cddc:	01000e04 	movi	r4,56
 200cde0:	20c07c16 	blt	r4,r3,200cfd4 <__adddf3+0x67c>
 200cde4:	010007c4 	movi	r4,31
 200cde8:	20c0da16 	blt	r4,r3,200d154 <__adddf3+0x7fc>
 200cdec:	01000804 	movi	r4,32
 200cdf0:	20c9c83a 	sub	r4,r4,r3
 200cdf4:	4114983a 	sll	r10,r8,r4
 200cdf8:	88cad83a 	srl	r5,r17,r3
 200cdfc:	8908983a 	sll	r4,r17,r4
 200ce00:	40c6d83a 	srl	r3,r8,r3
 200ce04:	5162b03a 	or	r17,r10,r5
 200ce08:	2008c03a 	cmpne	r4,r4,zero
 200ce0c:	8922b03a 	or	r17,r17,r4
 200ce10:	3463c83a 	sub	r17,r6,r17
 200ce14:	48c7c83a 	sub	r3,r9,r3
 200ce18:	344d803a 	cmpltu	r6,r6,r17
 200ce1c:	1991c83a 	sub	r8,r3,r6
 200ce20:	1021883a 	mov	r16,r2
 200ce24:	3825883a 	mov	r18,r7
 200ce28:	003f2706 	br	200cac8 <__alt_data_end+0xff00cac8>
 200ce2c:	24d0b03a 	or	r8,r4,r19
 200ce30:	40001b1e 	bne	r8,zero,200cea0 <__adddf3+0x548>
 200ce34:	0005883a 	mov	r2,zero
 200ce38:	0007883a 	mov	r3,zero
 200ce3c:	0021883a 	mov	r16,zero
 200ce40:	003f4d06 	br	200cb78 <__alt_data_end+0xff00cb78>
 200ce44:	008007c4 	movi	r2,31
 200ce48:	11003c16 	blt	r2,r4,200cf3c <__adddf3+0x5e4>
 200ce4c:	00800804 	movi	r2,32
 200ce50:	1105c83a 	sub	r2,r2,r4
 200ce54:	488e983a 	sll	r7,r9,r2
 200ce58:	310ad83a 	srl	r5,r6,r4
 200ce5c:	3084983a 	sll	r2,r6,r2
 200ce60:	4912d83a 	srl	r9,r9,r4
 200ce64:	394ab03a 	or	r5,r7,r5
 200ce68:	1004c03a 	cmpne	r2,r2,zero
 200ce6c:	288ab03a 	or	r5,r5,r2
 200ce70:	003f5306 	br	200cbc0 <__alt_data_end+0xff00cbc0>
 200ce74:	4448b03a 	or	r4,r8,r17
 200ce78:	20003e26 	beq	r4,zero,200cf74 <__adddf3+0x61c>
 200ce7c:	00c6303a 	nor	r3,zero,r3
 200ce80:	18003a1e 	bne	r3,zero,200cf6c <__adddf3+0x614>
 200ce84:	3463c83a 	sub	r17,r6,r17
 200ce88:	4a07c83a 	sub	r3,r9,r8
 200ce8c:	344d803a 	cmpltu	r6,r6,r17
 200ce90:	1991c83a 	sub	r8,r3,r6
 200ce94:	1021883a 	mov	r16,r2
 200ce98:	3825883a 	mov	r18,r7
 200ce9c:	003f0a06 	br	200cac8 <__alt_data_end+0xff00cac8>
 200cea0:	2023883a 	mov	r17,r4
 200cea4:	003f0d06 	br	200cadc <__alt_data_end+0xff00cadc>
 200cea8:	0081ffc4 	movi	r2,2047
 200ceac:	80bf3f1e 	bne	r16,r2,200cbac <__alt_data_end+0xff00cbac>
 200ceb0:	003ec806 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200ceb4:	0005883a 	mov	r2,zero
 200ceb8:	003fb106 	br	200cd80 <__alt_data_end+0xff00cd80>
 200cebc:	0007883a 	mov	r3,zero
 200cec0:	003fbc06 	br	200cdb4 <__alt_data_end+0xff00cdb4>
 200cec4:	4444b03a 	or	r2,r8,r17
 200cec8:	8000871e 	bne	r16,zero,200d0e8 <__adddf3+0x790>
 200cecc:	1000ba26 	beq	r2,zero,200d1b8 <__adddf3+0x860>
 200ced0:	4984b03a 	or	r2,r9,r6
 200ced4:	103ebf26 	beq	r2,zero,200c9d4 <__alt_data_end+0xff00c9d4>
 200ced8:	8985883a 	add	r2,r17,r6
 200cedc:	4247883a 	add	r3,r8,r9
 200cee0:	1451803a 	cmpltu	r8,r2,r17
 200cee4:	40d1883a 	add	r8,r8,r3
 200cee8:	40c0202c 	andhi	r3,r8,128
 200ceec:	1023883a 	mov	r17,r2
 200cef0:	183f1a26 	beq	r3,zero,200cb5c <__alt_data_end+0xff00cb5c>
 200cef4:	00bfe034 	movhi	r2,65408
 200cef8:	10bfffc4 	addi	r2,r2,-1
 200cefc:	2021883a 	mov	r16,r4
 200cf00:	4090703a 	and	r8,r8,r2
 200cf04:	003eb306 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cf08:	4444b03a 	or	r2,r8,r17
 200cf0c:	8000291e 	bne	r16,zero,200cfb4 <__adddf3+0x65c>
 200cf10:	10004b1e 	bne	r2,zero,200d040 <__adddf3+0x6e8>
 200cf14:	4990b03a 	or	r8,r9,r6
 200cf18:	40008b26 	beq	r8,zero,200d148 <__adddf3+0x7f0>
 200cf1c:	4811883a 	mov	r8,r9
 200cf20:	3023883a 	mov	r17,r6
 200cf24:	3825883a 	mov	r18,r7
 200cf28:	003eaa06 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cf2c:	1021883a 	mov	r16,r2
 200cf30:	0011883a 	mov	r8,zero
 200cf34:	0005883a 	mov	r2,zero
 200cf38:	003f0f06 	br	200cb78 <__alt_data_end+0xff00cb78>
 200cf3c:	217ff804 	addi	r5,r4,-32
 200cf40:	00800804 	movi	r2,32
 200cf44:	494ad83a 	srl	r5,r9,r5
 200cf48:	20807d26 	beq	r4,r2,200d140 <__adddf3+0x7e8>
 200cf4c:	00801004 	movi	r2,64
 200cf50:	1109c83a 	sub	r4,r2,r4
 200cf54:	4912983a 	sll	r9,r9,r4
 200cf58:	498cb03a 	or	r6,r9,r6
 200cf5c:	300cc03a 	cmpne	r6,r6,zero
 200cf60:	298ab03a 	or	r5,r5,r6
 200cf64:	0013883a 	mov	r9,zero
 200cf68:	003f1506 	br	200cbc0 <__alt_data_end+0xff00cbc0>
 200cf6c:	0101ffc4 	movi	r4,2047
 200cf70:	113f9a1e 	bne	r2,r4,200cddc <__alt_data_end+0xff00cddc>
 200cf74:	4811883a 	mov	r8,r9
 200cf78:	3023883a 	mov	r17,r6
 200cf7c:	1021883a 	mov	r16,r2
 200cf80:	3825883a 	mov	r18,r7
 200cf84:	003e9306 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cf88:	8000161e 	bne	r16,zero,200cfe4 <__adddf3+0x68c>
 200cf8c:	444ab03a 	or	r5,r8,r17
 200cf90:	28005126 	beq	r5,zero,200d0d8 <__adddf3+0x780>
 200cf94:	0108303a 	nor	r4,zero,r4
 200cf98:	20004d1e 	bne	r4,zero,200d0d0 <__adddf3+0x778>
 200cf9c:	89a3883a 	add	r17,r17,r6
 200cfa0:	4253883a 	add	r9,r8,r9
 200cfa4:	898d803a 	cmpltu	r6,r17,r6
 200cfa8:	3251883a 	add	r8,r6,r9
 200cfac:	1021883a 	mov	r16,r2
 200cfb0:	003f0806 	br	200cbd4 <__alt_data_end+0xff00cbd4>
 200cfb4:	1000301e 	bne	r2,zero,200d078 <__adddf3+0x720>
 200cfb8:	4984b03a 	or	r2,r9,r6
 200cfbc:	10007126 	beq	r2,zero,200d184 <__adddf3+0x82c>
 200cfc0:	4811883a 	mov	r8,r9
 200cfc4:	3023883a 	mov	r17,r6
 200cfc8:	3825883a 	mov	r18,r7
 200cfcc:	0401ffc4 	movi	r16,2047
 200cfd0:	003e8006 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200cfd4:	4462b03a 	or	r17,r8,r17
 200cfd8:	8822c03a 	cmpne	r17,r17,zero
 200cfdc:	0007883a 	mov	r3,zero
 200cfe0:	003f8b06 	br	200ce10 <__alt_data_end+0xff00ce10>
 200cfe4:	0141ffc4 	movi	r5,2047
 200cfe8:	11403b26 	beq	r2,r5,200d0d8 <__adddf3+0x780>
 200cfec:	0109c83a 	sub	r4,zero,r4
 200cff0:	42002034 	orhi	r8,r8,128
 200cff4:	01400e04 	movi	r5,56
 200cff8:	29006716 	blt	r5,r4,200d198 <__adddf3+0x840>
 200cffc:	014007c4 	movi	r5,31
 200d000:	29007016 	blt	r5,r4,200d1c4 <__adddf3+0x86c>
 200d004:	01400804 	movi	r5,32
 200d008:	290bc83a 	sub	r5,r5,r4
 200d00c:	4154983a 	sll	r10,r8,r5
 200d010:	890ed83a 	srl	r7,r17,r4
 200d014:	894a983a 	sll	r5,r17,r5
 200d018:	4108d83a 	srl	r4,r8,r4
 200d01c:	51e2b03a 	or	r17,r10,r7
 200d020:	280ac03a 	cmpne	r5,r5,zero
 200d024:	8962b03a 	or	r17,r17,r5
 200d028:	89a3883a 	add	r17,r17,r6
 200d02c:	2253883a 	add	r9,r4,r9
 200d030:	898d803a 	cmpltu	r6,r17,r6
 200d034:	3251883a 	add	r8,r6,r9
 200d038:	1021883a 	mov	r16,r2
 200d03c:	003ee506 	br	200cbd4 <__alt_data_end+0xff00cbd4>
 200d040:	4984b03a 	or	r2,r9,r6
 200d044:	103e6326 	beq	r2,zero,200c9d4 <__alt_data_end+0xff00c9d4>
 200d048:	8987c83a 	sub	r3,r17,r6
 200d04c:	88c9803a 	cmpltu	r4,r17,r3
 200d050:	4245c83a 	sub	r2,r8,r9
 200d054:	1105c83a 	sub	r2,r2,r4
 200d058:	1100202c 	andhi	r4,r2,128
 200d05c:	203ebb26 	beq	r4,zero,200cb4c <__alt_data_end+0xff00cb4c>
 200d060:	3463c83a 	sub	r17,r6,r17
 200d064:	4a07c83a 	sub	r3,r9,r8
 200d068:	344d803a 	cmpltu	r6,r6,r17
 200d06c:	1991c83a 	sub	r8,r3,r6
 200d070:	3825883a 	mov	r18,r7
 200d074:	003e5706 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200d078:	4984b03a 	or	r2,r9,r6
 200d07c:	10002e26 	beq	r2,zero,200d138 <__adddf3+0x7e0>
 200d080:	4004d0fa 	srli	r2,r8,3
 200d084:	8822d0fa 	srli	r17,r17,3
 200d088:	4010977a 	slli	r8,r8,29
 200d08c:	10c0022c 	andhi	r3,r2,8
 200d090:	4462b03a 	or	r17,r8,r17
 200d094:	18000826 	beq	r3,zero,200d0b8 <__adddf3+0x760>
 200d098:	4808d0fa 	srli	r4,r9,3
 200d09c:	20c0022c 	andhi	r3,r4,8
 200d0a0:	1800051e 	bne	r3,zero,200d0b8 <__adddf3+0x760>
 200d0a4:	300cd0fa 	srli	r6,r6,3
 200d0a8:	4806977a 	slli	r3,r9,29
 200d0ac:	2005883a 	mov	r2,r4
 200d0b0:	3825883a 	mov	r18,r7
 200d0b4:	19a2b03a 	or	r17,r3,r6
 200d0b8:	8810d77a 	srli	r8,r17,29
 200d0bc:	100490fa 	slli	r2,r2,3
 200d0c0:	882290fa 	slli	r17,r17,3
 200d0c4:	0401ffc4 	movi	r16,2047
 200d0c8:	4090b03a 	or	r8,r8,r2
 200d0cc:	003e4106 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200d0d0:	0141ffc4 	movi	r5,2047
 200d0d4:	117fc71e 	bne	r2,r5,200cff4 <__alt_data_end+0xff00cff4>
 200d0d8:	4811883a 	mov	r8,r9
 200d0dc:	3023883a 	mov	r17,r6
 200d0e0:	1021883a 	mov	r16,r2
 200d0e4:	003e3b06 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200d0e8:	10002f26 	beq	r2,zero,200d1a8 <__adddf3+0x850>
 200d0ec:	4984b03a 	or	r2,r9,r6
 200d0f0:	10001126 	beq	r2,zero,200d138 <__adddf3+0x7e0>
 200d0f4:	4004d0fa 	srli	r2,r8,3
 200d0f8:	8822d0fa 	srli	r17,r17,3
 200d0fc:	4010977a 	slli	r8,r8,29
 200d100:	10c0022c 	andhi	r3,r2,8
 200d104:	4462b03a 	or	r17,r8,r17
 200d108:	183feb26 	beq	r3,zero,200d0b8 <__alt_data_end+0xff00d0b8>
 200d10c:	4808d0fa 	srli	r4,r9,3
 200d110:	20c0022c 	andhi	r3,r4,8
 200d114:	183fe81e 	bne	r3,zero,200d0b8 <__alt_data_end+0xff00d0b8>
 200d118:	300cd0fa 	srli	r6,r6,3
 200d11c:	4806977a 	slli	r3,r9,29
 200d120:	2005883a 	mov	r2,r4
 200d124:	19a2b03a 	or	r17,r3,r6
 200d128:	003fe306 	br	200d0b8 <__alt_data_end+0xff00d0b8>
 200d12c:	0011883a 	mov	r8,zero
 200d130:	0005883a 	mov	r2,zero
 200d134:	003e3f06 	br	200ca34 <__alt_data_end+0xff00ca34>
 200d138:	0401ffc4 	movi	r16,2047
 200d13c:	003e2506 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200d140:	0013883a 	mov	r9,zero
 200d144:	003f8406 	br	200cf58 <__alt_data_end+0xff00cf58>
 200d148:	0005883a 	mov	r2,zero
 200d14c:	0007883a 	mov	r3,zero
 200d150:	003e8906 	br	200cb78 <__alt_data_end+0xff00cb78>
 200d154:	197ff804 	addi	r5,r3,-32
 200d158:	01000804 	movi	r4,32
 200d15c:	414ad83a 	srl	r5,r8,r5
 200d160:	19002426 	beq	r3,r4,200d1f4 <__adddf3+0x89c>
 200d164:	01001004 	movi	r4,64
 200d168:	20c7c83a 	sub	r3,r4,r3
 200d16c:	40c6983a 	sll	r3,r8,r3
 200d170:	1c46b03a 	or	r3,r3,r17
 200d174:	1806c03a 	cmpne	r3,r3,zero
 200d178:	28e2b03a 	or	r17,r5,r3
 200d17c:	0007883a 	mov	r3,zero
 200d180:	003f2306 	br	200ce10 <__alt_data_end+0xff00ce10>
 200d184:	0007883a 	mov	r3,zero
 200d188:	5811883a 	mov	r8,r11
 200d18c:	00bfffc4 	movi	r2,-1
 200d190:	0401ffc4 	movi	r16,2047
 200d194:	003e7806 	br	200cb78 <__alt_data_end+0xff00cb78>
 200d198:	4462b03a 	or	r17,r8,r17
 200d19c:	8822c03a 	cmpne	r17,r17,zero
 200d1a0:	0009883a 	mov	r4,zero
 200d1a4:	003fa006 	br	200d028 <__alt_data_end+0xff00d028>
 200d1a8:	4811883a 	mov	r8,r9
 200d1ac:	3023883a 	mov	r17,r6
 200d1b0:	0401ffc4 	movi	r16,2047
 200d1b4:	003e0706 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200d1b8:	4811883a 	mov	r8,r9
 200d1bc:	3023883a 	mov	r17,r6
 200d1c0:	003e0406 	br	200c9d4 <__alt_data_end+0xff00c9d4>
 200d1c4:	21fff804 	addi	r7,r4,-32
 200d1c8:	01400804 	movi	r5,32
 200d1cc:	41ced83a 	srl	r7,r8,r7
 200d1d0:	21400a26 	beq	r4,r5,200d1fc <__adddf3+0x8a4>
 200d1d4:	01401004 	movi	r5,64
 200d1d8:	2909c83a 	sub	r4,r5,r4
 200d1dc:	4108983a 	sll	r4,r8,r4
 200d1e0:	2448b03a 	or	r4,r4,r17
 200d1e4:	2008c03a 	cmpne	r4,r4,zero
 200d1e8:	3922b03a 	or	r17,r7,r4
 200d1ec:	0009883a 	mov	r4,zero
 200d1f0:	003f8d06 	br	200d028 <__alt_data_end+0xff00d028>
 200d1f4:	0007883a 	mov	r3,zero
 200d1f8:	003fdd06 	br	200d170 <__alt_data_end+0xff00d170>
 200d1fc:	0009883a 	mov	r4,zero
 200d200:	003ff706 	br	200d1e0 <__alt_data_end+0xff00d1e0>

0200d204 <__divdf3>:
 200d204:	defff004 	addi	sp,sp,-64
 200d208:	dc800815 	stw	r18,32(sp)
 200d20c:	2824d53a 	srli	r18,r5,20
 200d210:	dd800c15 	stw	r22,48(sp)
 200d214:	282cd7fa 	srli	r22,r5,31
 200d218:	dc000615 	stw	r16,24(sp)
 200d21c:	04000434 	movhi	r16,16
 200d220:	843fffc4 	addi	r16,r16,-1
 200d224:	dfc00f15 	stw	ra,60(sp)
 200d228:	df000e15 	stw	fp,56(sp)
 200d22c:	ddc00d15 	stw	r23,52(sp)
 200d230:	dd400b15 	stw	r21,44(sp)
 200d234:	dd000a15 	stw	r20,40(sp)
 200d238:	dcc00915 	stw	r19,36(sp)
 200d23c:	dc400715 	stw	r17,28(sp)
 200d240:	9481ffcc 	andi	r18,r18,2047
 200d244:	2c20703a 	and	r16,r5,r16
 200d248:	b2003fcc 	andi	r8,r22,255
 200d24c:	90006126 	beq	r18,zero,200d3d4 <__divdf3+0x1d0>
 200d250:	0081ffc4 	movi	r2,2047
 200d254:	202b883a 	mov	r21,r4
 200d258:	90803726 	beq	r18,r2,200d338 <__divdf3+0x134>
 200d25c:	80800434 	orhi	r2,r16,16
 200d260:	100490fa 	slli	r2,r2,3
 200d264:	2020d77a 	srli	r16,r4,29
 200d268:	202a90fa 	slli	r21,r4,3
 200d26c:	94bf0044 	addi	r18,r18,-1023
 200d270:	80a0b03a 	or	r16,r16,r2
 200d274:	0013883a 	mov	r9,zero
 200d278:	000b883a 	mov	r5,zero
 200d27c:	3806d53a 	srli	r3,r7,20
 200d280:	382ed7fa 	srli	r23,r7,31
 200d284:	04400434 	movhi	r17,16
 200d288:	8c7fffc4 	addi	r17,r17,-1
 200d28c:	18c1ffcc 	andi	r3,r3,2047
 200d290:	3029883a 	mov	r20,r6
 200d294:	3c62703a 	and	r17,r7,r17
 200d298:	bf003fcc 	andi	fp,r23,255
 200d29c:	18006e26 	beq	r3,zero,200d458 <__divdf3+0x254>
 200d2a0:	0081ffc4 	movi	r2,2047
 200d2a4:	18806626 	beq	r3,r2,200d440 <__divdf3+0x23c>
 200d2a8:	88800434 	orhi	r2,r17,16
 200d2ac:	100490fa 	slli	r2,r2,3
 200d2b0:	3022d77a 	srli	r17,r6,29
 200d2b4:	302890fa 	slli	r20,r6,3
 200d2b8:	18ff0044 	addi	r3,r3,-1023
 200d2bc:	88a2b03a 	or	r17,r17,r2
 200d2c0:	000f883a 	mov	r7,zero
 200d2c4:	b5e6f03a 	xor	r19,r22,r23
 200d2c8:	3a4cb03a 	or	r6,r7,r9
 200d2cc:	008003c4 	movi	r2,15
 200d2d0:	9809883a 	mov	r4,r19
 200d2d4:	90c7c83a 	sub	r3,r18,r3
 200d2d8:	9cc03fcc 	andi	r19,r19,255
 200d2dc:	11809636 	bltu	r2,r6,200d538 <__divdf3+0x334>
 200d2e0:	300c90ba 	slli	r6,r6,2
 200d2e4:	00808074 	movhi	r2,513
 200d2e8:	10b4be04 	addi	r2,r2,-11528
 200d2ec:	308d883a 	add	r6,r6,r2
 200d2f0:	30800017 	ldw	r2,0(r6)
 200d2f4:	1000683a 	jmp	r2
 200d2f8:	0200d538 	rdprs	r8,zero,852
 200d2fc:	0200d370 	cmpltui	r8,zero,845
 200d300:	0200d528 	cmpgeui	r8,zero,852
 200d304:	0200d364 	muli	r8,zero,845
 200d308:	0200d528 	cmpgeui	r8,zero,852
 200d30c:	0200d4fc 	xorhi	r8,zero,851
 200d310:	0200d528 	cmpgeui	r8,zero,852
 200d314:	0200d364 	muli	r8,zero,845
 200d318:	0200d370 	cmpltui	r8,zero,845
 200d31c:	0200d370 	cmpltui	r8,zero,845
 200d320:	0200d4fc 	xorhi	r8,zero,851
 200d324:	0200d364 	muli	r8,zero,845
 200d328:	0200d354 	movui	r8,845
 200d32c:	0200d354 	movui	r8,845
 200d330:	0200d354 	movui	r8,845
 200d334:	0200d8c0 	call	200d8c <__alt_mem_onchip_memory2_0+0x200d8c>
 200d338:	2404b03a 	or	r2,r4,r16
 200d33c:	10006c1e 	bne	r2,zero,200d4f0 <__divdf3+0x2ec>
 200d340:	02400204 	movi	r9,8
 200d344:	0021883a 	mov	r16,zero
 200d348:	002b883a 	mov	r21,zero
 200d34c:	01400084 	movi	r5,2
 200d350:	003fca06 	br	200d27c <__alt_data_end+0xff00d27c>
 200d354:	8023883a 	mov	r17,r16
 200d358:	a829883a 	mov	r20,r21
 200d35c:	4039883a 	mov	fp,r8
 200d360:	280f883a 	mov	r7,r5
 200d364:	00800084 	movi	r2,2
 200d368:	3881601e 	bne	r7,r2,200d8ec <__divdf3+0x6e8>
 200d36c:	e027883a 	mov	r19,fp
 200d370:	9900004c 	andi	r4,r19,1
 200d374:	0081ffc4 	movi	r2,2047
 200d378:	0021883a 	mov	r16,zero
 200d37c:	002b883a 	mov	r21,zero
 200d380:	1004953a 	slli	r2,r2,20
 200d384:	20c03fcc 	andi	r3,r4,255
 200d388:	01400434 	movhi	r5,16
 200d38c:	297fffc4 	addi	r5,r5,-1
 200d390:	180697fa 	slli	r3,r3,31
 200d394:	8160703a 	and	r16,r16,r5
 200d398:	80a0b03a 	or	r16,r16,r2
 200d39c:	80c6b03a 	or	r3,r16,r3
 200d3a0:	a805883a 	mov	r2,r21
 200d3a4:	dfc00f17 	ldw	ra,60(sp)
 200d3a8:	df000e17 	ldw	fp,56(sp)
 200d3ac:	ddc00d17 	ldw	r23,52(sp)
 200d3b0:	dd800c17 	ldw	r22,48(sp)
 200d3b4:	dd400b17 	ldw	r21,44(sp)
 200d3b8:	dd000a17 	ldw	r20,40(sp)
 200d3bc:	dcc00917 	ldw	r19,36(sp)
 200d3c0:	dc800817 	ldw	r18,32(sp)
 200d3c4:	dc400717 	ldw	r17,28(sp)
 200d3c8:	dc000617 	ldw	r16,24(sp)
 200d3cc:	dec01004 	addi	sp,sp,64
 200d3d0:	f800283a 	ret
 200d3d4:	2404b03a 	or	r2,r4,r16
 200d3d8:	2023883a 	mov	r17,r4
 200d3dc:	10003f26 	beq	r2,zero,200d4dc <__divdf3+0x2d8>
 200d3e0:	80015e26 	beq	r16,zero,200d95c <__divdf3+0x758>
 200d3e4:	8009883a 	mov	r4,r16
 200d3e8:	d9800215 	stw	r6,8(sp)
 200d3ec:	d9c00515 	stw	r7,20(sp)
 200d3f0:	da000415 	stw	r8,16(sp)
 200d3f4:	200f1980 	call	200f198 <__clzsi2>
 200d3f8:	d9800217 	ldw	r6,8(sp)
 200d3fc:	d9c00517 	ldw	r7,20(sp)
 200d400:	da000417 	ldw	r8,16(sp)
 200d404:	113ffd44 	addi	r4,r2,-11
 200d408:	00c00704 	movi	r3,28
 200d40c:	19014f16 	blt	r3,r4,200d94c <__divdf3+0x748>
 200d410:	00c00744 	movi	r3,29
 200d414:	157ffe04 	addi	r21,r2,-8
 200d418:	1907c83a 	sub	r3,r3,r4
 200d41c:	8560983a 	sll	r16,r16,r21
 200d420:	88c6d83a 	srl	r3,r17,r3
 200d424:	8d6a983a 	sll	r21,r17,r21
 200d428:	1c20b03a 	or	r16,r3,r16
 200d42c:	1080fcc4 	addi	r2,r2,1011
 200d430:	00a5c83a 	sub	r18,zero,r2
 200d434:	0013883a 	mov	r9,zero
 200d438:	000b883a 	mov	r5,zero
 200d43c:	003f8f06 	br	200d27c <__alt_data_end+0xff00d27c>
 200d440:	3444b03a 	or	r2,r6,r17
 200d444:	1000231e 	bne	r2,zero,200d4d4 <__divdf3+0x2d0>
 200d448:	0023883a 	mov	r17,zero
 200d44c:	0029883a 	mov	r20,zero
 200d450:	01c00084 	movi	r7,2
 200d454:	003f9b06 	br	200d2c4 <__alt_data_end+0xff00d2c4>
 200d458:	3444b03a 	or	r2,r6,r17
 200d45c:	10001926 	beq	r2,zero,200d4c4 <__divdf3+0x2c0>
 200d460:	88014b26 	beq	r17,zero,200d990 <__divdf3+0x78c>
 200d464:	8809883a 	mov	r4,r17
 200d468:	d9400115 	stw	r5,4(sp)
 200d46c:	d9800215 	stw	r6,8(sp)
 200d470:	da000415 	stw	r8,16(sp)
 200d474:	da400315 	stw	r9,12(sp)
 200d478:	200f1980 	call	200f198 <__clzsi2>
 200d47c:	d9400117 	ldw	r5,4(sp)
 200d480:	d9800217 	ldw	r6,8(sp)
 200d484:	da000417 	ldw	r8,16(sp)
 200d488:	da400317 	ldw	r9,12(sp)
 200d48c:	113ffd44 	addi	r4,r2,-11
 200d490:	00c00704 	movi	r3,28
 200d494:	19013a16 	blt	r3,r4,200d980 <__divdf3+0x77c>
 200d498:	00c00744 	movi	r3,29
 200d49c:	153ffe04 	addi	r20,r2,-8
 200d4a0:	1907c83a 	sub	r3,r3,r4
 200d4a4:	8d22983a 	sll	r17,r17,r20
 200d4a8:	30c6d83a 	srl	r3,r6,r3
 200d4ac:	3528983a 	sll	r20,r6,r20
 200d4b0:	1c62b03a 	or	r17,r3,r17
 200d4b4:	1080fcc4 	addi	r2,r2,1011
 200d4b8:	0087c83a 	sub	r3,zero,r2
 200d4bc:	000f883a 	mov	r7,zero
 200d4c0:	003f8006 	br	200d2c4 <__alt_data_end+0xff00d2c4>
 200d4c4:	0023883a 	mov	r17,zero
 200d4c8:	0029883a 	mov	r20,zero
 200d4cc:	01c00044 	movi	r7,1
 200d4d0:	003f7c06 	br	200d2c4 <__alt_data_end+0xff00d2c4>
 200d4d4:	01c000c4 	movi	r7,3
 200d4d8:	003f7a06 	br	200d2c4 <__alt_data_end+0xff00d2c4>
 200d4dc:	02400104 	movi	r9,4
 200d4e0:	0021883a 	mov	r16,zero
 200d4e4:	002b883a 	mov	r21,zero
 200d4e8:	01400044 	movi	r5,1
 200d4ec:	003f6306 	br	200d27c <__alt_data_end+0xff00d27c>
 200d4f0:	02400304 	movi	r9,12
 200d4f4:	014000c4 	movi	r5,3
 200d4f8:	003f6006 	br	200d27c <__alt_data_end+0xff00d27c>
 200d4fc:	04000434 	movhi	r16,16
 200d500:	0009883a 	mov	r4,zero
 200d504:	843fffc4 	addi	r16,r16,-1
 200d508:	057fffc4 	movi	r21,-1
 200d50c:	0081ffc4 	movi	r2,2047
 200d510:	003f9b06 	br	200d380 <__alt_data_end+0xff00d380>
 200d514:	00c00044 	movi	r3,1
 200d518:	1887c83a 	sub	r3,r3,r2
 200d51c:	01000e04 	movi	r4,56
 200d520:	20c1530e 	bge	r4,r3,200da70 <__divdf3+0x86c>
 200d524:	9900004c 	andi	r4,r19,1
 200d528:	0005883a 	mov	r2,zero
 200d52c:	0021883a 	mov	r16,zero
 200d530:	002b883a 	mov	r21,zero
 200d534:	003f9206 	br	200d380 <__alt_data_end+0xff00d380>
 200d538:	8c012e36 	bltu	r17,r16,200d9f4 <__divdf3+0x7f0>
 200d53c:	84412c26 	beq	r16,r17,200d9f0 <__divdf3+0x7ec>
 200d540:	a82f883a 	mov	r23,r21
 200d544:	18ffffc4 	addi	r3,r3,-1
 200d548:	002b883a 	mov	r21,zero
 200d54c:	a004d63a 	srli	r2,r20,24
 200d550:	8822923a 	slli	r17,r17,8
 200d554:	a028923a 	slli	r20,r20,8
 200d558:	8009883a 	mov	r4,r16
 200d55c:	88acb03a 	or	r22,r17,r2
 200d560:	dd000015 	stw	r20,0(sp)
 200d564:	b028d43a 	srli	r20,r22,16
 200d568:	d8c00215 	stw	r3,8(sp)
 200d56c:	b4bfffcc 	andi	r18,r22,65535
 200d570:	a00b883a 	mov	r5,r20
 200d574:	200c8740 	call	200c874 <__udivsi3>
 200d578:	100b883a 	mov	r5,r2
 200d57c:	9009883a 	mov	r4,r18
 200d580:	1023883a 	mov	r17,r2
 200d584:	200c9300 	call	200c930 <__mulsi3>
 200d588:	8009883a 	mov	r4,r16
 200d58c:	a00b883a 	mov	r5,r20
 200d590:	1039883a 	mov	fp,r2
 200d594:	200c8d80 	call	200c8d8 <__umodsi3>
 200d598:	1004943a 	slli	r2,r2,16
 200d59c:	b808d43a 	srli	r4,r23,16
 200d5a0:	d8c00217 	ldw	r3,8(sp)
 200d5a4:	2084b03a 	or	r2,r4,r2
 200d5a8:	1700062e 	bgeu	r2,fp,200d5c4 <__divdf3+0x3c0>
 200d5ac:	1585883a 	add	r2,r2,r22
 200d5b0:	893fffc4 	addi	r4,r17,-1
 200d5b4:	15811d36 	bltu	r2,r22,200da2c <__divdf3+0x828>
 200d5b8:	17011c2e 	bgeu	r2,fp,200da2c <__divdf3+0x828>
 200d5bc:	8c7fff84 	addi	r17,r17,-2
 200d5c0:	1585883a 	add	r2,r2,r22
 200d5c4:	1739c83a 	sub	fp,r2,fp
 200d5c8:	a00b883a 	mov	r5,r20
 200d5cc:	e009883a 	mov	r4,fp
 200d5d0:	d8c00215 	stw	r3,8(sp)
 200d5d4:	200c8740 	call	200c874 <__udivsi3>
 200d5d8:	100b883a 	mov	r5,r2
 200d5dc:	9009883a 	mov	r4,r18
 200d5e0:	1021883a 	mov	r16,r2
 200d5e4:	200c9300 	call	200c930 <__mulsi3>
 200d5e8:	a00b883a 	mov	r5,r20
 200d5ec:	e009883a 	mov	r4,fp
 200d5f0:	d8800415 	stw	r2,16(sp)
 200d5f4:	200c8d80 	call	200c8d8 <__umodsi3>
 200d5f8:	1004943a 	slli	r2,r2,16
 200d5fc:	da000417 	ldw	r8,16(sp)
 200d600:	bdffffcc 	andi	r23,r23,65535
 200d604:	b884b03a 	or	r2,r23,r2
 200d608:	d8c00217 	ldw	r3,8(sp)
 200d60c:	1200062e 	bgeu	r2,r8,200d628 <__divdf3+0x424>
 200d610:	1585883a 	add	r2,r2,r22
 200d614:	813fffc4 	addi	r4,r16,-1
 200d618:	15810236 	bltu	r2,r22,200da24 <__divdf3+0x820>
 200d61c:	1201012e 	bgeu	r2,r8,200da24 <__divdf3+0x820>
 200d620:	843fff84 	addi	r16,r16,-2
 200d624:	1585883a 	add	r2,r2,r22
 200d628:	8822943a 	slli	r17,r17,16
 200d62c:	d9800017 	ldw	r6,0(sp)
 200d630:	1211c83a 	sub	r8,r2,r8
 200d634:	8c22b03a 	or	r17,r17,r16
 200d638:	373fffcc 	andi	fp,r6,65535
 200d63c:	8abfffcc 	andi	r10,r17,65535
 200d640:	8820d43a 	srli	r16,r17,16
 200d644:	5009883a 	mov	r4,r10
 200d648:	e00b883a 	mov	r5,fp
 200d64c:	302ed43a 	srli	r23,r6,16
 200d650:	d8c00215 	stw	r3,8(sp)
 200d654:	da000415 	stw	r8,16(sp)
 200d658:	da800115 	stw	r10,4(sp)
 200d65c:	200c9300 	call	200c930 <__mulsi3>
 200d660:	800b883a 	mov	r5,r16
 200d664:	e009883a 	mov	r4,fp
 200d668:	d8800515 	stw	r2,20(sp)
 200d66c:	200c9300 	call	200c930 <__mulsi3>
 200d670:	8009883a 	mov	r4,r16
 200d674:	b80b883a 	mov	r5,r23
 200d678:	d8800315 	stw	r2,12(sp)
 200d67c:	200c9300 	call	200c930 <__mulsi3>
 200d680:	da800117 	ldw	r10,4(sp)
 200d684:	b80b883a 	mov	r5,r23
 200d688:	1021883a 	mov	r16,r2
 200d68c:	5009883a 	mov	r4,r10
 200d690:	200c9300 	call	200c930 <__mulsi3>
 200d694:	d9c00517 	ldw	r7,20(sp)
 200d698:	da400317 	ldw	r9,12(sp)
 200d69c:	d8c00217 	ldw	r3,8(sp)
 200d6a0:	3808d43a 	srli	r4,r7,16
 200d6a4:	1245883a 	add	r2,r2,r9
 200d6a8:	da000417 	ldw	r8,16(sp)
 200d6ac:	2085883a 	add	r2,r4,r2
 200d6b0:	1240022e 	bgeu	r2,r9,200d6bc <__divdf3+0x4b8>
 200d6b4:	01000074 	movhi	r4,1
 200d6b8:	8121883a 	add	r16,r16,r4
 200d6bc:	1008d43a 	srli	r4,r2,16
 200d6c0:	1004943a 	slli	r2,r2,16
 200d6c4:	39ffffcc 	andi	r7,r7,65535
 200d6c8:	2409883a 	add	r4,r4,r16
 200d6cc:	11c5883a 	add	r2,r2,r7
 200d6d0:	4100bb36 	bltu	r8,r4,200d9c0 <__divdf3+0x7bc>
 200d6d4:	4100d726 	beq	r8,r4,200da34 <__divdf3+0x830>
 200d6d8:	4109c83a 	sub	r4,r8,r4
 200d6dc:	a8a1c83a 	sub	r16,r21,r2
 200d6e0:	ac2b803a 	cmpltu	r21,r21,r16
 200d6e4:	256bc83a 	sub	r21,r4,r21
 200d6e8:	b540d926 	beq	r22,r21,200da50 <__divdf3+0x84c>
 200d6ec:	a00b883a 	mov	r5,r20
 200d6f0:	a809883a 	mov	r4,r21
 200d6f4:	d8c00215 	stw	r3,8(sp)
 200d6f8:	200c8740 	call	200c874 <__udivsi3>
 200d6fc:	100b883a 	mov	r5,r2
 200d700:	9009883a 	mov	r4,r18
 200d704:	d8800515 	stw	r2,20(sp)
 200d708:	200c9300 	call	200c930 <__mulsi3>
 200d70c:	a809883a 	mov	r4,r21
 200d710:	a00b883a 	mov	r5,r20
 200d714:	d8800415 	stw	r2,16(sp)
 200d718:	200c8d80 	call	200c8d8 <__umodsi3>
 200d71c:	1004943a 	slli	r2,r2,16
 200d720:	8008d43a 	srli	r4,r16,16
 200d724:	da000417 	ldw	r8,16(sp)
 200d728:	d8c00217 	ldw	r3,8(sp)
 200d72c:	2084b03a 	or	r2,r4,r2
 200d730:	d9c00517 	ldw	r7,20(sp)
 200d734:	1200062e 	bgeu	r2,r8,200d750 <__divdf3+0x54c>
 200d738:	1585883a 	add	r2,r2,r22
 200d73c:	393fffc4 	addi	r4,r7,-1
 200d740:	1580c536 	bltu	r2,r22,200da58 <__divdf3+0x854>
 200d744:	1200c42e 	bgeu	r2,r8,200da58 <__divdf3+0x854>
 200d748:	39ffff84 	addi	r7,r7,-2
 200d74c:	1585883a 	add	r2,r2,r22
 200d750:	122bc83a 	sub	r21,r2,r8
 200d754:	a00b883a 	mov	r5,r20
 200d758:	a809883a 	mov	r4,r21
 200d75c:	d8c00215 	stw	r3,8(sp)
 200d760:	d9c00515 	stw	r7,20(sp)
 200d764:	200c8740 	call	200c874 <__udivsi3>
 200d768:	9009883a 	mov	r4,r18
 200d76c:	100b883a 	mov	r5,r2
 200d770:	d8800415 	stw	r2,16(sp)
 200d774:	200c9300 	call	200c930 <__mulsi3>
 200d778:	a809883a 	mov	r4,r21
 200d77c:	a00b883a 	mov	r5,r20
 200d780:	1025883a 	mov	r18,r2
 200d784:	200c8d80 	call	200c8d8 <__umodsi3>
 200d788:	1004943a 	slli	r2,r2,16
 200d78c:	813fffcc 	andi	r4,r16,65535
 200d790:	d8c00217 	ldw	r3,8(sp)
 200d794:	20a0b03a 	or	r16,r4,r2
 200d798:	d9c00517 	ldw	r7,20(sp)
 200d79c:	da000417 	ldw	r8,16(sp)
 200d7a0:	8480062e 	bgeu	r16,r18,200d7bc <__divdf3+0x5b8>
 200d7a4:	85a1883a 	add	r16,r16,r22
 200d7a8:	40bfffc4 	addi	r2,r8,-1
 200d7ac:	8580ac36 	bltu	r16,r22,200da60 <__divdf3+0x85c>
 200d7b0:	8480ab2e 	bgeu	r16,r18,200da60 <__divdf3+0x85c>
 200d7b4:	423fff84 	addi	r8,r8,-2
 200d7b8:	85a1883a 	add	r16,r16,r22
 200d7bc:	3804943a 	slli	r2,r7,16
 200d7c0:	84a1c83a 	sub	r16,r16,r18
 200d7c4:	e009883a 	mov	r4,fp
 200d7c8:	1228b03a 	or	r20,r2,r8
 200d7cc:	a1ffffcc 	andi	r7,r20,65535
 200d7d0:	a024d43a 	srli	r18,r20,16
 200d7d4:	380b883a 	mov	r5,r7
 200d7d8:	d8c00215 	stw	r3,8(sp)
 200d7dc:	d9c00515 	stw	r7,20(sp)
 200d7e0:	200c9300 	call	200c930 <__mulsi3>
 200d7e4:	900b883a 	mov	r5,r18
 200d7e8:	e009883a 	mov	r4,fp
 200d7ec:	102b883a 	mov	r21,r2
 200d7f0:	200c9300 	call	200c930 <__mulsi3>
 200d7f4:	900b883a 	mov	r5,r18
 200d7f8:	b809883a 	mov	r4,r23
 200d7fc:	1039883a 	mov	fp,r2
 200d800:	200c9300 	call	200c930 <__mulsi3>
 200d804:	d9c00517 	ldw	r7,20(sp)
 200d808:	b80b883a 	mov	r5,r23
 200d80c:	1025883a 	mov	r18,r2
 200d810:	3809883a 	mov	r4,r7
 200d814:	200c9300 	call	200c930 <__mulsi3>
 200d818:	a808d43a 	srli	r4,r21,16
 200d81c:	1705883a 	add	r2,r2,fp
 200d820:	d8c00217 	ldw	r3,8(sp)
 200d824:	2085883a 	add	r2,r4,r2
 200d828:	1700022e 	bgeu	r2,fp,200d834 <__divdf3+0x630>
 200d82c:	01000074 	movhi	r4,1
 200d830:	9125883a 	add	r18,r18,r4
 200d834:	1008d43a 	srli	r4,r2,16
 200d838:	1004943a 	slli	r2,r2,16
 200d83c:	ad7fffcc 	andi	r21,r21,65535
 200d840:	2489883a 	add	r4,r4,r18
 200d844:	1545883a 	add	r2,r2,r21
 200d848:	81003836 	bltu	r16,r4,200d92c <__divdf3+0x728>
 200d84c:	81003626 	beq	r16,r4,200d928 <__divdf3+0x724>
 200d850:	a5000054 	ori	r20,r20,1
 200d854:	1880ffc4 	addi	r2,r3,1023
 200d858:	00bf2e0e 	bge	zero,r2,200d514 <__alt_data_end+0xff00d514>
 200d85c:	a10001cc 	andi	r4,r20,7
 200d860:	20000726 	beq	r4,zero,200d880 <__divdf3+0x67c>
 200d864:	a10003cc 	andi	r4,r20,15
 200d868:	01400104 	movi	r5,4
 200d86c:	21400426 	beq	r4,r5,200d880 <__divdf3+0x67c>
 200d870:	a149883a 	add	r4,r20,r5
 200d874:	2529803a 	cmpltu	r20,r4,r20
 200d878:	8d23883a 	add	r17,r17,r20
 200d87c:	2029883a 	mov	r20,r4
 200d880:	8900402c 	andhi	r4,r17,256
 200d884:	20000426 	beq	r4,zero,200d898 <__divdf3+0x694>
 200d888:	18810004 	addi	r2,r3,1024
 200d88c:	00ffc034 	movhi	r3,65280
 200d890:	18ffffc4 	addi	r3,r3,-1
 200d894:	88e2703a 	and	r17,r17,r3
 200d898:	00c1ff84 	movi	r3,2046
 200d89c:	18beb416 	blt	r3,r2,200d370 <__alt_data_end+0xff00d370>
 200d8a0:	a028d0fa 	srli	r20,r20,3
 200d8a4:	882a977a 	slli	r21,r17,29
 200d8a8:	8820927a 	slli	r16,r17,9
 200d8ac:	1081ffcc 	andi	r2,r2,2047
 200d8b0:	ad2ab03a 	or	r21,r21,r20
 200d8b4:	8020d33a 	srli	r16,r16,12
 200d8b8:	9900004c 	andi	r4,r19,1
 200d8bc:	003eb006 	br	200d380 <__alt_data_end+0xff00d380>
 200d8c0:	8080022c 	andhi	r2,r16,8
 200d8c4:	10001226 	beq	r2,zero,200d910 <__divdf3+0x70c>
 200d8c8:	8880022c 	andhi	r2,r17,8
 200d8cc:	1000101e 	bne	r2,zero,200d910 <__divdf3+0x70c>
 200d8d0:	00800434 	movhi	r2,16
 200d8d4:	8c000234 	orhi	r16,r17,8
 200d8d8:	10bfffc4 	addi	r2,r2,-1
 200d8dc:	b809883a 	mov	r4,r23
 200d8e0:	80a0703a 	and	r16,r16,r2
 200d8e4:	a02b883a 	mov	r21,r20
 200d8e8:	003f0806 	br	200d50c <__alt_data_end+0xff00d50c>
 200d8ec:	008000c4 	movi	r2,3
 200d8f0:	3880b126 	beq	r7,r2,200dbb8 <__divdf3+0x9b4>
 200d8f4:	00800044 	movi	r2,1
 200d8f8:	38805b1e 	bne	r7,r2,200da68 <__divdf3+0x864>
 200d8fc:	e009883a 	mov	r4,fp
 200d900:	0005883a 	mov	r2,zero
 200d904:	0021883a 	mov	r16,zero
 200d908:	002b883a 	mov	r21,zero
 200d90c:	003e9c06 	br	200d380 <__alt_data_end+0xff00d380>
 200d910:	00800434 	movhi	r2,16
 200d914:	84000234 	orhi	r16,r16,8
 200d918:	10bfffc4 	addi	r2,r2,-1
 200d91c:	b009883a 	mov	r4,r22
 200d920:	80a0703a 	and	r16,r16,r2
 200d924:	003ef906 	br	200d50c <__alt_data_end+0xff00d50c>
 200d928:	103fca26 	beq	r2,zero,200d854 <__alt_data_end+0xff00d854>
 200d92c:	b421883a 	add	r16,r22,r16
 200d930:	a17fffc4 	addi	r5,r20,-1
 200d934:	8580422e 	bgeu	r16,r22,200da40 <__divdf3+0x83c>
 200d938:	2829883a 	mov	r20,r5
 200d93c:	813fc41e 	bne	r16,r4,200d850 <__alt_data_end+0xff00d850>
 200d940:	d9800017 	ldw	r6,0(sp)
 200d944:	30bfc21e 	bne	r6,r2,200d850 <__alt_data_end+0xff00d850>
 200d948:	003fc206 	br	200d854 <__alt_data_end+0xff00d854>
 200d94c:	143ff604 	addi	r16,r2,-40
 200d950:	8c20983a 	sll	r16,r17,r16
 200d954:	002b883a 	mov	r21,zero
 200d958:	003eb406 	br	200d42c <__alt_data_end+0xff00d42c>
 200d95c:	d9800215 	stw	r6,8(sp)
 200d960:	d9c00515 	stw	r7,20(sp)
 200d964:	da000415 	stw	r8,16(sp)
 200d968:	200f1980 	call	200f198 <__clzsi2>
 200d96c:	10800804 	addi	r2,r2,32
 200d970:	da000417 	ldw	r8,16(sp)
 200d974:	d9c00517 	ldw	r7,20(sp)
 200d978:	d9800217 	ldw	r6,8(sp)
 200d97c:	003ea106 	br	200d404 <__alt_data_end+0xff00d404>
 200d980:	147ff604 	addi	r17,r2,-40
 200d984:	3462983a 	sll	r17,r6,r17
 200d988:	0029883a 	mov	r20,zero
 200d98c:	003ec906 	br	200d4b4 <__alt_data_end+0xff00d4b4>
 200d990:	3009883a 	mov	r4,r6
 200d994:	d9400115 	stw	r5,4(sp)
 200d998:	d9800215 	stw	r6,8(sp)
 200d99c:	da000415 	stw	r8,16(sp)
 200d9a0:	da400315 	stw	r9,12(sp)
 200d9a4:	200f1980 	call	200f198 <__clzsi2>
 200d9a8:	10800804 	addi	r2,r2,32
 200d9ac:	da400317 	ldw	r9,12(sp)
 200d9b0:	da000417 	ldw	r8,16(sp)
 200d9b4:	d9800217 	ldw	r6,8(sp)
 200d9b8:	d9400117 	ldw	r5,4(sp)
 200d9bc:	003eb306 	br	200d48c <__alt_data_end+0xff00d48c>
 200d9c0:	d9800017 	ldw	r6,0(sp)
 200d9c4:	a9ab883a 	add	r21,r21,r6
 200d9c8:	a98b803a 	cmpltu	r5,r21,r6
 200d9cc:	2d8b883a 	add	r5,r5,r22
 200d9d0:	2a11883a 	add	r8,r5,r8
 200d9d4:	897fffc4 	addi	r5,r17,-1
 200d9d8:	b2000c2e 	bgeu	r22,r8,200da0c <__divdf3+0x808>
 200d9dc:	41003f36 	bltu	r8,r4,200dadc <__divdf3+0x8d8>
 200d9e0:	22006c26 	beq	r4,r8,200db94 <__divdf3+0x990>
 200d9e4:	4109c83a 	sub	r4,r8,r4
 200d9e8:	2823883a 	mov	r17,r5
 200d9ec:	003f3b06 	br	200d6dc <__alt_data_end+0xff00d6dc>
 200d9f0:	ad3ed336 	bltu	r21,r20,200d540 <__alt_data_end+0xff00d540>
 200d9f4:	a804d07a 	srli	r2,r21,1
 200d9f8:	802e97fa 	slli	r23,r16,31
 200d9fc:	a82a97fa 	slli	r21,r21,31
 200da00:	8020d07a 	srli	r16,r16,1
 200da04:	b8aeb03a 	or	r23,r23,r2
 200da08:	003ed006 	br	200d54c <__alt_data_end+0xff00d54c>
 200da0c:	b23ff51e 	bne	r22,r8,200d9e4 <__alt_data_end+0xff00d9e4>
 200da10:	d9800017 	ldw	r6,0(sp)
 200da14:	a9bff12e 	bgeu	r21,r6,200d9dc <__alt_data_end+0xff00d9dc>
 200da18:	b109c83a 	sub	r4,r22,r4
 200da1c:	2823883a 	mov	r17,r5
 200da20:	003f2e06 	br	200d6dc <__alt_data_end+0xff00d6dc>
 200da24:	2021883a 	mov	r16,r4
 200da28:	003eff06 	br	200d628 <__alt_data_end+0xff00d628>
 200da2c:	2023883a 	mov	r17,r4
 200da30:	003ee406 	br	200d5c4 <__alt_data_end+0xff00d5c4>
 200da34:	a8bfe236 	bltu	r21,r2,200d9c0 <__alt_data_end+0xff00d9c0>
 200da38:	0009883a 	mov	r4,zero
 200da3c:	003f2706 	br	200d6dc <__alt_data_end+0xff00d6dc>
 200da40:	81002d36 	bltu	r16,r4,200daf8 <__divdf3+0x8f4>
 200da44:	24005626 	beq	r4,r16,200dba0 <__divdf3+0x99c>
 200da48:	2829883a 	mov	r20,r5
 200da4c:	003f8006 	br	200d850 <__alt_data_end+0xff00d850>
 200da50:	053fffc4 	movi	r20,-1
 200da54:	003f7f06 	br	200d854 <__alt_data_end+0xff00d854>
 200da58:	200f883a 	mov	r7,r4
 200da5c:	003f3c06 	br	200d750 <__alt_data_end+0xff00d750>
 200da60:	1011883a 	mov	r8,r2
 200da64:	003f5506 	br	200d7bc <__alt_data_end+0xff00d7bc>
 200da68:	e027883a 	mov	r19,fp
 200da6c:	003f7906 	br	200d854 <__alt_data_end+0xff00d854>
 200da70:	010007c4 	movi	r4,31
 200da74:	20c02816 	blt	r4,r3,200db18 <__divdf3+0x914>
 200da78:	00800804 	movi	r2,32
 200da7c:	10c5c83a 	sub	r2,r2,r3
 200da80:	888a983a 	sll	r5,r17,r2
 200da84:	a0c8d83a 	srl	r4,r20,r3
 200da88:	a084983a 	sll	r2,r20,r2
 200da8c:	88e2d83a 	srl	r17,r17,r3
 200da90:	2906b03a 	or	r3,r5,r4
 200da94:	1004c03a 	cmpne	r2,r2,zero
 200da98:	1886b03a 	or	r3,r3,r2
 200da9c:	188001cc 	andi	r2,r3,7
 200daa0:	10000726 	beq	r2,zero,200dac0 <__divdf3+0x8bc>
 200daa4:	188003cc 	andi	r2,r3,15
 200daa8:	01000104 	movi	r4,4
 200daac:	11000426 	beq	r2,r4,200dac0 <__divdf3+0x8bc>
 200dab0:	1805883a 	mov	r2,r3
 200dab4:	10c00104 	addi	r3,r2,4
 200dab8:	1885803a 	cmpltu	r2,r3,r2
 200dabc:	88a3883a 	add	r17,r17,r2
 200dac0:	8880202c 	andhi	r2,r17,128
 200dac4:	10002926 	beq	r2,zero,200db6c <__divdf3+0x968>
 200dac8:	9900004c 	andi	r4,r19,1
 200dacc:	00800044 	movi	r2,1
 200dad0:	0021883a 	mov	r16,zero
 200dad4:	002b883a 	mov	r21,zero
 200dad8:	003e2906 	br	200d380 <__alt_data_end+0xff00d380>
 200dadc:	d9800017 	ldw	r6,0(sp)
 200dae0:	8c7fff84 	addi	r17,r17,-2
 200dae4:	a9ab883a 	add	r21,r21,r6
 200dae8:	a98b803a 	cmpltu	r5,r21,r6
 200daec:	2d8b883a 	add	r5,r5,r22
 200daf0:	2a11883a 	add	r8,r5,r8
 200daf4:	003ef806 	br	200d6d8 <__alt_data_end+0xff00d6d8>
 200daf8:	d9800017 	ldw	r6,0(sp)
 200dafc:	318f883a 	add	r7,r6,r6
 200db00:	398b803a 	cmpltu	r5,r7,r6
 200db04:	2d8d883a 	add	r6,r5,r22
 200db08:	81a1883a 	add	r16,r16,r6
 200db0c:	a17fff84 	addi	r5,r20,-2
 200db10:	d9c00015 	stw	r7,0(sp)
 200db14:	003f8806 	br	200d938 <__alt_data_end+0xff00d938>
 200db18:	013ff844 	movi	r4,-31
 200db1c:	2085c83a 	sub	r2,r4,r2
 200db20:	8888d83a 	srl	r4,r17,r2
 200db24:	00800804 	movi	r2,32
 200db28:	18802126 	beq	r3,r2,200dbb0 <__divdf3+0x9ac>
 200db2c:	04001004 	movi	r16,64
 200db30:	80c7c83a 	sub	r3,r16,r3
 200db34:	88e0983a 	sll	r16,r17,r3
 200db38:	8504b03a 	or	r2,r16,r20
 200db3c:	1004c03a 	cmpne	r2,r2,zero
 200db40:	2084b03a 	or	r2,r4,r2
 200db44:	144001cc 	andi	r17,r2,7
 200db48:	88000d1e 	bne	r17,zero,200db80 <__divdf3+0x97c>
 200db4c:	0021883a 	mov	r16,zero
 200db50:	102ad0fa 	srli	r21,r2,3
 200db54:	9900004c 	andi	r4,r19,1
 200db58:	0005883a 	mov	r2,zero
 200db5c:	ac6ab03a 	or	r21,r21,r17
 200db60:	003e0706 	br	200d380 <__alt_data_end+0xff00d380>
 200db64:	1007883a 	mov	r3,r2
 200db68:	0023883a 	mov	r17,zero
 200db6c:	8820927a 	slli	r16,r17,9
 200db70:	1805883a 	mov	r2,r3
 200db74:	8822977a 	slli	r17,r17,29
 200db78:	8020d33a 	srli	r16,r16,12
 200db7c:	003ff406 	br	200db50 <__alt_data_end+0xff00db50>
 200db80:	10c003cc 	andi	r3,r2,15
 200db84:	01000104 	movi	r4,4
 200db88:	193ff626 	beq	r3,r4,200db64 <__alt_data_end+0xff00db64>
 200db8c:	0023883a 	mov	r17,zero
 200db90:	003fc806 	br	200dab4 <__alt_data_end+0xff00dab4>
 200db94:	a8bfd136 	bltu	r21,r2,200dadc <__alt_data_end+0xff00dadc>
 200db98:	2823883a 	mov	r17,r5
 200db9c:	003fa606 	br	200da38 <__alt_data_end+0xff00da38>
 200dba0:	d9800017 	ldw	r6,0(sp)
 200dba4:	30bfd436 	bltu	r6,r2,200daf8 <__alt_data_end+0xff00daf8>
 200dba8:	2829883a 	mov	r20,r5
 200dbac:	003f6406 	br	200d940 <__alt_data_end+0xff00d940>
 200dbb0:	0021883a 	mov	r16,zero
 200dbb4:	003fe006 	br	200db38 <__alt_data_end+0xff00db38>
 200dbb8:	00800434 	movhi	r2,16
 200dbbc:	8c000234 	orhi	r16,r17,8
 200dbc0:	10bfffc4 	addi	r2,r2,-1
 200dbc4:	e009883a 	mov	r4,fp
 200dbc8:	80a0703a 	and	r16,r16,r2
 200dbcc:	a02b883a 	mov	r21,r20
 200dbd0:	003e4e06 	br	200d50c <__alt_data_end+0xff00d50c>

0200dbd4 <__eqdf2>:
 200dbd4:	2804d53a 	srli	r2,r5,20
 200dbd8:	3806d53a 	srli	r3,r7,20
 200dbdc:	02000434 	movhi	r8,16
 200dbe0:	423fffc4 	addi	r8,r8,-1
 200dbe4:	1081ffcc 	andi	r2,r2,2047
 200dbe8:	0281ffc4 	movi	r10,2047
 200dbec:	2a12703a 	and	r9,r5,r8
 200dbf0:	18c1ffcc 	andi	r3,r3,2047
 200dbf4:	3a10703a 	and	r8,r7,r8
 200dbf8:	280ad7fa 	srli	r5,r5,31
 200dbfc:	380ed7fa 	srli	r7,r7,31
 200dc00:	12801026 	beq	r2,r10,200dc44 <__eqdf2+0x70>
 200dc04:	0281ffc4 	movi	r10,2047
 200dc08:	1a800a26 	beq	r3,r10,200dc34 <__eqdf2+0x60>
 200dc0c:	10c00226 	beq	r2,r3,200dc18 <__eqdf2+0x44>
 200dc10:	00800044 	movi	r2,1
 200dc14:	f800283a 	ret
 200dc18:	4a3ffd1e 	bne	r9,r8,200dc10 <__alt_data_end+0xff00dc10>
 200dc1c:	21bffc1e 	bne	r4,r6,200dc10 <__alt_data_end+0xff00dc10>
 200dc20:	29c00c26 	beq	r5,r7,200dc54 <__eqdf2+0x80>
 200dc24:	103ffa1e 	bne	r2,zero,200dc10 <__alt_data_end+0xff00dc10>
 200dc28:	2244b03a 	or	r2,r4,r9
 200dc2c:	1004c03a 	cmpne	r2,r2,zero
 200dc30:	f800283a 	ret
 200dc34:	3214b03a 	or	r10,r6,r8
 200dc38:	503ff426 	beq	r10,zero,200dc0c <__alt_data_end+0xff00dc0c>
 200dc3c:	00800044 	movi	r2,1
 200dc40:	f800283a 	ret
 200dc44:	2254b03a 	or	r10,r4,r9
 200dc48:	503fee26 	beq	r10,zero,200dc04 <__alt_data_end+0xff00dc04>
 200dc4c:	00800044 	movi	r2,1
 200dc50:	f800283a 	ret
 200dc54:	0005883a 	mov	r2,zero
 200dc58:	f800283a 	ret

0200dc5c <__gedf2>:
 200dc5c:	2804d53a 	srli	r2,r5,20
 200dc60:	3806d53a 	srli	r3,r7,20
 200dc64:	02000434 	movhi	r8,16
 200dc68:	423fffc4 	addi	r8,r8,-1
 200dc6c:	1081ffcc 	andi	r2,r2,2047
 200dc70:	0241ffc4 	movi	r9,2047
 200dc74:	2a14703a 	and	r10,r5,r8
 200dc78:	18c1ffcc 	andi	r3,r3,2047
 200dc7c:	3a10703a 	and	r8,r7,r8
 200dc80:	280ad7fa 	srli	r5,r5,31
 200dc84:	380ed7fa 	srli	r7,r7,31
 200dc88:	12401d26 	beq	r2,r9,200dd00 <__gedf2+0xa4>
 200dc8c:	0241ffc4 	movi	r9,2047
 200dc90:	1a401226 	beq	r3,r9,200dcdc <__gedf2+0x80>
 200dc94:	1000081e 	bne	r2,zero,200dcb8 <__gedf2+0x5c>
 200dc98:	2296b03a 	or	r11,r4,r10
 200dc9c:	5813003a 	cmpeq	r9,r11,zero
 200dca0:	1800091e 	bne	r3,zero,200dcc8 <__gedf2+0x6c>
 200dca4:	3218b03a 	or	r12,r6,r8
 200dca8:	6000071e 	bne	r12,zero,200dcc8 <__gedf2+0x6c>
 200dcac:	0005883a 	mov	r2,zero
 200dcb0:	5800101e 	bne	r11,zero,200dcf4 <__gedf2+0x98>
 200dcb4:	f800283a 	ret
 200dcb8:	18000c1e 	bne	r3,zero,200dcec <__gedf2+0x90>
 200dcbc:	3212b03a 	or	r9,r6,r8
 200dcc0:	48000c26 	beq	r9,zero,200dcf4 <__gedf2+0x98>
 200dcc4:	0013883a 	mov	r9,zero
 200dcc8:	39c03fcc 	andi	r7,r7,255
 200dccc:	48000826 	beq	r9,zero,200dcf0 <__gedf2+0x94>
 200dcd0:	38000926 	beq	r7,zero,200dcf8 <__gedf2+0x9c>
 200dcd4:	00800044 	movi	r2,1
 200dcd8:	f800283a 	ret
 200dcdc:	3212b03a 	or	r9,r6,r8
 200dce0:	483fec26 	beq	r9,zero,200dc94 <__alt_data_end+0xff00dc94>
 200dce4:	00bfff84 	movi	r2,-2
 200dce8:	f800283a 	ret
 200dcec:	39c03fcc 	andi	r7,r7,255
 200dcf0:	29c00626 	beq	r5,r7,200dd0c <__gedf2+0xb0>
 200dcf4:	283ff726 	beq	r5,zero,200dcd4 <__alt_data_end+0xff00dcd4>
 200dcf8:	00bfffc4 	movi	r2,-1
 200dcfc:	f800283a 	ret
 200dd00:	2292b03a 	or	r9,r4,r10
 200dd04:	483fe126 	beq	r9,zero,200dc8c <__alt_data_end+0xff00dc8c>
 200dd08:	003ff606 	br	200dce4 <__alt_data_end+0xff00dce4>
 200dd0c:	18bff916 	blt	r3,r2,200dcf4 <__alt_data_end+0xff00dcf4>
 200dd10:	10c00316 	blt	r2,r3,200dd20 <__gedf2+0xc4>
 200dd14:	42bff736 	bltu	r8,r10,200dcf4 <__alt_data_end+0xff00dcf4>
 200dd18:	52000326 	beq	r10,r8,200dd28 <__gedf2+0xcc>
 200dd1c:	5200042e 	bgeu	r10,r8,200dd30 <__gedf2+0xd4>
 200dd20:	283fec1e 	bne	r5,zero,200dcd4 <__alt_data_end+0xff00dcd4>
 200dd24:	003ff406 	br	200dcf8 <__alt_data_end+0xff00dcf8>
 200dd28:	313ff236 	bltu	r6,r4,200dcf4 <__alt_data_end+0xff00dcf4>
 200dd2c:	21bffc36 	bltu	r4,r6,200dd20 <__alt_data_end+0xff00dd20>
 200dd30:	0005883a 	mov	r2,zero
 200dd34:	f800283a 	ret

0200dd38 <__ledf2>:
 200dd38:	2804d53a 	srli	r2,r5,20
 200dd3c:	3810d53a 	srli	r8,r7,20
 200dd40:	00c00434 	movhi	r3,16
 200dd44:	18ffffc4 	addi	r3,r3,-1
 200dd48:	1081ffcc 	andi	r2,r2,2047
 200dd4c:	0241ffc4 	movi	r9,2047
 200dd50:	28d4703a 	and	r10,r5,r3
 200dd54:	4201ffcc 	andi	r8,r8,2047
 200dd58:	38c6703a 	and	r3,r7,r3
 200dd5c:	280ad7fa 	srli	r5,r5,31
 200dd60:	380ed7fa 	srli	r7,r7,31
 200dd64:	12401f26 	beq	r2,r9,200dde4 <__ledf2+0xac>
 200dd68:	0241ffc4 	movi	r9,2047
 200dd6c:	42401426 	beq	r8,r9,200ddc0 <__ledf2+0x88>
 200dd70:	1000091e 	bne	r2,zero,200dd98 <__ledf2+0x60>
 200dd74:	2296b03a 	or	r11,r4,r10
 200dd78:	5813003a 	cmpeq	r9,r11,zero
 200dd7c:	29403fcc 	andi	r5,r5,255
 200dd80:	40000a1e 	bne	r8,zero,200ddac <__ledf2+0x74>
 200dd84:	30d8b03a 	or	r12,r6,r3
 200dd88:	6000081e 	bne	r12,zero,200ddac <__ledf2+0x74>
 200dd8c:	0005883a 	mov	r2,zero
 200dd90:	5800111e 	bne	r11,zero,200ddd8 <__ledf2+0xa0>
 200dd94:	f800283a 	ret
 200dd98:	29403fcc 	andi	r5,r5,255
 200dd9c:	40000c1e 	bne	r8,zero,200ddd0 <__ledf2+0x98>
 200dda0:	30d2b03a 	or	r9,r6,r3
 200dda4:	48000c26 	beq	r9,zero,200ddd8 <__ledf2+0xa0>
 200dda8:	0013883a 	mov	r9,zero
 200ddac:	39c03fcc 	andi	r7,r7,255
 200ddb0:	48000826 	beq	r9,zero,200ddd4 <__ledf2+0x9c>
 200ddb4:	38001126 	beq	r7,zero,200ddfc <__ledf2+0xc4>
 200ddb8:	00800044 	movi	r2,1
 200ddbc:	f800283a 	ret
 200ddc0:	30d2b03a 	or	r9,r6,r3
 200ddc4:	483fea26 	beq	r9,zero,200dd70 <__alt_data_end+0xff00dd70>
 200ddc8:	00800084 	movi	r2,2
 200ddcc:	f800283a 	ret
 200ddd0:	39c03fcc 	andi	r7,r7,255
 200ddd4:	39400726 	beq	r7,r5,200ddf4 <__ledf2+0xbc>
 200ddd8:	2800081e 	bne	r5,zero,200ddfc <__ledf2+0xc4>
 200dddc:	00800044 	movi	r2,1
 200dde0:	f800283a 	ret
 200dde4:	2292b03a 	or	r9,r4,r10
 200dde8:	483fdf26 	beq	r9,zero,200dd68 <__alt_data_end+0xff00dd68>
 200ddec:	00800084 	movi	r2,2
 200ddf0:	f800283a 	ret
 200ddf4:	4080030e 	bge	r8,r2,200de04 <__ledf2+0xcc>
 200ddf8:	383fef26 	beq	r7,zero,200ddb8 <__alt_data_end+0xff00ddb8>
 200ddfc:	00bfffc4 	movi	r2,-1
 200de00:	f800283a 	ret
 200de04:	123feb16 	blt	r2,r8,200ddb4 <__alt_data_end+0xff00ddb4>
 200de08:	1abff336 	bltu	r3,r10,200ddd8 <__alt_data_end+0xff00ddd8>
 200de0c:	50c00326 	beq	r10,r3,200de1c <__ledf2+0xe4>
 200de10:	50c0042e 	bgeu	r10,r3,200de24 <__ledf2+0xec>
 200de14:	283fe81e 	bne	r5,zero,200ddb8 <__alt_data_end+0xff00ddb8>
 200de18:	003ff806 	br	200ddfc <__alt_data_end+0xff00ddfc>
 200de1c:	313fee36 	bltu	r6,r4,200ddd8 <__alt_data_end+0xff00ddd8>
 200de20:	21bffc36 	bltu	r4,r6,200de14 <__alt_data_end+0xff00de14>
 200de24:	0005883a 	mov	r2,zero
 200de28:	f800283a 	ret

0200de2c <__muldf3>:
 200de2c:	deffee04 	addi	sp,sp,-72
 200de30:	dd000c15 	stw	r20,48(sp)
 200de34:	2828d53a 	srli	r20,r5,20
 200de38:	ddc00f15 	stw	r23,60(sp)
 200de3c:	282ed7fa 	srli	r23,r5,31
 200de40:	dc000815 	stw	r16,32(sp)
 200de44:	04000434 	movhi	r16,16
 200de48:	dcc00b15 	stw	r19,44(sp)
 200de4c:	843fffc4 	addi	r16,r16,-1
 200de50:	dfc01115 	stw	ra,68(sp)
 200de54:	df001015 	stw	fp,64(sp)
 200de58:	dd800e15 	stw	r22,56(sp)
 200de5c:	dd400d15 	stw	r21,52(sp)
 200de60:	dc800a15 	stw	r18,40(sp)
 200de64:	dc400915 	stw	r17,36(sp)
 200de68:	a501ffcc 	andi	r20,r20,2047
 200de6c:	2c20703a 	and	r16,r5,r16
 200de70:	b827883a 	mov	r19,r23
 200de74:	ba403fcc 	andi	r9,r23,255
 200de78:	a0006026 	beq	r20,zero,200dffc <__muldf3+0x1d0>
 200de7c:	0081ffc4 	movi	r2,2047
 200de80:	202d883a 	mov	r22,r4
 200de84:	a0803626 	beq	r20,r2,200df60 <__muldf3+0x134>
 200de88:	84000434 	orhi	r16,r16,16
 200de8c:	200ad77a 	srli	r5,r4,29
 200de90:	800490fa 	slli	r2,r16,3
 200de94:	202c90fa 	slli	r22,r4,3
 200de98:	a53f0044 	addi	r20,r20,-1023
 200de9c:	28a0b03a 	or	r16,r5,r2
 200dea0:	002b883a 	mov	r21,zero
 200dea4:	000b883a 	mov	r5,zero
 200dea8:	3804d53a 	srli	r2,r7,20
 200deac:	3838d7fa 	srli	fp,r7,31
 200deb0:	04400434 	movhi	r17,16
 200deb4:	8c7fffc4 	addi	r17,r17,-1
 200deb8:	1081ffcc 	andi	r2,r2,2047
 200debc:	3025883a 	mov	r18,r6
 200dec0:	3c62703a 	and	r17,r7,r17
 200dec4:	e2803fcc 	andi	r10,fp,255
 200dec8:	10006d26 	beq	r2,zero,200e080 <__muldf3+0x254>
 200decc:	00c1ffc4 	movi	r3,2047
 200ded0:	10c06526 	beq	r2,r3,200e068 <__muldf3+0x23c>
 200ded4:	8c400434 	orhi	r17,r17,16
 200ded8:	300ed77a 	srli	r7,r6,29
 200dedc:	880690fa 	slli	r3,r17,3
 200dee0:	302490fa 	slli	r18,r6,3
 200dee4:	10bf0044 	addi	r2,r2,-1023
 200dee8:	38e2b03a 	or	r17,r7,r3
 200deec:	000f883a 	mov	r7,zero
 200def0:	a087883a 	add	r3,r20,r2
 200def4:	010003c4 	movi	r4,15
 200def8:	3d44b03a 	or	r2,r7,r21
 200defc:	e5ccf03a 	xor	r6,fp,r23
 200df00:	1a000044 	addi	r8,r3,1
 200df04:	20809b36 	bltu	r4,r2,200e174 <__muldf3+0x348>
 200df08:	100490ba 	slli	r2,r2,2
 200df0c:	01008074 	movhi	r4,513
 200df10:	2137c804 	addi	r4,r4,-8416
 200df14:	1105883a 	add	r2,r2,r4
 200df18:	10800017 	ldw	r2,0(r2)
 200df1c:	1000683a 	jmp	r2
 200df20:	0200e174 	movhi	r8,901
 200df24:	0200df80 	call	200df8 <__alt_mem_onchip_memory2_0+0x200df8>
 200df28:	0200df80 	call	200df8 <__alt_mem_onchip_memory2_0+0x200df8>
 200df2c:	0200df7c 	xorhi	r8,zero,893
 200df30:	0200e150 	cmplti	r8,zero,901
 200df34:	0200e150 	cmplti	r8,zero,901
 200df38:	0200e138 	rdprs	r8,zero,900
 200df3c:	0200df7c 	xorhi	r8,zero,893
 200df40:	0200e150 	cmplti	r8,zero,901
 200df44:	0200e138 	rdprs	r8,zero,900
 200df48:	0200e150 	cmplti	r8,zero,901
 200df4c:	0200df7c 	xorhi	r8,zero,893
 200df50:	0200e160 	cmpeqi	r8,zero,901
 200df54:	0200e160 	cmpeqi	r8,zero,901
 200df58:	0200e160 	cmpeqi	r8,zero,901
 200df5c:	0200e4c0 	call	200e4c <__alt_mem_onchip_memory2_0+0x200e4c>
 200df60:	2404b03a 	or	r2,r4,r16
 200df64:	1000711e 	bne	r2,zero,200e12c <__muldf3+0x300>
 200df68:	05400204 	movi	r21,8
 200df6c:	0021883a 	mov	r16,zero
 200df70:	002d883a 	mov	r22,zero
 200df74:	01400084 	movi	r5,2
 200df78:	003fcb06 	br	200dea8 <__alt_data_end+0xff00dea8>
 200df7c:	500d883a 	mov	r6,r10
 200df80:	00800084 	movi	r2,2
 200df84:	38805926 	beq	r7,r2,200e0ec <__muldf3+0x2c0>
 200df88:	008000c4 	movi	r2,3
 200df8c:	3881bb26 	beq	r7,r2,200e67c <__muldf3+0x850>
 200df90:	00800044 	movi	r2,1
 200df94:	3881961e 	bne	r7,r2,200e5f0 <__muldf3+0x7c4>
 200df98:	3027883a 	mov	r19,r6
 200df9c:	0005883a 	mov	r2,zero
 200dfa0:	0021883a 	mov	r16,zero
 200dfa4:	002d883a 	mov	r22,zero
 200dfa8:	1004953a 	slli	r2,r2,20
 200dfac:	98c03fcc 	andi	r3,r19,255
 200dfb0:	04400434 	movhi	r17,16
 200dfb4:	8c7fffc4 	addi	r17,r17,-1
 200dfb8:	180697fa 	slli	r3,r3,31
 200dfbc:	8460703a 	and	r16,r16,r17
 200dfc0:	80a0b03a 	or	r16,r16,r2
 200dfc4:	80c6b03a 	or	r3,r16,r3
 200dfc8:	b005883a 	mov	r2,r22
 200dfcc:	dfc01117 	ldw	ra,68(sp)
 200dfd0:	df001017 	ldw	fp,64(sp)
 200dfd4:	ddc00f17 	ldw	r23,60(sp)
 200dfd8:	dd800e17 	ldw	r22,56(sp)
 200dfdc:	dd400d17 	ldw	r21,52(sp)
 200dfe0:	dd000c17 	ldw	r20,48(sp)
 200dfe4:	dcc00b17 	ldw	r19,44(sp)
 200dfe8:	dc800a17 	ldw	r18,40(sp)
 200dfec:	dc400917 	ldw	r17,36(sp)
 200dff0:	dc000817 	ldw	r16,32(sp)
 200dff4:	dec01204 	addi	sp,sp,72
 200dff8:	f800283a 	ret
 200dffc:	2404b03a 	or	r2,r4,r16
 200e000:	202b883a 	mov	r21,r4
 200e004:	10004426 	beq	r2,zero,200e118 <__muldf3+0x2ec>
 200e008:	80015126 	beq	r16,zero,200e550 <__muldf3+0x724>
 200e00c:	8009883a 	mov	r4,r16
 200e010:	d9800715 	stw	r6,28(sp)
 200e014:	d9c00215 	stw	r7,8(sp)
 200e018:	da400415 	stw	r9,16(sp)
 200e01c:	200f1980 	call	200f198 <__clzsi2>
 200e020:	d9800717 	ldw	r6,28(sp)
 200e024:	d9c00217 	ldw	r7,8(sp)
 200e028:	da400417 	ldw	r9,16(sp)
 200e02c:	113ffd44 	addi	r4,r2,-11
 200e030:	00c00704 	movi	r3,28
 200e034:	19014216 	blt	r3,r4,200e540 <__muldf3+0x714>
 200e038:	00c00744 	movi	r3,29
 200e03c:	15bffe04 	addi	r22,r2,-8
 200e040:	1907c83a 	sub	r3,r3,r4
 200e044:	85a0983a 	sll	r16,r16,r22
 200e048:	a8c6d83a 	srl	r3,r21,r3
 200e04c:	adac983a 	sll	r22,r21,r22
 200e050:	1c20b03a 	or	r16,r3,r16
 200e054:	1080fcc4 	addi	r2,r2,1011
 200e058:	00a9c83a 	sub	r20,zero,r2
 200e05c:	002b883a 	mov	r21,zero
 200e060:	000b883a 	mov	r5,zero
 200e064:	003f9006 	br	200dea8 <__alt_data_end+0xff00dea8>
 200e068:	3446b03a 	or	r3,r6,r17
 200e06c:	1800281e 	bne	r3,zero,200e110 <__muldf3+0x2e4>
 200e070:	0023883a 	mov	r17,zero
 200e074:	0025883a 	mov	r18,zero
 200e078:	01c00084 	movi	r7,2
 200e07c:	003f9c06 	br	200def0 <__alt_data_end+0xff00def0>
 200e080:	3446b03a 	or	r3,r6,r17
 200e084:	18001e26 	beq	r3,zero,200e100 <__muldf3+0x2d4>
 200e088:	88012126 	beq	r17,zero,200e510 <__muldf3+0x6e4>
 200e08c:	8809883a 	mov	r4,r17
 200e090:	d9400215 	stw	r5,8(sp)
 200e094:	d9800715 	stw	r6,28(sp)
 200e098:	da400415 	stw	r9,16(sp)
 200e09c:	da800315 	stw	r10,12(sp)
 200e0a0:	200f1980 	call	200f198 <__clzsi2>
 200e0a4:	d9400217 	ldw	r5,8(sp)
 200e0a8:	d9800717 	ldw	r6,28(sp)
 200e0ac:	da400417 	ldw	r9,16(sp)
 200e0b0:	da800317 	ldw	r10,12(sp)
 200e0b4:	113ffd44 	addi	r4,r2,-11
 200e0b8:	00c00704 	movi	r3,28
 200e0bc:	19011016 	blt	r3,r4,200e500 <__muldf3+0x6d4>
 200e0c0:	00c00744 	movi	r3,29
 200e0c4:	14bffe04 	addi	r18,r2,-8
 200e0c8:	1907c83a 	sub	r3,r3,r4
 200e0cc:	8ca2983a 	sll	r17,r17,r18
 200e0d0:	30c6d83a 	srl	r3,r6,r3
 200e0d4:	34a4983a 	sll	r18,r6,r18
 200e0d8:	1c62b03a 	or	r17,r3,r17
 200e0dc:	1080fcc4 	addi	r2,r2,1011
 200e0e0:	0085c83a 	sub	r2,zero,r2
 200e0e4:	000f883a 	mov	r7,zero
 200e0e8:	003f8106 	br	200def0 <__alt_data_end+0xff00def0>
 200e0ec:	3027883a 	mov	r19,r6
 200e0f0:	0081ffc4 	movi	r2,2047
 200e0f4:	0021883a 	mov	r16,zero
 200e0f8:	002d883a 	mov	r22,zero
 200e0fc:	003faa06 	br	200dfa8 <__alt_data_end+0xff00dfa8>
 200e100:	0023883a 	mov	r17,zero
 200e104:	0025883a 	mov	r18,zero
 200e108:	01c00044 	movi	r7,1
 200e10c:	003f7806 	br	200def0 <__alt_data_end+0xff00def0>
 200e110:	01c000c4 	movi	r7,3
 200e114:	003f7606 	br	200def0 <__alt_data_end+0xff00def0>
 200e118:	05400104 	movi	r21,4
 200e11c:	0021883a 	mov	r16,zero
 200e120:	002d883a 	mov	r22,zero
 200e124:	01400044 	movi	r5,1
 200e128:	003f5f06 	br	200dea8 <__alt_data_end+0xff00dea8>
 200e12c:	05400304 	movi	r21,12
 200e130:	014000c4 	movi	r5,3
 200e134:	003f5c06 	br	200dea8 <__alt_data_end+0xff00dea8>
 200e138:	04000434 	movhi	r16,16
 200e13c:	0027883a 	mov	r19,zero
 200e140:	843fffc4 	addi	r16,r16,-1
 200e144:	05bfffc4 	movi	r22,-1
 200e148:	0081ffc4 	movi	r2,2047
 200e14c:	003f9606 	br	200dfa8 <__alt_data_end+0xff00dfa8>
 200e150:	8023883a 	mov	r17,r16
 200e154:	b025883a 	mov	r18,r22
 200e158:	280f883a 	mov	r7,r5
 200e15c:	003f8806 	br	200df80 <__alt_data_end+0xff00df80>
 200e160:	8023883a 	mov	r17,r16
 200e164:	b025883a 	mov	r18,r22
 200e168:	480d883a 	mov	r6,r9
 200e16c:	280f883a 	mov	r7,r5
 200e170:	003f8306 	br	200df80 <__alt_data_end+0xff00df80>
 200e174:	b026d43a 	srli	r19,r22,16
 200e178:	902ed43a 	srli	r23,r18,16
 200e17c:	b5bfffcc 	andi	r22,r22,65535
 200e180:	94bfffcc 	andi	r18,r18,65535
 200e184:	b00b883a 	mov	r5,r22
 200e188:	9009883a 	mov	r4,r18
 200e18c:	d8c00515 	stw	r3,20(sp)
 200e190:	d9800715 	stw	r6,28(sp)
 200e194:	da000615 	stw	r8,24(sp)
 200e198:	200c9300 	call	200c930 <__mulsi3>
 200e19c:	980b883a 	mov	r5,r19
 200e1a0:	9009883a 	mov	r4,r18
 200e1a4:	1029883a 	mov	r20,r2
 200e1a8:	200c9300 	call	200c930 <__mulsi3>
 200e1ac:	b80b883a 	mov	r5,r23
 200e1b0:	9809883a 	mov	r4,r19
 200e1b4:	102b883a 	mov	r21,r2
 200e1b8:	200c9300 	call	200c930 <__mulsi3>
 200e1bc:	b809883a 	mov	r4,r23
 200e1c0:	b00b883a 	mov	r5,r22
 200e1c4:	1039883a 	mov	fp,r2
 200e1c8:	200c9300 	call	200c930 <__mulsi3>
 200e1cc:	a008d43a 	srli	r4,r20,16
 200e1d0:	1545883a 	add	r2,r2,r21
 200e1d4:	d8c00517 	ldw	r3,20(sp)
 200e1d8:	2085883a 	add	r2,r4,r2
 200e1dc:	d9800717 	ldw	r6,28(sp)
 200e1e0:	da000617 	ldw	r8,24(sp)
 200e1e4:	1540022e 	bgeu	r2,r21,200e1f0 <__muldf3+0x3c4>
 200e1e8:	01000074 	movhi	r4,1
 200e1ec:	e139883a 	add	fp,fp,r4
 200e1f0:	100e943a 	slli	r7,r2,16
 200e1f4:	1004d43a 	srli	r2,r2,16
 200e1f8:	882ad43a 	srli	r21,r17,16
 200e1fc:	a53fffcc 	andi	r20,r20,65535
 200e200:	8c7fffcc 	andi	r17,r17,65535
 200e204:	3d29883a 	add	r20,r7,r20
 200e208:	b00b883a 	mov	r5,r22
 200e20c:	8809883a 	mov	r4,r17
 200e210:	d8c00515 	stw	r3,20(sp)
 200e214:	d9800715 	stw	r6,28(sp)
 200e218:	da000615 	stw	r8,24(sp)
 200e21c:	dd000115 	stw	r20,4(sp)
 200e220:	d8800015 	stw	r2,0(sp)
 200e224:	200c9300 	call	200c930 <__mulsi3>
 200e228:	980b883a 	mov	r5,r19
 200e22c:	8809883a 	mov	r4,r17
 200e230:	d8800215 	stw	r2,8(sp)
 200e234:	200c9300 	call	200c930 <__mulsi3>
 200e238:	9809883a 	mov	r4,r19
 200e23c:	a80b883a 	mov	r5,r21
 200e240:	1029883a 	mov	r20,r2
 200e244:	200c9300 	call	200c930 <__mulsi3>
 200e248:	b00b883a 	mov	r5,r22
 200e24c:	a809883a 	mov	r4,r21
 200e250:	d8800415 	stw	r2,16(sp)
 200e254:	200c9300 	call	200c930 <__mulsi3>
 200e258:	d9c00217 	ldw	r7,8(sp)
 200e25c:	1505883a 	add	r2,r2,r20
 200e260:	d8c00517 	ldw	r3,20(sp)
 200e264:	3826d43a 	srli	r19,r7,16
 200e268:	d9800717 	ldw	r6,28(sp)
 200e26c:	da000617 	ldw	r8,24(sp)
 200e270:	9885883a 	add	r2,r19,r2
 200e274:	da400417 	ldw	r9,16(sp)
 200e278:	1500022e 	bgeu	r2,r20,200e284 <__muldf3+0x458>
 200e27c:	01000074 	movhi	r4,1
 200e280:	4913883a 	add	r9,r9,r4
 200e284:	1028d43a 	srli	r20,r2,16
 200e288:	1004943a 	slli	r2,r2,16
 200e28c:	802cd43a 	srli	r22,r16,16
 200e290:	843fffcc 	andi	r16,r16,65535
 200e294:	3cffffcc 	andi	r19,r7,65535
 200e298:	9009883a 	mov	r4,r18
 200e29c:	800b883a 	mov	r5,r16
 200e2a0:	a269883a 	add	r20,r20,r9
 200e2a4:	d8c00515 	stw	r3,20(sp)
 200e2a8:	d9800715 	stw	r6,28(sp)
 200e2ac:	da000615 	stw	r8,24(sp)
 200e2b0:	14e7883a 	add	r19,r2,r19
 200e2b4:	200c9300 	call	200c930 <__mulsi3>
 200e2b8:	9009883a 	mov	r4,r18
 200e2bc:	b00b883a 	mov	r5,r22
 200e2c0:	d8800315 	stw	r2,12(sp)
 200e2c4:	200c9300 	call	200c930 <__mulsi3>
 200e2c8:	b809883a 	mov	r4,r23
 200e2cc:	b00b883a 	mov	r5,r22
 200e2d0:	d8800215 	stw	r2,8(sp)
 200e2d4:	200c9300 	call	200c930 <__mulsi3>
 200e2d8:	b80b883a 	mov	r5,r23
 200e2dc:	8009883a 	mov	r4,r16
 200e2e0:	d8800415 	stw	r2,16(sp)
 200e2e4:	200c9300 	call	200c930 <__mulsi3>
 200e2e8:	da800317 	ldw	r10,12(sp)
 200e2ec:	d9c00217 	ldw	r7,8(sp)
 200e2f0:	d9000017 	ldw	r4,0(sp)
 200e2f4:	502ed43a 	srli	r23,r10,16
 200e2f8:	11c5883a 	add	r2,r2,r7
 200e2fc:	24e5883a 	add	r18,r4,r19
 200e300:	b885883a 	add	r2,r23,r2
 200e304:	d8c00517 	ldw	r3,20(sp)
 200e308:	d9800717 	ldw	r6,28(sp)
 200e30c:	da000617 	ldw	r8,24(sp)
 200e310:	da400417 	ldw	r9,16(sp)
 200e314:	11c0022e 	bgeu	r2,r7,200e320 <__muldf3+0x4f4>
 200e318:	01000074 	movhi	r4,1
 200e31c:	4913883a 	add	r9,r9,r4
 200e320:	100ed43a 	srli	r7,r2,16
 200e324:	1004943a 	slli	r2,r2,16
 200e328:	55ffffcc 	andi	r23,r10,65535
 200e32c:	3a53883a 	add	r9,r7,r9
 200e330:	8809883a 	mov	r4,r17
 200e334:	800b883a 	mov	r5,r16
 200e338:	d8c00515 	stw	r3,20(sp)
 200e33c:	d9800715 	stw	r6,28(sp)
 200e340:	da000615 	stw	r8,24(sp)
 200e344:	da400415 	stw	r9,16(sp)
 200e348:	15ef883a 	add	r23,r2,r23
 200e34c:	200c9300 	call	200c930 <__mulsi3>
 200e350:	8809883a 	mov	r4,r17
 200e354:	b00b883a 	mov	r5,r22
 200e358:	d8800215 	stw	r2,8(sp)
 200e35c:	200c9300 	call	200c930 <__mulsi3>
 200e360:	b00b883a 	mov	r5,r22
 200e364:	a809883a 	mov	r4,r21
 200e368:	d8800315 	stw	r2,12(sp)
 200e36c:	200c9300 	call	200c930 <__mulsi3>
 200e370:	8009883a 	mov	r4,r16
 200e374:	a80b883a 	mov	r5,r21
 200e378:	1023883a 	mov	r17,r2
 200e37c:	200c9300 	call	200c930 <__mulsi3>
 200e380:	d9c00217 	ldw	r7,8(sp)
 200e384:	da800317 	ldw	r10,12(sp)
 200e388:	d8c00517 	ldw	r3,20(sp)
 200e38c:	3808d43a 	srli	r4,r7,16
 200e390:	1285883a 	add	r2,r2,r10
 200e394:	d9800717 	ldw	r6,28(sp)
 200e398:	2085883a 	add	r2,r4,r2
 200e39c:	da000617 	ldw	r8,24(sp)
 200e3a0:	da400417 	ldw	r9,16(sp)
 200e3a4:	1280022e 	bgeu	r2,r10,200e3b0 <__muldf3+0x584>
 200e3a8:	01000074 	movhi	r4,1
 200e3ac:	8923883a 	add	r17,r17,r4
 200e3b0:	1008943a 	slli	r4,r2,16
 200e3b4:	39ffffcc 	andi	r7,r7,65535
 200e3b8:	e4b9883a 	add	fp,fp,r18
 200e3bc:	21cf883a 	add	r7,r4,r7
 200e3c0:	e4e7803a 	cmpltu	r19,fp,r19
 200e3c4:	3d0f883a 	add	r7,r7,r20
 200e3c8:	bf39883a 	add	fp,r23,fp
 200e3cc:	99c9883a 	add	r4,r19,r7
 200e3d0:	e5ef803a 	cmpltu	r23,fp,r23
 200e3d4:	490b883a 	add	r5,r9,r4
 200e3d8:	1004d43a 	srli	r2,r2,16
 200e3dc:	b965883a 	add	r18,r23,r5
 200e3e0:	24c9803a 	cmpltu	r4,r4,r19
 200e3e4:	3d29803a 	cmpltu	r20,r7,r20
 200e3e8:	a128b03a 	or	r20,r20,r4
 200e3ec:	95ef803a 	cmpltu	r23,r18,r23
 200e3f0:	2a53803a 	cmpltu	r9,r5,r9
 200e3f4:	a0a9883a 	add	r20,r20,r2
 200e3f8:	4deeb03a 	or	r23,r9,r23
 200e3fc:	a5ef883a 	add	r23,r20,r23
 200e400:	bc63883a 	add	r17,r23,r17
 200e404:	e004927a 	slli	r2,fp,9
 200e408:	d9000117 	ldw	r4,4(sp)
 200e40c:	882e927a 	slli	r23,r17,9
 200e410:	9022d5fa 	srli	r17,r18,23
 200e414:	e038d5fa 	srli	fp,fp,23
 200e418:	1104b03a 	or	r2,r2,r4
 200e41c:	9024927a 	slli	r18,r18,9
 200e420:	1004c03a 	cmpne	r2,r2,zero
 200e424:	bc62b03a 	or	r17,r23,r17
 200e428:	1738b03a 	or	fp,r2,fp
 200e42c:	8880402c 	andhi	r2,r17,256
 200e430:	e4a4b03a 	or	r18,fp,r18
 200e434:	10000726 	beq	r2,zero,200e454 <__muldf3+0x628>
 200e438:	9006d07a 	srli	r3,r18,1
 200e43c:	880497fa 	slli	r2,r17,31
 200e440:	9480004c 	andi	r18,r18,1
 200e444:	8822d07a 	srli	r17,r17,1
 200e448:	1ca4b03a 	or	r18,r3,r18
 200e44c:	14a4b03a 	or	r18,r2,r18
 200e450:	4007883a 	mov	r3,r8
 200e454:	1880ffc4 	addi	r2,r3,1023
 200e458:	0080460e 	bge	zero,r2,200e574 <__muldf3+0x748>
 200e45c:	910001cc 	andi	r4,r18,7
 200e460:	20000726 	beq	r4,zero,200e480 <__muldf3+0x654>
 200e464:	910003cc 	andi	r4,r18,15
 200e468:	01400104 	movi	r5,4
 200e46c:	21400426 	beq	r4,r5,200e480 <__muldf3+0x654>
 200e470:	9149883a 	add	r4,r18,r5
 200e474:	24a5803a 	cmpltu	r18,r4,r18
 200e478:	8ca3883a 	add	r17,r17,r18
 200e47c:	2025883a 	mov	r18,r4
 200e480:	8900402c 	andhi	r4,r17,256
 200e484:	20000426 	beq	r4,zero,200e498 <__muldf3+0x66c>
 200e488:	18810004 	addi	r2,r3,1024
 200e48c:	00ffc034 	movhi	r3,65280
 200e490:	18ffffc4 	addi	r3,r3,-1
 200e494:	88e2703a 	and	r17,r17,r3
 200e498:	00c1ff84 	movi	r3,2046
 200e49c:	18bf1316 	blt	r3,r2,200e0ec <__alt_data_end+0xff00e0ec>
 200e4a0:	882c977a 	slli	r22,r17,29
 200e4a4:	9024d0fa 	srli	r18,r18,3
 200e4a8:	8822927a 	slli	r17,r17,9
 200e4ac:	1081ffcc 	andi	r2,r2,2047
 200e4b0:	b4acb03a 	or	r22,r22,r18
 200e4b4:	8820d33a 	srli	r16,r17,12
 200e4b8:	3027883a 	mov	r19,r6
 200e4bc:	003eba06 	br	200dfa8 <__alt_data_end+0xff00dfa8>
 200e4c0:	8080022c 	andhi	r2,r16,8
 200e4c4:	10000926 	beq	r2,zero,200e4ec <__muldf3+0x6c0>
 200e4c8:	8880022c 	andhi	r2,r17,8
 200e4cc:	1000071e 	bne	r2,zero,200e4ec <__muldf3+0x6c0>
 200e4d0:	00800434 	movhi	r2,16
 200e4d4:	8c000234 	orhi	r16,r17,8
 200e4d8:	10bfffc4 	addi	r2,r2,-1
 200e4dc:	e027883a 	mov	r19,fp
 200e4e0:	80a0703a 	and	r16,r16,r2
 200e4e4:	902d883a 	mov	r22,r18
 200e4e8:	003f1706 	br	200e148 <__alt_data_end+0xff00e148>
 200e4ec:	00800434 	movhi	r2,16
 200e4f0:	84000234 	orhi	r16,r16,8
 200e4f4:	10bfffc4 	addi	r2,r2,-1
 200e4f8:	80a0703a 	and	r16,r16,r2
 200e4fc:	003f1206 	br	200e148 <__alt_data_end+0xff00e148>
 200e500:	147ff604 	addi	r17,r2,-40
 200e504:	3462983a 	sll	r17,r6,r17
 200e508:	0025883a 	mov	r18,zero
 200e50c:	003ef306 	br	200e0dc <__alt_data_end+0xff00e0dc>
 200e510:	3009883a 	mov	r4,r6
 200e514:	d9400215 	stw	r5,8(sp)
 200e518:	d9800715 	stw	r6,28(sp)
 200e51c:	da400415 	stw	r9,16(sp)
 200e520:	da800315 	stw	r10,12(sp)
 200e524:	200f1980 	call	200f198 <__clzsi2>
 200e528:	10800804 	addi	r2,r2,32
 200e52c:	da800317 	ldw	r10,12(sp)
 200e530:	da400417 	ldw	r9,16(sp)
 200e534:	d9800717 	ldw	r6,28(sp)
 200e538:	d9400217 	ldw	r5,8(sp)
 200e53c:	003edd06 	br	200e0b4 <__alt_data_end+0xff00e0b4>
 200e540:	143ff604 	addi	r16,r2,-40
 200e544:	ac20983a 	sll	r16,r21,r16
 200e548:	002d883a 	mov	r22,zero
 200e54c:	003ec106 	br	200e054 <__alt_data_end+0xff00e054>
 200e550:	d9800715 	stw	r6,28(sp)
 200e554:	d9c00215 	stw	r7,8(sp)
 200e558:	da400415 	stw	r9,16(sp)
 200e55c:	200f1980 	call	200f198 <__clzsi2>
 200e560:	10800804 	addi	r2,r2,32
 200e564:	da400417 	ldw	r9,16(sp)
 200e568:	d9c00217 	ldw	r7,8(sp)
 200e56c:	d9800717 	ldw	r6,28(sp)
 200e570:	003eae06 	br	200e02c <__alt_data_end+0xff00e02c>
 200e574:	00c00044 	movi	r3,1
 200e578:	1887c83a 	sub	r3,r3,r2
 200e57c:	01000e04 	movi	r4,56
 200e580:	20fe8516 	blt	r4,r3,200df98 <__alt_data_end+0xff00df98>
 200e584:	010007c4 	movi	r4,31
 200e588:	20c01b16 	blt	r4,r3,200e5f8 <__muldf3+0x7cc>
 200e58c:	00800804 	movi	r2,32
 200e590:	10c5c83a 	sub	r2,r2,r3
 200e594:	888a983a 	sll	r5,r17,r2
 200e598:	90c8d83a 	srl	r4,r18,r3
 200e59c:	9084983a 	sll	r2,r18,r2
 200e5a0:	88e2d83a 	srl	r17,r17,r3
 200e5a4:	2906b03a 	or	r3,r5,r4
 200e5a8:	1004c03a 	cmpne	r2,r2,zero
 200e5ac:	1886b03a 	or	r3,r3,r2
 200e5b0:	188001cc 	andi	r2,r3,7
 200e5b4:	10000726 	beq	r2,zero,200e5d4 <__muldf3+0x7a8>
 200e5b8:	188003cc 	andi	r2,r3,15
 200e5bc:	01000104 	movi	r4,4
 200e5c0:	11000426 	beq	r2,r4,200e5d4 <__muldf3+0x7a8>
 200e5c4:	1805883a 	mov	r2,r3
 200e5c8:	10c00104 	addi	r3,r2,4
 200e5cc:	1885803a 	cmpltu	r2,r3,r2
 200e5d0:	88a3883a 	add	r17,r17,r2
 200e5d4:	8880202c 	andhi	r2,r17,128
 200e5d8:	10001c26 	beq	r2,zero,200e64c <__muldf3+0x820>
 200e5dc:	3027883a 	mov	r19,r6
 200e5e0:	00800044 	movi	r2,1
 200e5e4:	0021883a 	mov	r16,zero
 200e5e8:	002d883a 	mov	r22,zero
 200e5ec:	003e6e06 	br	200dfa8 <__alt_data_end+0xff00dfa8>
 200e5f0:	4007883a 	mov	r3,r8
 200e5f4:	003f9706 	br	200e454 <__alt_data_end+0xff00e454>
 200e5f8:	017ff844 	movi	r5,-31
 200e5fc:	2885c83a 	sub	r2,r5,r2
 200e600:	888ad83a 	srl	r5,r17,r2
 200e604:	00800804 	movi	r2,32
 200e608:	18801a26 	beq	r3,r2,200e674 <__muldf3+0x848>
 200e60c:	01001004 	movi	r4,64
 200e610:	20c7c83a 	sub	r3,r4,r3
 200e614:	88e2983a 	sll	r17,r17,r3
 200e618:	8ca4b03a 	or	r18,r17,r18
 200e61c:	9004c03a 	cmpne	r2,r18,zero
 200e620:	2884b03a 	or	r2,r5,r2
 200e624:	144001cc 	andi	r17,r2,7
 200e628:	88000d1e 	bne	r17,zero,200e660 <__muldf3+0x834>
 200e62c:	0021883a 	mov	r16,zero
 200e630:	102cd0fa 	srli	r22,r2,3
 200e634:	3027883a 	mov	r19,r6
 200e638:	0005883a 	mov	r2,zero
 200e63c:	b46cb03a 	or	r22,r22,r17
 200e640:	003e5906 	br	200dfa8 <__alt_data_end+0xff00dfa8>
 200e644:	1007883a 	mov	r3,r2
 200e648:	0023883a 	mov	r17,zero
 200e64c:	8820927a 	slli	r16,r17,9
 200e650:	1805883a 	mov	r2,r3
 200e654:	8822977a 	slli	r17,r17,29
 200e658:	8020d33a 	srli	r16,r16,12
 200e65c:	003ff406 	br	200e630 <__alt_data_end+0xff00e630>
 200e660:	10c003cc 	andi	r3,r2,15
 200e664:	01000104 	movi	r4,4
 200e668:	193ff626 	beq	r3,r4,200e644 <__alt_data_end+0xff00e644>
 200e66c:	0023883a 	mov	r17,zero
 200e670:	003fd506 	br	200e5c8 <__alt_data_end+0xff00e5c8>
 200e674:	0023883a 	mov	r17,zero
 200e678:	003fe706 	br	200e618 <__alt_data_end+0xff00e618>
 200e67c:	00800434 	movhi	r2,16
 200e680:	8c000234 	orhi	r16,r17,8
 200e684:	10bfffc4 	addi	r2,r2,-1
 200e688:	3027883a 	mov	r19,r6
 200e68c:	80a0703a 	and	r16,r16,r2
 200e690:	902d883a 	mov	r22,r18
 200e694:	003eac06 	br	200e148 <__alt_data_end+0xff00e148>

0200e698 <__subdf3>:
 200e698:	02000434 	movhi	r8,16
 200e69c:	423fffc4 	addi	r8,r8,-1
 200e6a0:	defffb04 	addi	sp,sp,-20
 200e6a4:	2a14703a 	and	r10,r5,r8
 200e6a8:	3812d53a 	srli	r9,r7,20
 200e6ac:	3a10703a 	and	r8,r7,r8
 200e6b0:	2006d77a 	srli	r3,r4,29
 200e6b4:	3004d77a 	srli	r2,r6,29
 200e6b8:	dc000015 	stw	r16,0(sp)
 200e6bc:	501490fa 	slli	r10,r10,3
 200e6c0:	2820d53a 	srli	r16,r5,20
 200e6c4:	401090fa 	slli	r8,r8,3
 200e6c8:	dc800215 	stw	r18,8(sp)
 200e6cc:	dc400115 	stw	r17,4(sp)
 200e6d0:	dfc00415 	stw	ra,16(sp)
 200e6d4:	202290fa 	slli	r17,r4,3
 200e6d8:	dcc00315 	stw	r19,12(sp)
 200e6dc:	4a41ffcc 	andi	r9,r9,2047
 200e6e0:	0101ffc4 	movi	r4,2047
 200e6e4:	2824d7fa 	srli	r18,r5,31
 200e6e8:	8401ffcc 	andi	r16,r16,2047
 200e6ec:	50c6b03a 	or	r3,r10,r3
 200e6f0:	380ed7fa 	srli	r7,r7,31
 200e6f4:	408ab03a 	or	r5,r8,r2
 200e6f8:	300c90fa 	slli	r6,r6,3
 200e6fc:	49009626 	beq	r9,r4,200e958 <__subdf3+0x2c0>
 200e700:	39c0005c 	xori	r7,r7,1
 200e704:	8245c83a 	sub	r2,r16,r9
 200e708:	3c807426 	beq	r7,r18,200e8dc <__subdf3+0x244>
 200e70c:	0080af0e 	bge	zero,r2,200e9cc <__subdf3+0x334>
 200e710:	48002a1e 	bne	r9,zero,200e7bc <__subdf3+0x124>
 200e714:	2988b03a 	or	r4,r5,r6
 200e718:	20009a1e 	bne	r4,zero,200e984 <__subdf3+0x2ec>
 200e71c:	888001cc 	andi	r2,r17,7
 200e720:	10000726 	beq	r2,zero,200e740 <__subdf3+0xa8>
 200e724:	888003cc 	andi	r2,r17,15
 200e728:	01000104 	movi	r4,4
 200e72c:	11000426 	beq	r2,r4,200e740 <__subdf3+0xa8>
 200e730:	890b883a 	add	r5,r17,r4
 200e734:	2c63803a 	cmpltu	r17,r5,r17
 200e738:	1c47883a 	add	r3,r3,r17
 200e73c:	2823883a 	mov	r17,r5
 200e740:	1880202c 	andhi	r2,r3,128
 200e744:	10005926 	beq	r2,zero,200e8ac <__subdf3+0x214>
 200e748:	84000044 	addi	r16,r16,1
 200e74c:	0081ffc4 	movi	r2,2047
 200e750:	8080be26 	beq	r16,r2,200ea4c <__subdf3+0x3b4>
 200e754:	017fe034 	movhi	r5,65408
 200e758:	297fffc4 	addi	r5,r5,-1
 200e75c:	1946703a 	and	r3,r3,r5
 200e760:	1804977a 	slli	r2,r3,29
 200e764:	1806927a 	slli	r3,r3,9
 200e768:	8822d0fa 	srli	r17,r17,3
 200e76c:	8401ffcc 	andi	r16,r16,2047
 200e770:	180ad33a 	srli	r5,r3,12
 200e774:	9100004c 	andi	r4,r18,1
 200e778:	1444b03a 	or	r2,r2,r17
 200e77c:	80c1ffcc 	andi	r3,r16,2047
 200e780:	1820953a 	slli	r16,r3,20
 200e784:	20c03fcc 	andi	r3,r4,255
 200e788:	180897fa 	slli	r4,r3,31
 200e78c:	00c00434 	movhi	r3,16
 200e790:	18ffffc4 	addi	r3,r3,-1
 200e794:	28c6703a 	and	r3,r5,r3
 200e798:	1c06b03a 	or	r3,r3,r16
 200e79c:	1906b03a 	or	r3,r3,r4
 200e7a0:	dfc00417 	ldw	ra,16(sp)
 200e7a4:	dcc00317 	ldw	r19,12(sp)
 200e7a8:	dc800217 	ldw	r18,8(sp)
 200e7ac:	dc400117 	ldw	r17,4(sp)
 200e7b0:	dc000017 	ldw	r16,0(sp)
 200e7b4:	dec00504 	addi	sp,sp,20
 200e7b8:	f800283a 	ret
 200e7bc:	0101ffc4 	movi	r4,2047
 200e7c0:	813fd626 	beq	r16,r4,200e71c <__alt_data_end+0xff00e71c>
 200e7c4:	29402034 	orhi	r5,r5,128
 200e7c8:	01000e04 	movi	r4,56
 200e7cc:	2080a316 	blt	r4,r2,200ea5c <__subdf3+0x3c4>
 200e7d0:	010007c4 	movi	r4,31
 200e7d4:	2080c616 	blt	r4,r2,200eaf0 <__subdf3+0x458>
 200e7d8:	01000804 	movi	r4,32
 200e7dc:	2089c83a 	sub	r4,r4,r2
 200e7e0:	2910983a 	sll	r8,r5,r4
 200e7e4:	308ed83a 	srl	r7,r6,r2
 200e7e8:	3108983a 	sll	r4,r6,r4
 200e7ec:	2884d83a 	srl	r2,r5,r2
 200e7f0:	41ccb03a 	or	r6,r8,r7
 200e7f4:	2008c03a 	cmpne	r4,r4,zero
 200e7f8:	310cb03a 	or	r6,r6,r4
 200e7fc:	898dc83a 	sub	r6,r17,r6
 200e800:	89a3803a 	cmpltu	r17,r17,r6
 200e804:	1887c83a 	sub	r3,r3,r2
 200e808:	1c47c83a 	sub	r3,r3,r17
 200e80c:	3023883a 	mov	r17,r6
 200e810:	1880202c 	andhi	r2,r3,128
 200e814:	10002326 	beq	r2,zero,200e8a4 <__subdf3+0x20c>
 200e818:	04c02034 	movhi	r19,128
 200e81c:	9cffffc4 	addi	r19,r19,-1
 200e820:	1ce6703a 	and	r19,r3,r19
 200e824:	98007a26 	beq	r19,zero,200ea10 <__subdf3+0x378>
 200e828:	9809883a 	mov	r4,r19
 200e82c:	200f1980 	call	200f198 <__clzsi2>
 200e830:	113ffe04 	addi	r4,r2,-8
 200e834:	00c007c4 	movi	r3,31
 200e838:	19007b16 	blt	r3,r4,200ea28 <__subdf3+0x390>
 200e83c:	00800804 	movi	r2,32
 200e840:	1105c83a 	sub	r2,r2,r4
 200e844:	8884d83a 	srl	r2,r17,r2
 200e848:	9906983a 	sll	r3,r19,r4
 200e84c:	8922983a 	sll	r17,r17,r4
 200e850:	10c4b03a 	or	r2,r2,r3
 200e854:	24007816 	blt	r4,r16,200ea38 <__subdf3+0x3a0>
 200e858:	2421c83a 	sub	r16,r4,r16
 200e85c:	80c00044 	addi	r3,r16,1
 200e860:	010007c4 	movi	r4,31
 200e864:	20c09516 	blt	r4,r3,200eabc <__subdf3+0x424>
 200e868:	01400804 	movi	r5,32
 200e86c:	28cbc83a 	sub	r5,r5,r3
 200e870:	88c8d83a 	srl	r4,r17,r3
 200e874:	8962983a 	sll	r17,r17,r5
 200e878:	114a983a 	sll	r5,r2,r5
 200e87c:	10c6d83a 	srl	r3,r2,r3
 200e880:	8804c03a 	cmpne	r2,r17,zero
 200e884:	290ab03a 	or	r5,r5,r4
 200e888:	28a2b03a 	or	r17,r5,r2
 200e88c:	0021883a 	mov	r16,zero
 200e890:	003fa206 	br	200e71c <__alt_data_end+0xff00e71c>
 200e894:	2090b03a 	or	r8,r4,r2
 200e898:	40018e26 	beq	r8,zero,200eed4 <__subdf3+0x83c>
 200e89c:	1007883a 	mov	r3,r2
 200e8a0:	2023883a 	mov	r17,r4
 200e8a4:	888001cc 	andi	r2,r17,7
 200e8a8:	103f9e1e 	bne	r2,zero,200e724 <__alt_data_end+0xff00e724>
 200e8ac:	1804977a 	slli	r2,r3,29
 200e8b0:	8822d0fa 	srli	r17,r17,3
 200e8b4:	1810d0fa 	srli	r8,r3,3
 200e8b8:	9100004c 	andi	r4,r18,1
 200e8bc:	1444b03a 	or	r2,r2,r17
 200e8c0:	00c1ffc4 	movi	r3,2047
 200e8c4:	80c02826 	beq	r16,r3,200e968 <__subdf3+0x2d0>
 200e8c8:	01400434 	movhi	r5,16
 200e8cc:	297fffc4 	addi	r5,r5,-1
 200e8d0:	80e0703a 	and	r16,r16,r3
 200e8d4:	414a703a 	and	r5,r8,r5
 200e8d8:	003fa806 	br	200e77c <__alt_data_end+0xff00e77c>
 200e8dc:	0080630e 	bge	zero,r2,200ea6c <__subdf3+0x3d4>
 200e8e0:	48003026 	beq	r9,zero,200e9a4 <__subdf3+0x30c>
 200e8e4:	0101ffc4 	movi	r4,2047
 200e8e8:	813f8c26 	beq	r16,r4,200e71c <__alt_data_end+0xff00e71c>
 200e8ec:	29402034 	orhi	r5,r5,128
 200e8f0:	01000e04 	movi	r4,56
 200e8f4:	2080a90e 	bge	r4,r2,200eb9c <__subdf3+0x504>
 200e8f8:	298cb03a 	or	r6,r5,r6
 200e8fc:	3012c03a 	cmpne	r9,r6,zero
 200e900:	0005883a 	mov	r2,zero
 200e904:	4c53883a 	add	r9,r9,r17
 200e908:	4c63803a 	cmpltu	r17,r9,r17
 200e90c:	10c7883a 	add	r3,r2,r3
 200e910:	88c7883a 	add	r3,r17,r3
 200e914:	4823883a 	mov	r17,r9
 200e918:	1880202c 	andhi	r2,r3,128
 200e91c:	1000d026 	beq	r2,zero,200ec60 <__subdf3+0x5c8>
 200e920:	84000044 	addi	r16,r16,1
 200e924:	0081ffc4 	movi	r2,2047
 200e928:	8080fe26 	beq	r16,r2,200ed24 <__subdf3+0x68c>
 200e92c:	00bfe034 	movhi	r2,65408
 200e930:	10bfffc4 	addi	r2,r2,-1
 200e934:	1886703a 	and	r3,r3,r2
 200e938:	880ad07a 	srli	r5,r17,1
 200e93c:	180497fa 	slli	r2,r3,31
 200e940:	8900004c 	andi	r4,r17,1
 200e944:	2922b03a 	or	r17,r5,r4
 200e948:	1806d07a 	srli	r3,r3,1
 200e94c:	1462b03a 	or	r17,r2,r17
 200e950:	3825883a 	mov	r18,r7
 200e954:	003f7106 	br	200e71c <__alt_data_end+0xff00e71c>
 200e958:	2984b03a 	or	r2,r5,r6
 200e95c:	103f6826 	beq	r2,zero,200e700 <__alt_data_end+0xff00e700>
 200e960:	39c03fcc 	andi	r7,r7,255
 200e964:	003f6706 	br	200e704 <__alt_data_end+0xff00e704>
 200e968:	4086b03a 	or	r3,r8,r2
 200e96c:	18015226 	beq	r3,zero,200eeb8 <__subdf3+0x820>
 200e970:	00c00434 	movhi	r3,16
 200e974:	41400234 	orhi	r5,r8,8
 200e978:	18ffffc4 	addi	r3,r3,-1
 200e97c:	28ca703a 	and	r5,r5,r3
 200e980:	003f7e06 	br	200e77c <__alt_data_end+0xff00e77c>
 200e984:	10bfffc4 	addi	r2,r2,-1
 200e988:	1000491e 	bne	r2,zero,200eab0 <__subdf3+0x418>
 200e98c:	898fc83a 	sub	r7,r17,r6
 200e990:	89e3803a 	cmpltu	r17,r17,r7
 200e994:	1947c83a 	sub	r3,r3,r5
 200e998:	1c47c83a 	sub	r3,r3,r17
 200e99c:	3823883a 	mov	r17,r7
 200e9a0:	003f9b06 	br	200e810 <__alt_data_end+0xff00e810>
 200e9a4:	2988b03a 	or	r4,r5,r6
 200e9a8:	203f5c26 	beq	r4,zero,200e71c <__alt_data_end+0xff00e71c>
 200e9ac:	10bfffc4 	addi	r2,r2,-1
 200e9b0:	1000931e 	bne	r2,zero,200ec00 <__subdf3+0x568>
 200e9b4:	898d883a 	add	r6,r17,r6
 200e9b8:	3463803a 	cmpltu	r17,r6,r17
 200e9bc:	1947883a 	add	r3,r3,r5
 200e9c0:	88c7883a 	add	r3,r17,r3
 200e9c4:	3023883a 	mov	r17,r6
 200e9c8:	003fd306 	br	200e918 <__alt_data_end+0xff00e918>
 200e9cc:	1000541e 	bne	r2,zero,200eb20 <__subdf3+0x488>
 200e9d0:	80800044 	addi	r2,r16,1
 200e9d4:	1081ffcc 	andi	r2,r2,2047
 200e9d8:	01000044 	movi	r4,1
 200e9dc:	2080a20e 	bge	r4,r2,200ec68 <__subdf3+0x5d0>
 200e9e0:	8989c83a 	sub	r4,r17,r6
 200e9e4:	8905803a 	cmpltu	r2,r17,r4
 200e9e8:	1967c83a 	sub	r19,r3,r5
 200e9ec:	98a7c83a 	sub	r19,r19,r2
 200e9f0:	9880202c 	andhi	r2,r19,128
 200e9f4:	10006326 	beq	r2,zero,200eb84 <__subdf3+0x4ec>
 200e9f8:	3463c83a 	sub	r17,r6,r17
 200e9fc:	28c7c83a 	sub	r3,r5,r3
 200ea00:	344d803a 	cmpltu	r6,r6,r17
 200ea04:	19a7c83a 	sub	r19,r3,r6
 200ea08:	3825883a 	mov	r18,r7
 200ea0c:	983f861e 	bne	r19,zero,200e828 <__alt_data_end+0xff00e828>
 200ea10:	8809883a 	mov	r4,r17
 200ea14:	200f1980 	call	200f198 <__clzsi2>
 200ea18:	10800804 	addi	r2,r2,32
 200ea1c:	113ffe04 	addi	r4,r2,-8
 200ea20:	00c007c4 	movi	r3,31
 200ea24:	193f850e 	bge	r3,r4,200e83c <__alt_data_end+0xff00e83c>
 200ea28:	10bff604 	addi	r2,r2,-40
 200ea2c:	8884983a 	sll	r2,r17,r2
 200ea30:	0023883a 	mov	r17,zero
 200ea34:	243f880e 	bge	r4,r16,200e858 <__alt_data_end+0xff00e858>
 200ea38:	00ffe034 	movhi	r3,65408
 200ea3c:	18ffffc4 	addi	r3,r3,-1
 200ea40:	8121c83a 	sub	r16,r16,r4
 200ea44:	10c6703a 	and	r3,r2,r3
 200ea48:	003f3406 	br	200e71c <__alt_data_end+0xff00e71c>
 200ea4c:	9100004c 	andi	r4,r18,1
 200ea50:	000b883a 	mov	r5,zero
 200ea54:	0005883a 	mov	r2,zero
 200ea58:	003f4806 	br	200e77c <__alt_data_end+0xff00e77c>
 200ea5c:	298cb03a 	or	r6,r5,r6
 200ea60:	300cc03a 	cmpne	r6,r6,zero
 200ea64:	0005883a 	mov	r2,zero
 200ea68:	003f6406 	br	200e7fc <__alt_data_end+0xff00e7fc>
 200ea6c:	10009a1e 	bne	r2,zero,200ecd8 <__subdf3+0x640>
 200ea70:	82400044 	addi	r9,r16,1
 200ea74:	4881ffcc 	andi	r2,r9,2047
 200ea78:	02800044 	movi	r10,1
 200ea7c:	5080670e 	bge	r10,r2,200ec1c <__subdf3+0x584>
 200ea80:	0081ffc4 	movi	r2,2047
 200ea84:	4880af26 	beq	r9,r2,200ed44 <__subdf3+0x6ac>
 200ea88:	898d883a 	add	r6,r17,r6
 200ea8c:	1945883a 	add	r2,r3,r5
 200ea90:	3447803a 	cmpltu	r3,r6,r17
 200ea94:	1887883a 	add	r3,r3,r2
 200ea98:	182297fa 	slli	r17,r3,31
 200ea9c:	300cd07a 	srli	r6,r6,1
 200eaa0:	1806d07a 	srli	r3,r3,1
 200eaa4:	4821883a 	mov	r16,r9
 200eaa8:	89a2b03a 	or	r17,r17,r6
 200eaac:	003f1b06 	br	200e71c <__alt_data_end+0xff00e71c>
 200eab0:	0101ffc4 	movi	r4,2047
 200eab4:	813f441e 	bne	r16,r4,200e7c8 <__alt_data_end+0xff00e7c8>
 200eab8:	003f1806 	br	200e71c <__alt_data_end+0xff00e71c>
 200eabc:	843ff844 	addi	r16,r16,-31
 200eac0:	01400804 	movi	r5,32
 200eac4:	1408d83a 	srl	r4,r2,r16
 200eac8:	19405026 	beq	r3,r5,200ec0c <__subdf3+0x574>
 200eacc:	01401004 	movi	r5,64
 200ead0:	28c7c83a 	sub	r3,r5,r3
 200ead4:	10c4983a 	sll	r2,r2,r3
 200ead8:	88a2b03a 	or	r17,r17,r2
 200eadc:	8822c03a 	cmpne	r17,r17,zero
 200eae0:	2462b03a 	or	r17,r4,r17
 200eae4:	0007883a 	mov	r3,zero
 200eae8:	0021883a 	mov	r16,zero
 200eaec:	003f6d06 	br	200e8a4 <__alt_data_end+0xff00e8a4>
 200eaf0:	11fff804 	addi	r7,r2,-32
 200eaf4:	01000804 	movi	r4,32
 200eaf8:	29ced83a 	srl	r7,r5,r7
 200eafc:	11004526 	beq	r2,r4,200ec14 <__subdf3+0x57c>
 200eb00:	01001004 	movi	r4,64
 200eb04:	2089c83a 	sub	r4,r4,r2
 200eb08:	2904983a 	sll	r2,r5,r4
 200eb0c:	118cb03a 	or	r6,r2,r6
 200eb10:	300cc03a 	cmpne	r6,r6,zero
 200eb14:	398cb03a 	or	r6,r7,r6
 200eb18:	0005883a 	mov	r2,zero
 200eb1c:	003f3706 	br	200e7fc <__alt_data_end+0xff00e7fc>
 200eb20:	80002a26 	beq	r16,zero,200ebcc <__subdf3+0x534>
 200eb24:	0101ffc4 	movi	r4,2047
 200eb28:	49006626 	beq	r9,r4,200ecc4 <__subdf3+0x62c>
 200eb2c:	0085c83a 	sub	r2,zero,r2
 200eb30:	18c02034 	orhi	r3,r3,128
 200eb34:	01000e04 	movi	r4,56
 200eb38:	20807e16 	blt	r4,r2,200ed34 <__subdf3+0x69c>
 200eb3c:	010007c4 	movi	r4,31
 200eb40:	2080e716 	blt	r4,r2,200eee0 <__subdf3+0x848>
 200eb44:	01000804 	movi	r4,32
 200eb48:	2089c83a 	sub	r4,r4,r2
 200eb4c:	1914983a 	sll	r10,r3,r4
 200eb50:	8890d83a 	srl	r8,r17,r2
 200eb54:	8908983a 	sll	r4,r17,r4
 200eb58:	1884d83a 	srl	r2,r3,r2
 200eb5c:	5222b03a 	or	r17,r10,r8
 200eb60:	2006c03a 	cmpne	r3,r4,zero
 200eb64:	88e2b03a 	or	r17,r17,r3
 200eb68:	3463c83a 	sub	r17,r6,r17
 200eb6c:	2885c83a 	sub	r2,r5,r2
 200eb70:	344d803a 	cmpltu	r6,r6,r17
 200eb74:	1187c83a 	sub	r3,r2,r6
 200eb78:	4821883a 	mov	r16,r9
 200eb7c:	3825883a 	mov	r18,r7
 200eb80:	003f2306 	br	200e810 <__alt_data_end+0xff00e810>
 200eb84:	24d0b03a 	or	r8,r4,r19
 200eb88:	40001b1e 	bne	r8,zero,200ebf8 <__subdf3+0x560>
 200eb8c:	0005883a 	mov	r2,zero
 200eb90:	0009883a 	mov	r4,zero
 200eb94:	0021883a 	mov	r16,zero
 200eb98:	003f4906 	br	200e8c0 <__alt_data_end+0xff00e8c0>
 200eb9c:	010007c4 	movi	r4,31
 200eba0:	20803a16 	blt	r4,r2,200ec8c <__subdf3+0x5f4>
 200eba4:	01000804 	movi	r4,32
 200eba8:	2089c83a 	sub	r4,r4,r2
 200ebac:	2912983a 	sll	r9,r5,r4
 200ebb0:	3090d83a 	srl	r8,r6,r2
 200ebb4:	3108983a 	sll	r4,r6,r4
 200ebb8:	2884d83a 	srl	r2,r5,r2
 200ebbc:	4a12b03a 	or	r9,r9,r8
 200ebc0:	2008c03a 	cmpne	r4,r4,zero
 200ebc4:	4912b03a 	or	r9,r9,r4
 200ebc8:	003f4e06 	br	200e904 <__alt_data_end+0xff00e904>
 200ebcc:	1c48b03a 	or	r4,r3,r17
 200ebd0:	20003c26 	beq	r4,zero,200ecc4 <__subdf3+0x62c>
 200ebd4:	0084303a 	nor	r2,zero,r2
 200ebd8:	1000381e 	bne	r2,zero,200ecbc <__subdf3+0x624>
 200ebdc:	3463c83a 	sub	r17,r6,r17
 200ebe0:	28c5c83a 	sub	r2,r5,r3
 200ebe4:	344d803a 	cmpltu	r6,r6,r17
 200ebe8:	1187c83a 	sub	r3,r2,r6
 200ebec:	4821883a 	mov	r16,r9
 200ebf0:	3825883a 	mov	r18,r7
 200ebf4:	003f0606 	br	200e810 <__alt_data_end+0xff00e810>
 200ebf8:	2023883a 	mov	r17,r4
 200ebfc:	003f0906 	br	200e824 <__alt_data_end+0xff00e824>
 200ec00:	0101ffc4 	movi	r4,2047
 200ec04:	813f3a1e 	bne	r16,r4,200e8f0 <__alt_data_end+0xff00e8f0>
 200ec08:	003ec406 	br	200e71c <__alt_data_end+0xff00e71c>
 200ec0c:	0005883a 	mov	r2,zero
 200ec10:	003fb106 	br	200ead8 <__alt_data_end+0xff00ead8>
 200ec14:	0005883a 	mov	r2,zero
 200ec18:	003fbc06 	br	200eb0c <__alt_data_end+0xff00eb0c>
 200ec1c:	1c44b03a 	or	r2,r3,r17
 200ec20:	80008e1e 	bne	r16,zero,200ee5c <__subdf3+0x7c4>
 200ec24:	1000c826 	beq	r2,zero,200ef48 <__subdf3+0x8b0>
 200ec28:	2984b03a 	or	r2,r5,r6
 200ec2c:	103ebb26 	beq	r2,zero,200e71c <__alt_data_end+0xff00e71c>
 200ec30:	8989883a 	add	r4,r17,r6
 200ec34:	1945883a 	add	r2,r3,r5
 200ec38:	2447803a 	cmpltu	r3,r4,r17
 200ec3c:	1887883a 	add	r3,r3,r2
 200ec40:	1880202c 	andhi	r2,r3,128
 200ec44:	2023883a 	mov	r17,r4
 200ec48:	103f1626 	beq	r2,zero,200e8a4 <__alt_data_end+0xff00e8a4>
 200ec4c:	00bfe034 	movhi	r2,65408
 200ec50:	10bfffc4 	addi	r2,r2,-1
 200ec54:	5021883a 	mov	r16,r10
 200ec58:	1886703a 	and	r3,r3,r2
 200ec5c:	003eaf06 	br	200e71c <__alt_data_end+0xff00e71c>
 200ec60:	3825883a 	mov	r18,r7
 200ec64:	003f0f06 	br	200e8a4 <__alt_data_end+0xff00e8a4>
 200ec68:	1c44b03a 	or	r2,r3,r17
 200ec6c:	8000251e 	bne	r16,zero,200ed04 <__subdf3+0x66c>
 200ec70:	1000661e 	bne	r2,zero,200ee0c <__subdf3+0x774>
 200ec74:	2990b03a 	or	r8,r5,r6
 200ec78:	40009626 	beq	r8,zero,200eed4 <__subdf3+0x83c>
 200ec7c:	2807883a 	mov	r3,r5
 200ec80:	3023883a 	mov	r17,r6
 200ec84:	3825883a 	mov	r18,r7
 200ec88:	003ea406 	br	200e71c <__alt_data_end+0xff00e71c>
 200ec8c:	127ff804 	addi	r9,r2,-32
 200ec90:	01000804 	movi	r4,32
 200ec94:	2a52d83a 	srl	r9,r5,r9
 200ec98:	11008c26 	beq	r2,r4,200eecc <__subdf3+0x834>
 200ec9c:	01001004 	movi	r4,64
 200eca0:	2085c83a 	sub	r2,r4,r2
 200eca4:	2884983a 	sll	r2,r5,r2
 200eca8:	118cb03a 	or	r6,r2,r6
 200ecac:	300cc03a 	cmpne	r6,r6,zero
 200ecb0:	4992b03a 	or	r9,r9,r6
 200ecb4:	0005883a 	mov	r2,zero
 200ecb8:	003f1206 	br	200e904 <__alt_data_end+0xff00e904>
 200ecbc:	0101ffc4 	movi	r4,2047
 200ecc0:	493f9c1e 	bne	r9,r4,200eb34 <__alt_data_end+0xff00eb34>
 200ecc4:	2807883a 	mov	r3,r5
 200ecc8:	3023883a 	mov	r17,r6
 200eccc:	4821883a 	mov	r16,r9
 200ecd0:	3825883a 	mov	r18,r7
 200ecd4:	003e9106 	br	200e71c <__alt_data_end+0xff00e71c>
 200ecd8:	80001f1e 	bne	r16,zero,200ed58 <__subdf3+0x6c0>
 200ecdc:	1c48b03a 	or	r4,r3,r17
 200ece0:	20005a26 	beq	r4,zero,200ee4c <__subdf3+0x7b4>
 200ece4:	0084303a 	nor	r2,zero,r2
 200ece8:	1000561e 	bne	r2,zero,200ee44 <__subdf3+0x7ac>
 200ecec:	89a3883a 	add	r17,r17,r6
 200ecf0:	1945883a 	add	r2,r3,r5
 200ecf4:	898d803a 	cmpltu	r6,r17,r6
 200ecf8:	3087883a 	add	r3,r6,r2
 200ecfc:	4821883a 	mov	r16,r9
 200ed00:	003f0506 	br	200e918 <__alt_data_end+0xff00e918>
 200ed04:	10002b1e 	bne	r2,zero,200edb4 <__subdf3+0x71c>
 200ed08:	2984b03a 	or	r2,r5,r6
 200ed0c:	10008026 	beq	r2,zero,200ef10 <__subdf3+0x878>
 200ed10:	2807883a 	mov	r3,r5
 200ed14:	3023883a 	mov	r17,r6
 200ed18:	3825883a 	mov	r18,r7
 200ed1c:	0401ffc4 	movi	r16,2047
 200ed20:	003e7e06 	br	200e71c <__alt_data_end+0xff00e71c>
 200ed24:	3809883a 	mov	r4,r7
 200ed28:	0011883a 	mov	r8,zero
 200ed2c:	0005883a 	mov	r2,zero
 200ed30:	003ee306 	br	200e8c0 <__alt_data_end+0xff00e8c0>
 200ed34:	1c62b03a 	or	r17,r3,r17
 200ed38:	8822c03a 	cmpne	r17,r17,zero
 200ed3c:	0005883a 	mov	r2,zero
 200ed40:	003f8906 	br	200eb68 <__alt_data_end+0xff00eb68>
 200ed44:	3809883a 	mov	r4,r7
 200ed48:	4821883a 	mov	r16,r9
 200ed4c:	0011883a 	mov	r8,zero
 200ed50:	0005883a 	mov	r2,zero
 200ed54:	003eda06 	br	200e8c0 <__alt_data_end+0xff00e8c0>
 200ed58:	0101ffc4 	movi	r4,2047
 200ed5c:	49003b26 	beq	r9,r4,200ee4c <__subdf3+0x7b4>
 200ed60:	0085c83a 	sub	r2,zero,r2
 200ed64:	18c02034 	orhi	r3,r3,128
 200ed68:	01000e04 	movi	r4,56
 200ed6c:	20806e16 	blt	r4,r2,200ef28 <__subdf3+0x890>
 200ed70:	010007c4 	movi	r4,31
 200ed74:	20807716 	blt	r4,r2,200ef54 <__subdf3+0x8bc>
 200ed78:	01000804 	movi	r4,32
 200ed7c:	2089c83a 	sub	r4,r4,r2
 200ed80:	1914983a 	sll	r10,r3,r4
 200ed84:	8890d83a 	srl	r8,r17,r2
 200ed88:	8908983a 	sll	r4,r17,r4
 200ed8c:	1884d83a 	srl	r2,r3,r2
 200ed90:	5222b03a 	or	r17,r10,r8
 200ed94:	2006c03a 	cmpne	r3,r4,zero
 200ed98:	88e2b03a 	or	r17,r17,r3
 200ed9c:	89a3883a 	add	r17,r17,r6
 200eda0:	1145883a 	add	r2,r2,r5
 200eda4:	898d803a 	cmpltu	r6,r17,r6
 200eda8:	3087883a 	add	r3,r6,r2
 200edac:	4821883a 	mov	r16,r9
 200edb0:	003ed906 	br	200e918 <__alt_data_end+0xff00e918>
 200edb4:	2984b03a 	or	r2,r5,r6
 200edb8:	10004226 	beq	r2,zero,200eec4 <__subdf3+0x82c>
 200edbc:	1808d0fa 	srli	r4,r3,3
 200edc0:	8822d0fa 	srli	r17,r17,3
 200edc4:	1806977a 	slli	r3,r3,29
 200edc8:	2080022c 	andhi	r2,r4,8
 200edcc:	1c62b03a 	or	r17,r3,r17
 200edd0:	10000826 	beq	r2,zero,200edf4 <__subdf3+0x75c>
 200edd4:	2812d0fa 	srli	r9,r5,3
 200edd8:	4880022c 	andhi	r2,r9,8
 200eddc:	1000051e 	bne	r2,zero,200edf4 <__subdf3+0x75c>
 200ede0:	300cd0fa 	srli	r6,r6,3
 200ede4:	2804977a 	slli	r2,r5,29
 200ede8:	4809883a 	mov	r4,r9
 200edec:	3825883a 	mov	r18,r7
 200edf0:	11a2b03a 	or	r17,r2,r6
 200edf4:	8806d77a 	srli	r3,r17,29
 200edf8:	200890fa 	slli	r4,r4,3
 200edfc:	882290fa 	slli	r17,r17,3
 200ee00:	0401ffc4 	movi	r16,2047
 200ee04:	1906b03a 	or	r3,r3,r4
 200ee08:	003e4406 	br	200e71c <__alt_data_end+0xff00e71c>
 200ee0c:	2984b03a 	or	r2,r5,r6
 200ee10:	103e4226 	beq	r2,zero,200e71c <__alt_data_end+0xff00e71c>
 200ee14:	8989c83a 	sub	r4,r17,r6
 200ee18:	8911803a 	cmpltu	r8,r17,r4
 200ee1c:	1945c83a 	sub	r2,r3,r5
 200ee20:	1205c83a 	sub	r2,r2,r8
 200ee24:	1200202c 	andhi	r8,r2,128
 200ee28:	403e9a26 	beq	r8,zero,200e894 <__alt_data_end+0xff00e894>
 200ee2c:	3463c83a 	sub	r17,r6,r17
 200ee30:	28c5c83a 	sub	r2,r5,r3
 200ee34:	344d803a 	cmpltu	r6,r6,r17
 200ee38:	1187c83a 	sub	r3,r2,r6
 200ee3c:	3825883a 	mov	r18,r7
 200ee40:	003e3606 	br	200e71c <__alt_data_end+0xff00e71c>
 200ee44:	0101ffc4 	movi	r4,2047
 200ee48:	493fc71e 	bne	r9,r4,200ed68 <__alt_data_end+0xff00ed68>
 200ee4c:	2807883a 	mov	r3,r5
 200ee50:	3023883a 	mov	r17,r6
 200ee54:	4821883a 	mov	r16,r9
 200ee58:	003e3006 	br	200e71c <__alt_data_end+0xff00e71c>
 200ee5c:	10003626 	beq	r2,zero,200ef38 <__subdf3+0x8a0>
 200ee60:	2984b03a 	or	r2,r5,r6
 200ee64:	10001726 	beq	r2,zero,200eec4 <__subdf3+0x82c>
 200ee68:	1808d0fa 	srli	r4,r3,3
 200ee6c:	8822d0fa 	srli	r17,r17,3
 200ee70:	1806977a 	slli	r3,r3,29
 200ee74:	2080022c 	andhi	r2,r4,8
 200ee78:	1c62b03a 	or	r17,r3,r17
 200ee7c:	10000726 	beq	r2,zero,200ee9c <__subdf3+0x804>
 200ee80:	2812d0fa 	srli	r9,r5,3
 200ee84:	4880022c 	andhi	r2,r9,8
 200ee88:	1000041e 	bne	r2,zero,200ee9c <__subdf3+0x804>
 200ee8c:	300cd0fa 	srli	r6,r6,3
 200ee90:	2804977a 	slli	r2,r5,29
 200ee94:	4809883a 	mov	r4,r9
 200ee98:	11a2b03a 	or	r17,r2,r6
 200ee9c:	8806d77a 	srli	r3,r17,29
 200eea0:	200890fa 	slli	r4,r4,3
 200eea4:	882290fa 	slli	r17,r17,3
 200eea8:	3825883a 	mov	r18,r7
 200eeac:	1906b03a 	or	r3,r3,r4
 200eeb0:	0401ffc4 	movi	r16,2047
 200eeb4:	003e1906 	br	200e71c <__alt_data_end+0xff00e71c>
 200eeb8:	000b883a 	mov	r5,zero
 200eebc:	0005883a 	mov	r2,zero
 200eec0:	003e2e06 	br	200e77c <__alt_data_end+0xff00e77c>
 200eec4:	0401ffc4 	movi	r16,2047
 200eec8:	003e1406 	br	200e71c <__alt_data_end+0xff00e71c>
 200eecc:	0005883a 	mov	r2,zero
 200eed0:	003f7506 	br	200eca8 <__alt_data_end+0xff00eca8>
 200eed4:	0005883a 	mov	r2,zero
 200eed8:	0009883a 	mov	r4,zero
 200eedc:	003e7806 	br	200e8c0 <__alt_data_end+0xff00e8c0>
 200eee0:	123ff804 	addi	r8,r2,-32
 200eee4:	01000804 	movi	r4,32
 200eee8:	1a10d83a 	srl	r8,r3,r8
 200eeec:	11002526 	beq	r2,r4,200ef84 <__subdf3+0x8ec>
 200eef0:	01001004 	movi	r4,64
 200eef4:	2085c83a 	sub	r2,r4,r2
 200eef8:	1884983a 	sll	r2,r3,r2
 200eefc:	1444b03a 	or	r2,r2,r17
 200ef00:	1004c03a 	cmpne	r2,r2,zero
 200ef04:	40a2b03a 	or	r17,r8,r2
 200ef08:	0005883a 	mov	r2,zero
 200ef0c:	003f1606 	br	200eb68 <__alt_data_end+0xff00eb68>
 200ef10:	02000434 	movhi	r8,16
 200ef14:	0009883a 	mov	r4,zero
 200ef18:	423fffc4 	addi	r8,r8,-1
 200ef1c:	00bfffc4 	movi	r2,-1
 200ef20:	0401ffc4 	movi	r16,2047
 200ef24:	003e6606 	br	200e8c0 <__alt_data_end+0xff00e8c0>
 200ef28:	1c62b03a 	or	r17,r3,r17
 200ef2c:	8822c03a 	cmpne	r17,r17,zero
 200ef30:	0005883a 	mov	r2,zero
 200ef34:	003f9906 	br	200ed9c <__alt_data_end+0xff00ed9c>
 200ef38:	2807883a 	mov	r3,r5
 200ef3c:	3023883a 	mov	r17,r6
 200ef40:	0401ffc4 	movi	r16,2047
 200ef44:	003df506 	br	200e71c <__alt_data_end+0xff00e71c>
 200ef48:	2807883a 	mov	r3,r5
 200ef4c:	3023883a 	mov	r17,r6
 200ef50:	003df206 	br	200e71c <__alt_data_end+0xff00e71c>
 200ef54:	123ff804 	addi	r8,r2,-32
 200ef58:	01000804 	movi	r4,32
 200ef5c:	1a10d83a 	srl	r8,r3,r8
 200ef60:	11000a26 	beq	r2,r4,200ef8c <__subdf3+0x8f4>
 200ef64:	01001004 	movi	r4,64
 200ef68:	2085c83a 	sub	r2,r4,r2
 200ef6c:	1884983a 	sll	r2,r3,r2
 200ef70:	1444b03a 	or	r2,r2,r17
 200ef74:	1004c03a 	cmpne	r2,r2,zero
 200ef78:	40a2b03a 	or	r17,r8,r2
 200ef7c:	0005883a 	mov	r2,zero
 200ef80:	003f8606 	br	200ed9c <__alt_data_end+0xff00ed9c>
 200ef84:	0005883a 	mov	r2,zero
 200ef88:	003fdc06 	br	200eefc <__alt_data_end+0xff00eefc>
 200ef8c:	0005883a 	mov	r2,zero
 200ef90:	003ff706 	br	200ef70 <__alt_data_end+0xff00ef70>

0200ef94 <__fixdfsi>:
 200ef94:	280cd53a 	srli	r6,r5,20
 200ef98:	00c00434 	movhi	r3,16
 200ef9c:	18ffffc4 	addi	r3,r3,-1
 200efa0:	3181ffcc 	andi	r6,r6,2047
 200efa4:	01c0ff84 	movi	r7,1022
 200efa8:	28c6703a 	and	r3,r5,r3
 200efac:	280ad7fa 	srli	r5,r5,31
 200efb0:	3980120e 	bge	r7,r6,200effc <__fixdfsi+0x68>
 200efb4:	00810744 	movi	r2,1053
 200efb8:	11800c16 	blt	r2,r6,200efec <__fixdfsi+0x58>
 200efbc:	00810cc4 	movi	r2,1075
 200efc0:	1185c83a 	sub	r2,r2,r6
 200efc4:	01c007c4 	movi	r7,31
 200efc8:	18c00434 	orhi	r3,r3,16
 200efcc:	38800d16 	blt	r7,r2,200f004 <__fixdfsi+0x70>
 200efd0:	31befb44 	addi	r6,r6,-1043
 200efd4:	2084d83a 	srl	r2,r4,r2
 200efd8:	1986983a 	sll	r3,r3,r6
 200efdc:	1884b03a 	or	r2,r3,r2
 200efe0:	28000726 	beq	r5,zero,200f000 <__fixdfsi+0x6c>
 200efe4:	0085c83a 	sub	r2,zero,r2
 200efe8:	f800283a 	ret
 200efec:	00a00034 	movhi	r2,32768
 200eff0:	10bfffc4 	addi	r2,r2,-1
 200eff4:	2885883a 	add	r2,r5,r2
 200eff8:	f800283a 	ret
 200effc:	0005883a 	mov	r2,zero
 200f000:	f800283a 	ret
 200f004:	008104c4 	movi	r2,1043
 200f008:	1185c83a 	sub	r2,r2,r6
 200f00c:	1884d83a 	srl	r2,r3,r2
 200f010:	003ff306 	br	200efe0 <__alt_data_end+0xff00efe0>

0200f014 <__floatsidf>:
 200f014:	defffd04 	addi	sp,sp,-12
 200f018:	dfc00215 	stw	ra,8(sp)
 200f01c:	dc400115 	stw	r17,4(sp)
 200f020:	dc000015 	stw	r16,0(sp)
 200f024:	20002b26 	beq	r4,zero,200f0d4 <__floatsidf+0xc0>
 200f028:	2023883a 	mov	r17,r4
 200f02c:	2020d7fa 	srli	r16,r4,31
 200f030:	20002d16 	blt	r4,zero,200f0e8 <__floatsidf+0xd4>
 200f034:	8809883a 	mov	r4,r17
 200f038:	200f1980 	call	200f198 <__clzsi2>
 200f03c:	01410784 	movi	r5,1054
 200f040:	288bc83a 	sub	r5,r5,r2
 200f044:	01010cc4 	movi	r4,1075
 200f048:	2149c83a 	sub	r4,r4,r5
 200f04c:	00c007c4 	movi	r3,31
 200f050:	1900160e 	bge	r3,r4,200f0ac <__floatsidf+0x98>
 200f054:	00c104c4 	movi	r3,1043
 200f058:	1947c83a 	sub	r3,r3,r5
 200f05c:	88c6983a 	sll	r3,r17,r3
 200f060:	00800434 	movhi	r2,16
 200f064:	10bfffc4 	addi	r2,r2,-1
 200f068:	1886703a 	and	r3,r3,r2
 200f06c:	2941ffcc 	andi	r5,r5,2047
 200f070:	800d883a 	mov	r6,r16
 200f074:	0005883a 	mov	r2,zero
 200f078:	280a953a 	slli	r5,r5,20
 200f07c:	31803fcc 	andi	r6,r6,255
 200f080:	01000434 	movhi	r4,16
 200f084:	300c97fa 	slli	r6,r6,31
 200f088:	213fffc4 	addi	r4,r4,-1
 200f08c:	1906703a 	and	r3,r3,r4
 200f090:	1946b03a 	or	r3,r3,r5
 200f094:	1986b03a 	or	r3,r3,r6
 200f098:	dfc00217 	ldw	ra,8(sp)
 200f09c:	dc400117 	ldw	r17,4(sp)
 200f0a0:	dc000017 	ldw	r16,0(sp)
 200f0a4:	dec00304 	addi	sp,sp,12
 200f0a8:	f800283a 	ret
 200f0ac:	00c002c4 	movi	r3,11
 200f0b0:	1887c83a 	sub	r3,r3,r2
 200f0b4:	88c6d83a 	srl	r3,r17,r3
 200f0b8:	8904983a 	sll	r2,r17,r4
 200f0bc:	01000434 	movhi	r4,16
 200f0c0:	213fffc4 	addi	r4,r4,-1
 200f0c4:	2941ffcc 	andi	r5,r5,2047
 200f0c8:	1906703a 	and	r3,r3,r4
 200f0cc:	800d883a 	mov	r6,r16
 200f0d0:	003fe906 	br	200f078 <__alt_data_end+0xff00f078>
 200f0d4:	000d883a 	mov	r6,zero
 200f0d8:	000b883a 	mov	r5,zero
 200f0dc:	0007883a 	mov	r3,zero
 200f0e0:	0005883a 	mov	r2,zero
 200f0e4:	003fe406 	br	200f078 <__alt_data_end+0xff00f078>
 200f0e8:	0123c83a 	sub	r17,zero,r4
 200f0ec:	003fd106 	br	200f034 <__alt_data_end+0xff00f034>

0200f0f0 <__floatunsidf>:
 200f0f0:	defffe04 	addi	sp,sp,-8
 200f0f4:	dc000015 	stw	r16,0(sp)
 200f0f8:	dfc00115 	stw	ra,4(sp)
 200f0fc:	2021883a 	mov	r16,r4
 200f100:	20002226 	beq	r4,zero,200f18c <__floatunsidf+0x9c>
 200f104:	200f1980 	call	200f198 <__clzsi2>
 200f108:	01010784 	movi	r4,1054
 200f10c:	2089c83a 	sub	r4,r4,r2
 200f110:	01810cc4 	movi	r6,1075
 200f114:	310dc83a 	sub	r6,r6,r4
 200f118:	00c007c4 	movi	r3,31
 200f11c:	1980120e 	bge	r3,r6,200f168 <__floatunsidf+0x78>
 200f120:	00c104c4 	movi	r3,1043
 200f124:	1907c83a 	sub	r3,r3,r4
 200f128:	80ca983a 	sll	r5,r16,r3
 200f12c:	00800434 	movhi	r2,16
 200f130:	10bfffc4 	addi	r2,r2,-1
 200f134:	2101ffcc 	andi	r4,r4,2047
 200f138:	0021883a 	mov	r16,zero
 200f13c:	288a703a 	and	r5,r5,r2
 200f140:	2008953a 	slli	r4,r4,20
 200f144:	00c00434 	movhi	r3,16
 200f148:	18ffffc4 	addi	r3,r3,-1
 200f14c:	28c6703a 	and	r3,r5,r3
 200f150:	8005883a 	mov	r2,r16
 200f154:	1906b03a 	or	r3,r3,r4
 200f158:	dfc00117 	ldw	ra,4(sp)
 200f15c:	dc000017 	ldw	r16,0(sp)
 200f160:	dec00204 	addi	sp,sp,8
 200f164:	f800283a 	ret
 200f168:	00c002c4 	movi	r3,11
 200f16c:	188bc83a 	sub	r5,r3,r2
 200f170:	814ad83a 	srl	r5,r16,r5
 200f174:	00c00434 	movhi	r3,16
 200f178:	18ffffc4 	addi	r3,r3,-1
 200f17c:	81a0983a 	sll	r16,r16,r6
 200f180:	2101ffcc 	andi	r4,r4,2047
 200f184:	28ca703a 	and	r5,r5,r3
 200f188:	003fed06 	br	200f140 <__alt_data_end+0xff00f140>
 200f18c:	0009883a 	mov	r4,zero
 200f190:	000b883a 	mov	r5,zero
 200f194:	003fea06 	br	200f140 <__alt_data_end+0xff00f140>

0200f198 <__clzsi2>:
 200f198:	00bfffd4 	movui	r2,65535
 200f19c:	11000536 	bltu	r2,r4,200f1b4 <__clzsi2+0x1c>
 200f1a0:	00803fc4 	movi	r2,255
 200f1a4:	11000f36 	bltu	r2,r4,200f1e4 <__clzsi2+0x4c>
 200f1a8:	00800804 	movi	r2,32
 200f1ac:	0007883a 	mov	r3,zero
 200f1b0:	00000506 	br	200f1c8 <__clzsi2+0x30>
 200f1b4:	00804034 	movhi	r2,256
 200f1b8:	10bfffc4 	addi	r2,r2,-1
 200f1bc:	11000c2e 	bgeu	r2,r4,200f1f0 <__clzsi2+0x58>
 200f1c0:	00800204 	movi	r2,8
 200f1c4:	00c00604 	movi	r3,24
 200f1c8:	20c8d83a 	srl	r4,r4,r3
 200f1cc:	00c08074 	movhi	r3,513
 200f1d0:	18c8d904 	addi	r3,r3,9060
 200f1d4:	1909883a 	add	r4,r3,r4
 200f1d8:	20c00003 	ldbu	r3,0(r4)
 200f1dc:	10c5c83a 	sub	r2,r2,r3
 200f1e0:	f800283a 	ret
 200f1e4:	00800604 	movi	r2,24
 200f1e8:	00c00204 	movi	r3,8
 200f1ec:	003ff606 	br	200f1c8 <__alt_data_end+0xff00f1c8>
 200f1f0:	00800404 	movi	r2,16
 200f1f4:	1007883a 	mov	r3,r2
 200f1f8:	003ff306 	br	200f1c8 <__alt_data_end+0xff00f1c8>

0200f1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f1fc:	defffe04 	addi	sp,sp,-8
 200f200:	dfc00115 	stw	ra,4(sp)
 200f204:	df000015 	stw	fp,0(sp)
 200f208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f20c:	d0a00b17 	ldw	r2,-32724(gp)
 200f210:	10000326 	beq	r2,zero,200f220 <alt_get_errno+0x24>
 200f214:	d0a00b17 	ldw	r2,-32724(gp)
 200f218:	103ee83a 	callr	r2
 200f21c:	00000106 	br	200f224 <alt_get_errno+0x28>
 200f220:	d0a6d204 	addi	r2,gp,-25784
}
 200f224:	e037883a 	mov	sp,fp
 200f228:	dfc00117 	ldw	ra,4(sp)
 200f22c:	df000017 	ldw	fp,0(sp)
 200f230:	dec00204 	addi	sp,sp,8
 200f234:	f800283a 	ret

0200f238 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200f238:	defffb04 	addi	sp,sp,-20
 200f23c:	dfc00415 	stw	ra,16(sp)
 200f240:	df000315 	stw	fp,12(sp)
 200f244:	df000304 	addi	fp,sp,12
 200f248:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200f24c:	e0bfff17 	ldw	r2,-4(fp)
 200f250:	10000816 	blt	r2,zero,200f274 <close+0x3c>
 200f254:	01400304 	movi	r5,12
 200f258:	e13fff17 	ldw	r4,-4(fp)
 200f25c:	200c9300 	call	200c930 <__mulsi3>
 200f260:	1007883a 	mov	r3,r2
 200f264:	00808074 	movhi	r2,513
 200f268:	108b5904 	addi	r2,r2,11620
 200f26c:	1885883a 	add	r2,r3,r2
 200f270:	00000106 	br	200f278 <close+0x40>
 200f274:	0005883a 	mov	r2,zero
 200f278:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200f27c:	e0bffd17 	ldw	r2,-12(fp)
 200f280:	10001926 	beq	r2,zero,200f2e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200f284:	e0bffd17 	ldw	r2,-12(fp)
 200f288:	10800017 	ldw	r2,0(r2)
 200f28c:	10800417 	ldw	r2,16(r2)
 200f290:	10000626 	beq	r2,zero,200f2ac <close+0x74>
 200f294:	e0bffd17 	ldw	r2,-12(fp)
 200f298:	10800017 	ldw	r2,0(r2)
 200f29c:	10800417 	ldw	r2,16(r2)
 200f2a0:	e13ffd17 	ldw	r4,-12(fp)
 200f2a4:	103ee83a 	callr	r2
 200f2a8:	00000106 	br	200f2b0 <close+0x78>
 200f2ac:	0005883a 	mov	r2,zero
 200f2b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200f2b4:	e13fff17 	ldw	r4,-4(fp)
 200f2b8:	200f9200 	call	200f920 <alt_release_fd>
    if (rval < 0)
 200f2bc:	e0bffe17 	ldw	r2,-8(fp)
 200f2c0:	1000070e 	bge	r2,zero,200f2e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200f2c4:	200f1fc0 	call	200f1fc <alt_get_errno>
 200f2c8:	1007883a 	mov	r3,r2
 200f2cc:	e0bffe17 	ldw	r2,-8(fp)
 200f2d0:	0085c83a 	sub	r2,zero,r2
 200f2d4:	18800015 	stw	r2,0(r3)
      return -1;
 200f2d8:	00bfffc4 	movi	r2,-1
 200f2dc:	00000706 	br	200f2fc <close+0xc4>
    }
    return 0;
 200f2e0:	0005883a 	mov	r2,zero
 200f2e4:	00000506 	br	200f2fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200f2e8:	200f1fc0 	call	200f1fc <alt_get_errno>
 200f2ec:	1007883a 	mov	r3,r2
 200f2f0:	00801444 	movi	r2,81
 200f2f4:	18800015 	stw	r2,0(r3)
    return -1;
 200f2f8:	00bfffc4 	movi	r2,-1
  }
}
 200f2fc:	e037883a 	mov	sp,fp
 200f300:	dfc00117 	ldw	ra,4(sp)
 200f304:	df000017 	ldw	fp,0(sp)
 200f308:	dec00204 	addi	sp,sp,8
 200f30c:	f800283a 	ret

0200f310 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200f310:	defffc04 	addi	sp,sp,-16
 200f314:	df000315 	stw	fp,12(sp)
 200f318:	df000304 	addi	fp,sp,12
 200f31c:	e13ffd15 	stw	r4,-12(fp)
 200f320:	e17ffe15 	stw	r5,-8(fp)
 200f324:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200f328:	e0bfff17 	ldw	r2,-4(fp)
}
 200f32c:	e037883a 	mov	sp,fp
 200f330:	df000017 	ldw	fp,0(sp)
 200f334:	dec00104 	addi	sp,sp,4
 200f338:	f800283a 	ret

0200f33c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f33c:	defffe04 	addi	sp,sp,-8
 200f340:	dfc00115 	stw	ra,4(sp)
 200f344:	df000015 	stw	fp,0(sp)
 200f348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f34c:	d0a00b17 	ldw	r2,-32724(gp)
 200f350:	10000326 	beq	r2,zero,200f360 <alt_get_errno+0x24>
 200f354:	d0a00b17 	ldw	r2,-32724(gp)
 200f358:	103ee83a 	callr	r2
 200f35c:	00000106 	br	200f364 <alt_get_errno+0x28>
 200f360:	d0a6d204 	addi	r2,gp,-25784
}
 200f364:	e037883a 	mov	sp,fp
 200f368:	dfc00117 	ldw	ra,4(sp)
 200f36c:	df000017 	ldw	fp,0(sp)
 200f370:	dec00204 	addi	sp,sp,8
 200f374:	f800283a 	ret

0200f378 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200f378:	defffb04 	addi	sp,sp,-20
 200f37c:	dfc00415 	stw	ra,16(sp)
 200f380:	df000315 	stw	fp,12(sp)
 200f384:	df000304 	addi	fp,sp,12
 200f388:	e13ffe15 	stw	r4,-8(fp)
 200f38c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f390:	e0bffe17 	ldw	r2,-8(fp)
 200f394:	10000816 	blt	r2,zero,200f3b8 <fstat+0x40>
 200f398:	01400304 	movi	r5,12
 200f39c:	e13ffe17 	ldw	r4,-8(fp)
 200f3a0:	200c9300 	call	200c930 <__mulsi3>
 200f3a4:	1007883a 	mov	r3,r2
 200f3a8:	00808074 	movhi	r2,513
 200f3ac:	108b5904 	addi	r2,r2,11620
 200f3b0:	1885883a 	add	r2,r3,r2
 200f3b4:	00000106 	br	200f3bc <fstat+0x44>
 200f3b8:	0005883a 	mov	r2,zero
 200f3bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200f3c0:	e0bffd17 	ldw	r2,-12(fp)
 200f3c4:	10001026 	beq	r2,zero,200f408 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200f3c8:	e0bffd17 	ldw	r2,-12(fp)
 200f3cc:	10800017 	ldw	r2,0(r2)
 200f3d0:	10800817 	ldw	r2,32(r2)
 200f3d4:	10000726 	beq	r2,zero,200f3f4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200f3d8:	e0bffd17 	ldw	r2,-12(fp)
 200f3dc:	10800017 	ldw	r2,0(r2)
 200f3e0:	10800817 	ldw	r2,32(r2)
 200f3e4:	e17fff17 	ldw	r5,-4(fp)
 200f3e8:	e13ffd17 	ldw	r4,-12(fp)
 200f3ec:	103ee83a 	callr	r2
 200f3f0:	00000a06 	br	200f41c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200f3f4:	e0bfff17 	ldw	r2,-4(fp)
 200f3f8:	00c80004 	movi	r3,8192
 200f3fc:	10c00115 	stw	r3,4(r2)
      return 0;
 200f400:	0005883a 	mov	r2,zero
 200f404:	00000506 	br	200f41c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200f408:	200f33c0 	call	200f33c <alt_get_errno>
 200f40c:	1007883a 	mov	r3,r2
 200f410:	00801444 	movi	r2,81
 200f414:	18800015 	stw	r2,0(r3)
    return -1;
 200f418:	00bfffc4 	movi	r2,-1
  }
}
 200f41c:	e037883a 	mov	sp,fp
 200f420:	dfc00117 	ldw	ra,4(sp)
 200f424:	df000017 	ldw	fp,0(sp)
 200f428:	dec00204 	addi	sp,sp,8
 200f42c:	f800283a 	ret

0200f430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f430:	defffe04 	addi	sp,sp,-8
 200f434:	dfc00115 	stw	ra,4(sp)
 200f438:	df000015 	stw	fp,0(sp)
 200f43c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f440:	d0a00b17 	ldw	r2,-32724(gp)
 200f444:	10000326 	beq	r2,zero,200f454 <alt_get_errno+0x24>
 200f448:	d0a00b17 	ldw	r2,-32724(gp)
 200f44c:	103ee83a 	callr	r2
 200f450:	00000106 	br	200f458 <alt_get_errno+0x28>
 200f454:	d0a6d204 	addi	r2,gp,-25784
}
 200f458:	e037883a 	mov	sp,fp
 200f45c:	dfc00117 	ldw	ra,4(sp)
 200f460:	df000017 	ldw	fp,0(sp)
 200f464:	dec00204 	addi	sp,sp,8
 200f468:	f800283a 	ret

0200f46c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200f46c:	deffed04 	addi	sp,sp,-76
 200f470:	dfc01215 	stw	ra,72(sp)
 200f474:	df001115 	stw	fp,68(sp)
 200f478:	df001104 	addi	fp,sp,68
 200f47c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f480:	e0bfff17 	ldw	r2,-4(fp)
 200f484:	10000816 	blt	r2,zero,200f4a8 <isatty+0x3c>
 200f488:	01400304 	movi	r5,12
 200f48c:	e13fff17 	ldw	r4,-4(fp)
 200f490:	200c9300 	call	200c930 <__mulsi3>
 200f494:	1007883a 	mov	r3,r2
 200f498:	00808074 	movhi	r2,513
 200f49c:	108b5904 	addi	r2,r2,11620
 200f4a0:	1885883a 	add	r2,r3,r2
 200f4a4:	00000106 	br	200f4ac <isatty+0x40>
 200f4a8:	0005883a 	mov	r2,zero
 200f4ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200f4b0:	e0bfef17 	ldw	r2,-68(fp)
 200f4b4:	10000e26 	beq	r2,zero,200f4f0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200f4b8:	e0bfef17 	ldw	r2,-68(fp)
 200f4bc:	10800017 	ldw	r2,0(r2)
 200f4c0:	10800817 	ldw	r2,32(r2)
 200f4c4:	1000021e 	bne	r2,zero,200f4d0 <isatty+0x64>
    {
      return 1;
 200f4c8:	00800044 	movi	r2,1
 200f4cc:	00000d06 	br	200f504 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200f4d0:	e0bff004 	addi	r2,fp,-64
 200f4d4:	100b883a 	mov	r5,r2
 200f4d8:	e13fff17 	ldw	r4,-4(fp)
 200f4dc:	200f3780 	call	200f378 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200f4e0:	e0bff117 	ldw	r2,-60(fp)
 200f4e4:	10880020 	cmpeqi	r2,r2,8192
 200f4e8:	10803fcc 	andi	r2,r2,255
 200f4ec:	00000506 	br	200f504 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200f4f0:	200f4300 	call	200f430 <alt_get_errno>
 200f4f4:	1007883a 	mov	r3,r2
 200f4f8:	00801444 	movi	r2,81
 200f4fc:	18800015 	stw	r2,0(r3)
    return 0;
 200f500:	0005883a 	mov	r2,zero
  }
}
 200f504:	e037883a 	mov	sp,fp
 200f508:	dfc00117 	ldw	ra,4(sp)
 200f50c:	df000017 	ldw	fp,0(sp)
 200f510:	dec00204 	addi	sp,sp,8
 200f514:	f800283a 	ret

0200f518 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200f518:	defffc04 	addi	sp,sp,-16
 200f51c:	df000315 	stw	fp,12(sp)
 200f520:	df000304 	addi	fp,sp,12
 200f524:	e13ffd15 	stw	r4,-12(fp)
 200f528:	e17ffe15 	stw	r5,-8(fp)
 200f52c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200f530:	e0fffe17 	ldw	r3,-8(fp)
 200f534:	e0bffd17 	ldw	r2,-12(fp)
 200f538:	18800c26 	beq	r3,r2,200f56c <alt_load_section+0x54>
  {
    while( to != end )
 200f53c:	00000806 	br	200f560 <alt_load_section+0x48>
    {
      *to++ = *from++;
 200f540:	e0bffe17 	ldw	r2,-8(fp)
 200f544:	10c00104 	addi	r3,r2,4
 200f548:	e0fffe15 	stw	r3,-8(fp)
 200f54c:	e0fffd17 	ldw	r3,-12(fp)
 200f550:	19000104 	addi	r4,r3,4
 200f554:	e13ffd15 	stw	r4,-12(fp)
 200f558:	18c00017 	ldw	r3,0(r3)
 200f55c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200f560:	e0fffe17 	ldw	r3,-8(fp)
 200f564:	e0bfff17 	ldw	r2,-4(fp)
 200f568:	18bff51e 	bne	r3,r2,200f540 <__alt_data_end+0xff00f540>
    {
      *to++ = *from++;
    }
  }
}
 200f56c:	0001883a 	nop
 200f570:	e037883a 	mov	sp,fp
 200f574:	df000017 	ldw	fp,0(sp)
 200f578:	dec00104 	addi	sp,sp,4
 200f57c:	f800283a 	ret

0200f580 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200f580:	defffe04 	addi	sp,sp,-8
 200f584:	dfc00115 	stw	ra,4(sp)
 200f588:	df000015 	stw	fp,0(sp)
 200f58c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200f590:	01808074 	movhi	r6,513
 200f594:	318fe104 	addi	r6,r6,16260
 200f598:	01408074 	movhi	r5,513
 200f59c:	29492604 	addi	r5,r5,9368
 200f5a0:	01008074 	movhi	r4,513
 200f5a4:	210fe104 	addi	r4,r4,16260
 200f5a8:	200f5180 	call	200f518 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200f5ac:	01808034 	movhi	r6,512
 200f5b0:	31808c04 	addi	r6,r6,560
 200f5b4:	01408034 	movhi	r5,512
 200f5b8:	29400804 	addi	r5,r5,32
 200f5bc:	01008034 	movhi	r4,512
 200f5c0:	21000804 	addi	r4,r4,32
 200f5c4:	200f5180 	call	200f518 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200f5c8:	01808074 	movhi	r6,513
 200f5cc:	31892604 	addi	r6,r6,9368
 200f5d0:	01408074 	movhi	r5,513
 200f5d4:	29468704 	addi	r5,r5,6684
 200f5d8:	01008074 	movhi	r4,513
 200f5dc:	21068704 	addi	r4,r4,6684
 200f5e0:	200f5180 	call	200f518 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200f5e4:	20109640 	call	2010964 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200f5e8:	2010b240 	call	2010b24 <alt_icache_flush_all>
}
 200f5ec:	0001883a 	nop
 200f5f0:	e037883a 	mov	sp,fp
 200f5f4:	dfc00117 	ldw	ra,4(sp)
 200f5f8:	df000017 	ldw	fp,0(sp)
 200f5fc:	dec00204 	addi	sp,sp,8
 200f600:	f800283a 	ret

0200f604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f604:	defffe04 	addi	sp,sp,-8
 200f608:	dfc00115 	stw	ra,4(sp)
 200f60c:	df000015 	stw	fp,0(sp)
 200f610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f614:	d0a00b17 	ldw	r2,-32724(gp)
 200f618:	10000326 	beq	r2,zero,200f628 <alt_get_errno+0x24>
 200f61c:	d0a00b17 	ldw	r2,-32724(gp)
 200f620:	103ee83a 	callr	r2
 200f624:	00000106 	br	200f62c <alt_get_errno+0x28>
 200f628:	d0a6d204 	addi	r2,gp,-25784
}
 200f62c:	e037883a 	mov	sp,fp
 200f630:	dfc00117 	ldw	ra,4(sp)
 200f634:	df000017 	ldw	fp,0(sp)
 200f638:	dec00204 	addi	sp,sp,8
 200f63c:	f800283a 	ret

0200f640 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200f640:	defff904 	addi	sp,sp,-28
 200f644:	dfc00615 	stw	ra,24(sp)
 200f648:	df000515 	stw	fp,20(sp)
 200f64c:	df000504 	addi	fp,sp,20
 200f650:	e13ffd15 	stw	r4,-12(fp)
 200f654:	e17ffe15 	stw	r5,-8(fp)
 200f658:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200f65c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f660:	e0bffd17 	ldw	r2,-12(fp)
 200f664:	10000816 	blt	r2,zero,200f688 <lseek+0x48>
 200f668:	01400304 	movi	r5,12
 200f66c:	e13ffd17 	ldw	r4,-12(fp)
 200f670:	200c9300 	call	200c930 <__mulsi3>
 200f674:	1007883a 	mov	r3,r2
 200f678:	00808074 	movhi	r2,513
 200f67c:	108b5904 	addi	r2,r2,11620
 200f680:	1885883a 	add	r2,r3,r2
 200f684:	00000106 	br	200f68c <lseek+0x4c>
 200f688:	0005883a 	mov	r2,zero
 200f68c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200f690:	e0bffc17 	ldw	r2,-16(fp)
 200f694:	10001026 	beq	r2,zero,200f6d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200f698:	e0bffc17 	ldw	r2,-16(fp)
 200f69c:	10800017 	ldw	r2,0(r2)
 200f6a0:	10800717 	ldw	r2,28(r2)
 200f6a4:	10000926 	beq	r2,zero,200f6cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200f6a8:	e0bffc17 	ldw	r2,-16(fp)
 200f6ac:	10800017 	ldw	r2,0(r2)
 200f6b0:	10800717 	ldw	r2,28(r2)
 200f6b4:	e1bfff17 	ldw	r6,-4(fp)
 200f6b8:	e17ffe17 	ldw	r5,-8(fp)
 200f6bc:	e13ffc17 	ldw	r4,-16(fp)
 200f6c0:	103ee83a 	callr	r2
 200f6c4:	e0bffb15 	stw	r2,-20(fp)
 200f6c8:	00000506 	br	200f6e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200f6cc:	00bfde84 	movi	r2,-134
 200f6d0:	e0bffb15 	stw	r2,-20(fp)
 200f6d4:	00000206 	br	200f6e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200f6d8:	00bfebc4 	movi	r2,-81
 200f6dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200f6e0:	e0bffb17 	ldw	r2,-20(fp)
 200f6e4:	1000070e 	bge	r2,zero,200f704 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 200f6e8:	200f6040 	call	200f604 <alt_get_errno>
 200f6ec:	1007883a 	mov	r3,r2
 200f6f0:	e0bffb17 	ldw	r2,-20(fp)
 200f6f4:	0085c83a 	sub	r2,zero,r2
 200f6f8:	18800015 	stw	r2,0(r3)
    rc = -1;
 200f6fc:	00bfffc4 	movi	r2,-1
 200f700:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200f704:	e0bffb17 	ldw	r2,-20(fp)
}
 200f708:	e037883a 	mov	sp,fp
 200f70c:	dfc00117 	ldw	ra,4(sp)
 200f710:	df000017 	ldw	fp,0(sp)
 200f714:	dec00204 	addi	sp,sp,8
 200f718:	f800283a 	ret

0200f71c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200f71c:	defffd04 	addi	sp,sp,-12
 200f720:	dfc00215 	stw	ra,8(sp)
 200f724:	df000115 	stw	fp,4(sp)
 200f728:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200f72c:	0009883a 	mov	r4,zero
 200f730:	200fbf40 	call	200fbf4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200f734:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200f738:	200fc2c0 	call	200fc2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200f73c:	01808074 	movhi	r6,513
 200f740:	31891c04 	addi	r6,r6,9328
 200f744:	01408074 	movhi	r5,513
 200f748:	29491c04 	addi	r5,r5,9328
 200f74c:	01008074 	movhi	r4,513
 200f750:	21091c04 	addi	r4,r4,9328
 200f754:	2010ec80 	call	2010ec8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200f758:	2010a640 	call	2010a64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200f75c:	01008074 	movhi	r4,513
 200f760:	2102b104 	addi	r4,r4,2756
 200f764:	20116880 	call	2011688 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200f768:	d0a6d317 	ldw	r2,-25780(gp)
 200f76c:	d0e6d417 	ldw	r3,-25776(gp)
 200f770:	d126d517 	ldw	r4,-25772(gp)
 200f774:	200d883a 	mov	r6,r4
 200f778:	180b883a 	mov	r5,r3
 200f77c:	1009883a 	mov	r4,r2
 200f780:	20003cc0 	call	20003cc <main>
 200f784:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200f788:	01000044 	movi	r4,1
 200f78c:	200f2380 	call	200f238 <close>
  exit (result);
 200f790:	e13fff17 	ldw	r4,-4(fp)
 200f794:	201169c0 	call	201169c <exit>

0200f798 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200f798:	defffe04 	addi	sp,sp,-8
 200f79c:	df000115 	stw	fp,4(sp)
 200f7a0:	df000104 	addi	fp,sp,4
 200f7a4:	e13fff15 	stw	r4,-4(fp)
}
 200f7a8:	0001883a 	nop
 200f7ac:	e037883a 	mov	sp,fp
 200f7b0:	df000017 	ldw	fp,0(sp)
 200f7b4:	dec00104 	addi	sp,sp,4
 200f7b8:	f800283a 	ret

0200f7bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200f7bc:	defffe04 	addi	sp,sp,-8
 200f7c0:	df000115 	stw	fp,4(sp)
 200f7c4:	df000104 	addi	fp,sp,4
 200f7c8:	e13fff15 	stw	r4,-4(fp)
}
 200f7cc:	0001883a 	nop
 200f7d0:	e037883a 	mov	sp,fp
 200f7d4:	df000017 	ldw	fp,0(sp)
 200f7d8:	dec00104 	addi	sp,sp,4
 200f7dc:	f800283a 	ret

0200f7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f7e0:	defffe04 	addi	sp,sp,-8
 200f7e4:	dfc00115 	stw	ra,4(sp)
 200f7e8:	df000015 	stw	fp,0(sp)
 200f7ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200f7f0:	d0a00b17 	ldw	r2,-32724(gp)
 200f7f4:	10000326 	beq	r2,zero,200f804 <alt_get_errno+0x24>
 200f7f8:	d0a00b17 	ldw	r2,-32724(gp)
 200f7fc:	103ee83a 	callr	r2
 200f800:	00000106 	br	200f808 <alt_get_errno+0x28>
 200f804:	d0a6d204 	addi	r2,gp,-25784
}
 200f808:	e037883a 	mov	sp,fp
 200f80c:	dfc00117 	ldw	ra,4(sp)
 200f810:	df000017 	ldw	fp,0(sp)
 200f814:	dec00204 	addi	sp,sp,8
 200f818:	f800283a 	ret

0200f81c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200f81c:	defff904 	addi	sp,sp,-28
 200f820:	dfc00615 	stw	ra,24(sp)
 200f824:	df000515 	stw	fp,20(sp)
 200f828:	df000504 	addi	fp,sp,20
 200f82c:	e13ffd15 	stw	r4,-12(fp)
 200f830:	e17ffe15 	stw	r5,-8(fp)
 200f834:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f838:	e0bffd17 	ldw	r2,-12(fp)
 200f83c:	10000816 	blt	r2,zero,200f860 <read+0x44>
 200f840:	01400304 	movi	r5,12
 200f844:	e13ffd17 	ldw	r4,-12(fp)
 200f848:	200c9300 	call	200c930 <__mulsi3>
 200f84c:	1007883a 	mov	r3,r2
 200f850:	00808074 	movhi	r2,513
 200f854:	108b5904 	addi	r2,r2,11620
 200f858:	1885883a 	add	r2,r3,r2
 200f85c:	00000106 	br	200f864 <read+0x48>
 200f860:	0005883a 	mov	r2,zero
 200f864:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200f868:	e0bffb17 	ldw	r2,-20(fp)
 200f86c:	10002226 	beq	r2,zero,200f8f8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200f870:	e0bffb17 	ldw	r2,-20(fp)
 200f874:	10800217 	ldw	r2,8(r2)
 200f878:	108000cc 	andi	r2,r2,3
 200f87c:	10800060 	cmpeqi	r2,r2,1
 200f880:	1000181e 	bne	r2,zero,200f8e4 <read+0xc8>
        (fd->dev->read))
 200f884:	e0bffb17 	ldw	r2,-20(fp)
 200f888:	10800017 	ldw	r2,0(r2)
 200f88c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200f890:	10001426 	beq	r2,zero,200f8e4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200f894:	e0bffb17 	ldw	r2,-20(fp)
 200f898:	10800017 	ldw	r2,0(r2)
 200f89c:	10800517 	ldw	r2,20(r2)
 200f8a0:	e0ffff17 	ldw	r3,-4(fp)
 200f8a4:	180d883a 	mov	r6,r3
 200f8a8:	e17ffe17 	ldw	r5,-8(fp)
 200f8ac:	e13ffb17 	ldw	r4,-20(fp)
 200f8b0:	103ee83a 	callr	r2
 200f8b4:	e0bffc15 	stw	r2,-16(fp)
 200f8b8:	e0bffc17 	ldw	r2,-16(fp)
 200f8bc:	1000070e 	bge	r2,zero,200f8dc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200f8c0:	200f7e00 	call	200f7e0 <alt_get_errno>
 200f8c4:	1007883a 	mov	r3,r2
 200f8c8:	e0bffc17 	ldw	r2,-16(fp)
 200f8cc:	0085c83a 	sub	r2,zero,r2
 200f8d0:	18800015 	stw	r2,0(r3)
          return -1;
 200f8d4:	00bfffc4 	movi	r2,-1
 200f8d8:	00000c06 	br	200f90c <read+0xf0>
        }
        return rval;
 200f8dc:	e0bffc17 	ldw	r2,-16(fp)
 200f8e0:	00000a06 	br	200f90c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200f8e4:	200f7e00 	call	200f7e0 <alt_get_errno>
 200f8e8:	1007883a 	mov	r3,r2
 200f8ec:	00800344 	movi	r2,13
 200f8f0:	18800015 	stw	r2,0(r3)
 200f8f4:	00000406 	br	200f908 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200f8f8:	200f7e00 	call	200f7e0 <alt_get_errno>
 200f8fc:	1007883a 	mov	r3,r2
 200f900:	00801444 	movi	r2,81
 200f904:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200f908:	00bfffc4 	movi	r2,-1
}
 200f90c:	e037883a 	mov	sp,fp
 200f910:	dfc00117 	ldw	ra,4(sp)
 200f914:	df000017 	ldw	fp,0(sp)
 200f918:	dec00204 	addi	sp,sp,8
 200f91c:	f800283a 	ret

0200f920 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200f920:	defffc04 	addi	sp,sp,-16
 200f924:	dfc00315 	stw	ra,12(sp)
 200f928:	df000215 	stw	fp,8(sp)
 200f92c:	dc000115 	stw	r16,4(sp)
 200f930:	df000204 	addi	fp,sp,8
 200f934:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200f938:	e0bffe17 	ldw	r2,-8(fp)
 200f93c:	108000d0 	cmplti	r2,r2,3
 200f940:	1000111e 	bne	r2,zero,200f988 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200f944:	04008074 	movhi	r16,513
 200f948:	840b5904 	addi	r16,r16,11620
 200f94c:	e0bffe17 	ldw	r2,-8(fp)
 200f950:	01400304 	movi	r5,12
 200f954:	1009883a 	mov	r4,r2
 200f958:	200c9300 	call	200c930 <__mulsi3>
 200f95c:	8085883a 	add	r2,r16,r2
 200f960:	10800204 	addi	r2,r2,8
 200f964:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200f968:	04008074 	movhi	r16,513
 200f96c:	840b5904 	addi	r16,r16,11620
 200f970:	e0bffe17 	ldw	r2,-8(fp)
 200f974:	01400304 	movi	r5,12
 200f978:	1009883a 	mov	r4,r2
 200f97c:	200c9300 	call	200c930 <__mulsi3>
 200f980:	8085883a 	add	r2,r16,r2
 200f984:	10000015 	stw	zero,0(r2)
  }
}
 200f988:	0001883a 	nop
 200f98c:	e6ffff04 	addi	sp,fp,-4
 200f990:	dfc00217 	ldw	ra,8(sp)
 200f994:	df000117 	ldw	fp,4(sp)
 200f998:	dc000017 	ldw	r16,0(sp)
 200f99c:	dec00304 	addi	sp,sp,12
 200f9a0:	f800283a 	ret

0200f9a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200f9a4:	defff904 	addi	sp,sp,-28
 200f9a8:	df000615 	stw	fp,24(sp)
 200f9ac:	df000604 	addi	fp,sp,24
 200f9b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f9b4:	0005303a 	rdctl	r2,status
 200f9b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f9bc:	e0fffe17 	ldw	r3,-8(fp)
 200f9c0:	00bfff84 	movi	r2,-2
 200f9c4:	1884703a 	and	r2,r3,r2
 200f9c8:	1001703a 	wrctl	status,r2
  
  return context;
 200f9cc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200f9d0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200f9d4:	d0a00c17 	ldw	r2,-32720(gp)
 200f9d8:	10c000c4 	addi	r3,r2,3
 200f9dc:	00bfff04 	movi	r2,-4
 200f9e0:	1884703a 	and	r2,r3,r2
 200f9e4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200f9e8:	d0e00c17 	ldw	r3,-32720(gp)
 200f9ec:	e0bfff17 	ldw	r2,-4(fp)
 200f9f0:	1887883a 	add	r3,r3,r2
 200f9f4:	0080c034 	movhi	r2,768
 200f9f8:	10800004 	addi	r2,r2,0
 200f9fc:	10c0062e 	bgeu	r2,r3,200fa18 <sbrk+0x74>
 200fa00:	e0bffb17 	ldw	r2,-20(fp)
 200fa04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fa08:	e0bffa17 	ldw	r2,-24(fp)
 200fa0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200fa10:	00bfffc4 	movi	r2,-1
 200fa14:	00000b06 	br	200fa44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200fa18:	d0a00c17 	ldw	r2,-32720(gp)
 200fa1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 200fa20:	d0e00c17 	ldw	r3,-32720(gp)
 200fa24:	e0bfff17 	ldw	r2,-4(fp)
 200fa28:	1885883a 	add	r2,r3,r2
 200fa2c:	d0a00c15 	stw	r2,-32720(gp)
 200fa30:	e0bffb17 	ldw	r2,-20(fp)
 200fa34:	e0bffc15 	stw	r2,-16(fp)
 200fa38:	e0bffc17 	ldw	r2,-16(fp)
 200fa3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200fa40:	e0bffd17 	ldw	r2,-12(fp)
} 
 200fa44:	e037883a 	mov	sp,fp
 200fa48:	df000017 	ldw	fp,0(sp)
 200fa4c:	dec00104 	addi	sp,sp,4
 200fa50:	f800283a 	ret

0200fa54 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200fa54:	defffd04 	addi	sp,sp,-12
 200fa58:	dfc00215 	stw	ra,8(sp)
 200fa5c:	df000115 	stw	fp,4(sp)
 200fa60:	df000104 	addi	fp,sp,4
 200fa64:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200fa68:	e13fff17 	ldw	r4,-4(fp)
 200fa6c:	201080c0 	call	201080c <alt_busy_sleep>
}
 200fa70:	e037883a 	mov	sp,fp
 200fa74:	dfc00117 	ldw	ra,4(sp)
 200fa78:	df000017 	ldw	fp,0(sp)
 200fa7c:	dec00204 	addi	sp,sp,8
 200fa80:	f800283a 	ret

0200fa84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200fa84:	defffe04 	addi	sp,sp,-8
 200fa88:	dfc00115 	stw	ra,4(sp)
 200fa8c:	df000015 	stw	fp,0(sp)
 200fa90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200fa94:	d0a00b17 	ldw	r2,-32724(gp)
 200fa98:	10000326 	beq	r2,zero,200faa8 <alt_get_errno+0x24>
 200fa9c:	d0a00b17 	ldw	r2,-32724(gp)
 200faa0:	103ee83a 	callr	r2
 200faa4:	00000106 	br	200faac <alt_get_errno+0x28>
 200faa8:	d0a6d204 	addi	r2,gp,-25784
}
 200faac:	e037883a 	mov	sp,fp
 200fab0:	dfc00117 	ldw	ra,4(sp)
 200fab4:	df000017 	ldw	fp,0(sp)
 200fab8:	dec00204 	addi	sp,sp,8
 200fabc:	f800283a 	ret

0200fac0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200fac0:	defff904 	addi	sp,sp,-28
 200fac4:	dfc00615 	stw	ra,24(sp)
 200fac8:	df000515 	stw	fp,20(sp)
 200facc:	df000504 	addi	fp,sp,20
 200fad0:	e13ffd15 	stw	r4,-12(fp)
 200fad4:	e17ffe15 	stw	r5,-8(fp)
 200fad8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200fadc:	e0bffd17 	ldw	r2,-12(fp)
 200fae0:	10000816 	blt	r2,zero,200fb04 <write+0x44>
 200fae4:	01400304 	movi	r5,12
 200fae8:	e13ffd17 	ldw	r4,-12(fp)
 200faec:	200c9300 	call	200c930 <__mulsi3>
 200faf0:	1007883a 	mov	r3,r2
 200faf4:	00808074 	movhi	r2,513
 200faf8:	108b5904 	addi	r2,r2,11620
 200fafc:	1885883a 	add	r2,r3,r2
 200fb00:	00000106 	br	200fb08 <write+0x48>
 200fb04:	0005883a 	mov	r2,zero
 200fb08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200fb0c:	e0bffb17 	ldw	r2,-20(fp)
 200fb10:	10002126 	beq	r2,zero,200fb98 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200fb14:	e0bffb17 	ldw	r2,-20(fp)
 200fb18:	10800217 	ldw	r2,8(r2)
 200fb1c:	108000cc 	andi	r2,r2,3
 200fb20:	10001826 	beq	r2,zero,200fb84 <write+0xc4>
 200fb24:	e0bffb17 	ldw	r2,-20(fp)
 200fb28:	10800017 	ldw	r2,0(r2)
 200fb2c:	10800617 	ldw	r2,24(r2)
 200fb30:	10001426 	beq	r2,zero,200fb84 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200fb34:	e0bffb17 	ldw	r2,-20(fp)
 200fb38:	10800017 	ldw	r2,0(r2)
 200fb3c:	10800617 	ldw	r2,24(r2)
 200fb40:	e0ffff17 	ldw	r3,-4(fp)
 200fb44:	180d883a 	mov	r6,r3
 200fb48:	e17ffe17 	ldw	r5,-8(fp)
 200fb4c:	e13ffb17 	ldw	r4,-20(fp)
 200fb50:	103ee83a 	callr	r2
 200fb54:	e0bffc15 	stw	r2,-16(fp)
 200fb58:	e0bffc17 	ldw	r2,-16(fp)
 200fb5c:	1000070e 	bge	r2,zero,200fb7c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200fb60:	200fa840 	call	200fa84 <alt_get_errno>
 200fb64:	1007883a 	mov	r3,r2
 200fb68:	e0bffc17 	ldw	r2,-16(fp)
 200fb6c:	0085c83a 	sub	r2,zero,r2
 200fb70:	18800015 	stw	r2,0(r3)
        return -1;
 200fb74:	00bfffc4 	movi	r2,-1
 200fb78:	00000c06 	br	200fbac <write+0xec>
      }
      return rval;
 200fb7c:	e0bffc17 	ldw	r2,-16(fp)
 200fb80:	00000a06 	br	200fbac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200fb84:	200fa840 	call	200fa84 <alt_get_errno>
 200fb88:	1007883a 	mov	r3,r2
 200fb8c:	00800344 	movi	r2,13
 200fb90:	18800015 	stw	r2,0(r3)
 200fb94:	00000406 	br	200fba8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200fb98:	200fa840 	call	200fa84 <alt_get_errno>
 200fb9c:	1007883a 	mov	r3,r2
 200fba0:	00801444 	movi	r2,81
 200fba4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200fba8:	00bfffc4 	movi	r2,-1
}
 200fbac:	e037883a 	mov	sp,fp
 200fbb0:	dfc00117 	ldw	ra,4(sp)
 200fbb4:	df000017 	ldw	fp,0(sp)
 200fbb8:	dec00204 	addi	sp,sp,8
 200fbbc:	f800283a 	ret

0200fbc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200fbc0:	defffd04 	addi	sp,sp,-12
 200fbc4:	dfc00215 	stw	ra,8(sp)
 200fbc8:	df000115 	stw	fp,4(sp)
 200fbcc:	df000104 	addi	fp,sp,4
 200fbd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200fbd4:	d1600804 	addi	r5,gp,-32736
 200fbd8:	e13fff17 	ldw	r4,-4(fp)
 200fbdc:	20109c00 	call	20109c0 <alt_dev_llist_insert>
}
 200fbe0:	e037883a 	mov	sp,fp
 200fbe4:	dfc00117 	ldw	ra,4(sp)
 200fbe8:	df000017 	ldw	fp,0(sp)
 200fbec:	dec00204 	addi	sp,sp,8
 200fbf0:	f800283a 	ret

0200fbf4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200fbf4:	defffd04 	addi	sp,sp,-12
 200fbf8:	dfc00215 	stw	ra,8(sp)
 200fbfc:	df000115 	stw	fp,4(sp)
 200fc00:	df000104 	addi	fp,sp,4
 200fc04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 200fc08:	201136c0 	call	201136c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200fc0c:	00800044 	movi	r2,1
 200fc10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200fc14:	0001883a 	nop
 200fc18:	e037883a 	mov	sp,fp
 200fc1c:	dfc00117 	ldw	ra,4(sp)
 200fc20:	df000017 	ldw	fp,0(sp)
 200fc24:	dec00204 	addi	sp,sp,8
 200fc28:	f800283a 	ret

0200fc2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200fc2c:	defffe04 	addi	sp,sp,-8
 200fc30:	dfc00115 	stw	ra,4(sp)
 200fc34:	df000015 	stw	fp,0(sp)
 200fc38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 200fc3c:	01800144 	movi	r6,5
 200fc40:	000b883a 	mov	r5,zero
 200fc44:	01008074 	movhi	r4,513
 200fc48:	210bc304 	addi	r4,r4,12044
 200fc4c:	200fddc0 	call	200fddc <altera_avalon_jtag_uart_init>
 200fc50:	01008074 	movhi	r4,513
 200fc54:	210bb904 	addi	r4,r4,12004
 200fc58:	200fbc00 	call	200fbc0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 200fc5c:	0001883a 	nop
}
 200fc60:	0001883a 	nop
 200fc64:	e037883a 	mov	sp,fp
 200fc68:	dfc00117 	ldw	ra,4(sp)
 200fc6c:	df000017 	ldw	fp,0(sp)
 200fc70:	dec00204 	addi	sp,sp,8
 200fc74:	f800283a 	ret

0200fc78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200fc78:	defffa04 	addi	sp,sp,-24
 200fc7c:	dfc00515 	stw	ra,20(sp)
 200fc80:	df000415 	stw	fp,16(sp)
 200fc84:	df000404 	addi	fp,sp,16
 200fc88:	e13ffd15 	stw	r4,-12(fp)
 200fc8c:	e17ffe15 	stw	r5,-8(fp)
 200fc90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200fc94:	e0bffd17 	ldw	r2,-12(fp)
 200fc98:	10800017 	ldw	r2,0(r2)
 200fc9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200fca0:	e0bffc17 	ldw	r2,-16(fp)
 200fca4:	10c00a04 	addi	r3,r2,40
 200fca8:	e0bffd17 	ldw	r2,-12(fp)
 200fcac:	10800217 	ldw	r2,8(r2)
 200fcb0:	100f883a 	mov	r7,r2
 200fcb4:	e1bfff17 	ldw	r6,-4(fp)
 200fcb8:	e17ffe17 	ldw	r5,-8(fp)
 200fcbc:	1809883a 	mov	r4,r3
 200fcc0:	20102a00 	call	20102a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200fcc4:	e037883a 	mov	sp,fp
 200fcc8:	dfc00117 	ldw	ra,4(sp)
 200fccc:	df000017 	ldw	fp,0(sp)
 200fcd0:	dec00204 	addi	sp,sp,8
 200fcd4:	f800283a 	ret

0200fcd8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200fcd8:	defffa04 	addi	sp,sp,-24
 200fcdc:	dfc00515 	stw	ra,20(sp)
 200fce0:	df000415 	stw	fp,16(sp)
 200fce4:	df000404 	addi	fp,sp,16
 200fce8:	e13ffd15 	stw	r4,-12(fp)
 200fcec:	e17ffe15 	stw	r5,-8(fp)
 200fcf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200fcf4:	e0bffd17 	ldw	r2,-12(fp)
 200fcf8:	10800017 	ldw	r2,0(r2)
 200fcfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200fd00:	e0bffc17 	ldw	r2,-16(fp)
 200fd04:	10c00a04 	addi	r3,r2,40
 200fd08:	e0bffd17 	ldw	r2,-12(fp)
 200fd0c:	10800217 	ldw	r2,8(r2)
 200fd10:	100f883a 	mov	r7,r2
 200fd14:	e1bfff17 	ldw	r6,-4(fp)
 200fd18:	e17ffe17 	ldw	r5,-8(fp)
 200fd1c:	1809883a 	mov	r4,r3
 200fd20:	20104bc0 	call	20104bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200fd24:	e037883a 	mov	sp,fp
 200fd28:	dfc00117 	ldw	ra,4(sp)
 200fd2c:	df000017 	ldw	fp,0(sp)
 200fd30:	dec00204 	addi	sp,sp,8
 200fd34:	f800283a 	ret

0200fd38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200fd38:	defffc04 	addi	sp,sp,-16
 200fd3c:	dfc00315 	stw	ra,12(sp)
 200fd40:	df000215 	stw	fp,8(sp)
 200fd44:	df000204 	addi	fp,sp,8
 200fd48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200fd4c:	e0bfff17 	ldw	r2,-4(fp)
 200fd50:	10800017 	ldw	r2,0(r2)
 200fd54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200fd58:	e0bffe17 	ldw	r2,-8(fp)
 200fd5c:	10c00a04 	addi	r3,r2,40
 200fd60:	e0bfff17 	ldw	r2,-4(fp)
 200fd64:	10800217 	ldw	r2,8(r2)
 200fd68:	100b883a 	mov	r5,r2
 200fd6c:	1809883a 	mov	r4,r3
 200fd70:	20101480 	call	2010148 <altera_avalon_jtag_uart_close>
}
 200fd74:	e037883a 	mov	sp,fp
 200fd78:	dfc00117 	ldw	ra,4(sp)
 200fd7c:	df000017 	ldw	fp,0(sp)
 200fd80:	dec00204 	addi	sp,sp,8
 200fd84:	f800283a 	ret

0200fd88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200fd88:	defffa04 	addi	sp,sp,-24
 200fd8c:	dfc00515 	stw	ra,20(sp)
 200fd90:	df000415 	stw	fp,16(sp)
 200fd94:	df000404 	addi	fp,sp,16
 200fd98:	e13ffd15 	stw	r4,-12(fp)
 200fd9c:	e17ffe15 	stw	r5,-8(fp)
 200fda0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200fda4:	e0bffd17 	ldw	r2,-12(fp)
 200fda8:	10800017 	ldw	r2,0(r2)
 200fdac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200fdb0:	e0bffc17 	ldw	r2,-16(fp)
 200fdb4:	10800a04 	addi	r2,r2,40
 200fdb8:	e1bfff17 	ldw	r6,-4(fp)
 200fdbc:	e17ffe17 	ldw	r5,-8(fp)
 200fdc0:	1009883a 	mov	r4,r2
 200fdc4:	20101b00 	call	20101b0 <altera_avalon_jtag_uart_ioctl>
}
 200fdc8:	e037883a 	mov	sp,fp
 200fdcc:	dfc00117 	ldw	ra,4(sp)
 200fdd0:	df000017 	ldw	fp,0(sp)
 200fdd4:	dec00204 	addi	sp,sp,8
 200fdd8:	f800283a 	ret

0200fddc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200fddc:	defffa04 	addi	sp,sp,-24
 200fde0:	dfc00515 	stw	ra,20(sp)
 200fde4:	df000415 	stw	fp,16(sp)
 200fde8:	df000404 	addi	fp,sp,16
 200fdec:	e13ffd15 	stw	r4,-12(fp)
 200fdf0:	e17ffe15 	stw	r5,-8(fp)
 200fdf4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200fdf8:	e0bffd17 	ldw	r2,-12(fp)
 200fdfc:	00c00044 	movi	r3,1
 200fe00:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200fe04:	e0bffd17 	ldw	r2,-12(fp)
 200fe08:	10800017 	ldw	r2,0(r2)
 200fe0c:	10800104 	addi	r2,r2,4
 200fe10:	1007883a 	mov	r3,r2
 200fe14:	e0bffd17 	ldw	r2,-12(fp)
 200fe18:	10800817 	ldw	r2,32(r2)
 200fe1c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200fe20:	e0bffe17 	ldw	r2,-8(fp)
 200fe24:	e0ffff17 	ldw	r3,-4(fp)
 200fe28:	d8000015 	stw	zero,0(sp)
 200fe2c:	e1fffd17 	ldw	r7,-12(fp)
 200fe30:	01808074 	movhi	r6,513
 200fe34:	31bfa704 	addi	r6,r6,-356
 200fe38:	180b883a 	mov	r5,r3
 200fe3c:	1009883a 	mov	r4,r2
 200fe40:	2010b440 	call	2010b44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200fe44:	e0bffd17 	ldw	r2,-12(fp)
 200fe48:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200fe4c:	e0bffd17 	ldw	r2,-12(fp)
 200fe50:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200fe54:	d0e6d717 	ldw	r3,-25764(gp)
 200fe58:	e1fffd17 	ldw	r7,-12(fp)
 200fe5c:	01808074 	movhi	r6,513
 200fe60:	31802a04 	addi	r6,r6,168
 200fe64:	180b883a 	mov	r5,r3
 200fe68:	1009883a 	mov	r4,r2
 200fe6c:	20106e00 	call	20106e0 <alt_alarm_start>
 200fe70:	1000040e 	bge	r2,zero,200fe84 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200fe74:	e0fffd17 	ldw	r3,-12(fp)
 200fe78:	00a00034 	movhi	r2,32768
 200fe7c:	10bfffc4 	addi	r2,r2,-1
 200fe80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200fe84:	0001883a 	nop
 200fe88:	e037883a 	mov	sp,fp
 200fe8c:	dfc00117 	ldw	ra,4(sp)
 200fe90:	df000017 	ldw	fp,0(sp)
 200fe94:	dec00204 	addi	sp,sp,8
 200fe98:	f800283a 	ret

0200fe9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200fe9c:	defff804 	addi	sp,sp,-32
 200fea0:	df000715 	stw	fp,28(sp)
 200fea4:	df000704 	addi	fp,sp,28
 200fea8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200feac:	e0bfff17 	ldw	r2,-4(fp)
 200feb0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200feb4:	e0bffb17 	ldw	r2,-20(fp)
 200feb8:	10800017 	ldw	r2,0(r2)
 200febc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200fec0:	e0bffc17 	ldw	r2,-16(fp)
 200fec4:	10800104 	addi	r2,r2,4
 200fec8:	10800037 	ldwio	r2,0(r2)
 200fecc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200fed0:	e0bffd17 	ldw	r2,-12(fp)
 200fed4:	1080c00c 	andi	r2,r2,768
 200fed8:	10006d26 	beq	r2,zero,2010090 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200fedc:	e0bffd17 	ldw	r2,-12(fp)
 200fee0:	1080400c 	andi	r2,r2,256
 200fee4:	10003526 	beq	r2,zero,200ffbc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200fee8:	00800074 	movhi	r2,1
 200feec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200fef0:	e0bffb17 	ldw	r2,-20(fp)
 200fef4:	10800a17 	ldw	r2,40(r2)
 200fef8:	10800044 	addi	r2,r2,1
 200fefc:	1081ffcc 	andi	r2,r2,2047
 200ff00:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200ff04:	e0bffb17 	ldw	r2,-20(fp)
 200ff08:	10c00b17 	ldw	r3,44(r2)
 200ff0c:	e0bffe17 	ldw	r2,-8(fp)
 200ff10:	18801526 	beq	r3,r2,200ff68 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200ff14:	e0bffc17 	ldw	r2,-16(fp)
 200ff18:	10800037 	ldwio	r2,0(r2)
 200ff1c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200ff20:	e0bff917 	ldw	r2,-28(fp)
 200ff24:	10a0000c 	andi	r2,r2,32768
 200ff28:	10001126 	beq	r2,zero,200ff70 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200ff2c:	e0bffb17 	ldw	r2,-20(fp)
 200ff30:	10800a17 	ldw	r2,40(r2)
 200ff34:	e0fff917 	ldw	r3,-28(fp)
 200ff38:	1809883a 	mov	r4,r3
 200ff3c:	e0fffb17 	ldw	r3,-20(fp)
 200ff40:	1885883a 	add	r2,r3,r2
 200ff44:	10800e04 	addi	r2,r2,56
 200ff48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200ff4c:	e0bffb17 	ldw	r2,-20(fp)
 200ff50:	10800a17 	ldw	r2,40(r2)
 200ff54:	10800044 	addi	r2,r2,1
 200ff58:	10c1ffcc 	andi	r3,r2,2047
 200ff5c:	e0bffb17 	ldw	r2,-20(fp)
 200ff60:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200ff64:	003fe206 	br	200fef0 <__alt_data_end+0xff00fef0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200ff68:	0001883a 	nop
 200ff6c:	00000106 	br	200ff74 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200ff70:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200ff74:	e0bff917 	ldw	r2,-28(fp)
 200ff78:	10bfffec 	andhi	r2,r2,65535
 200ff7c:	10000f26 	beq	r2,zero,200ffbc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200ff80:	e0bffb17 	ldw	r2,-20(fp)
 200ff84:	10c00817 	ldw	r3,32(r2)
 200ff88:	00bfff84 	movi	r2,-2
 200ff8c:	1886703a 	and	r3,r3,r2
 200ff90:	e0bffb17 	ldw	r2,-20(fp)
 200ff94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200ff98:	e0bffc17 	ldw	r2,-16(fp)
 200ff9c:	10800104 	addi	r2,r2,4
 200ffa0:	1007883a 	mov	r3,r2
 200ffa4:	e0bffb17 	ldw	r2,-20(fp)
 200ffa8:	10800817 	ldw	r2,32(r2)
 200ffac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200ffb0:	e0bffc17 	ldw	r2,-16(fp)
 200ffb4:	10800104 	addi	r2,r2,4
 200ffb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200ffbc:	e0bffd17 	ldw	r2,-12(fp)
 200ffc0:	1080800c 	andi	r2,r2,512
 200ffc4:	103fbe26 	beq	r2,zero,200fec0 <__alt_data_end+0xff00fec0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200ffc8:	e0bffd17 	ldw	r2,-12(fp)
 200ffcc:	1004d43a 	srli	r2,r2,16
 200ffd0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200ffd4:	00001406 	br	2010028 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200ffd8:	e0bffc17 	ldw	r2,-16(fp)
 200ffdc:	e0fffb17 	ldw	r3,-20(fp)
 200ffe0:	18c00d17 	ldw	r3,52(r3)
 200ffe4:	e13ffb17 	ldw	r4,-20(fp)
 200ffe8:	20c7883a 	add	r3,r4,r3
 200ffec:	18c20e04 	addi	r3,r3,2104
 200fff0:	18c00003 	ldbu	r3,0(r3)
 200fff4:	18c03fcc 	andi	r3,r3,255
 200fff8:	18c0201c 	xori	r3,r3,128
 200fffc:	18ffe004 	addi	r3,r3,-128
 2010000:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2010004:	e0bffb17 	ldw	r2,-20(fp)
 2010008:	10800d17 	ldw	r2,52(r2)
 201000c:	10800044 	addi	r2,r2,1
 2010010:	10c1ffcc 	andi	r3,r2,2047
 2010014:	e0bffb17 	ldw	r2,-20(fp)
 2010018:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 201001c:	e0bffa17 	ldw	r2,-24(fp)
 2010020:	10bfffc4 	addi	r2,r2,-1
 2010024:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2010028:	e0bffa17 	ldw	r2,-24(fp)
 201002c:	10000526 	beq	r2,zero,2010044 <altera_avalon_jtag_uart_irq+0x1a8>
 2010030:	e0bffb17 	ldw	r2,-20(fp)
 2010034:	10c00d17 	ldw	r3,52(r2)
 2010038:	e0bffb17 	ldw	r2,-20(fp)
 201003c:	10800c17 	ldw	r2,48(r2)
 2010040:	18bfe51e 	bne	r3,r2,200ffd8 <__alt_data_end+0xff00ffd8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2010044:	e0bffa17 	ldw	r2,-24(fp)
 2010048:	103f9d26 	beq	r2,zero,200fec0 <__alt_data_end+0xff00fec0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201004c:	e0bffb17 	ldw	r2,-20(fp)
 2010050:	10c00817 	ldw	r3,32(r2)
 2010054:	00bfff44 	movi	r2,-3
 2010058:	1886703a 	and	r3,r3,r2
 201005c:	e0bffb17 	ldw	r2,-20(fp)
 2010060:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2010064:	e0bffb17 	ldw	r2,-20(fp)
 2010068:	10800017 	ldw	r2,0(r2)
 201006c:	10800104 	addi	r2,r2,4
 2010070:	1007883a 	mov	r3,r2
 2010074:	e0bffb17 	ldw	r2,-20(fp)
 2010078:	10800817 	ldw	r2,32(r2)
 201007c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2010080:	e0bffc17 	ldw	r2,-16(fp)
 2010084:	10800104 	addi	r2,r2,4
 2010088:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201008c:	003f8c06 	br	200fec0 <__alt_data_end+0xff00fec0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2010090:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2010094:	0001883a 	nop
 2010098:	e037883a 	mov	sp,fp
 201009c:	df000017 	ldw	fp,0(sp)
 20100a0:	dec00104 	addi	sp,sp,4
 20100a4:	f800283a 	ret

020100a8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20100a8:	defff804 	addi	sp,sp,-32
 20100ac:	df000715 	stw	fp,28(sp)
 20100b0:	df000704 	addi	fp,sp,28
 20100b4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20100b8:	e0bffb17 	ldw	r2,-20(fp)
 20100bc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20100c0:	e0bff917 	ldw	r2,-28(fp)
 20100c4:	10800017 	ldw	r2,0(r2)
 20100c8:	10800104 	addi	r2,r2,4
 20100cc:	10800037 	ldwio	r2,0(r2)
 20100d0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20100d4:	e0bffa17 	ldw	r2,-24(fp)
 20100d8:	1081000c 	andi	r2,r2,1024
 20100dc:	10000b26 	beq	r2,zero,201010c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20100e0:	e0bff917 	ldw	r2,-28(fp)
 20100e4:	10800017 	ldw	r2,0(r2)
 20100e8:	10800104 	addi	r2,r2,4
 20100ec:	1007883a 	mov	r3,r2
 20100f0:	e0bff917 	ldw	r2,-28(fp)
 20100f4:	10800817 	ldw	r2,32(r2)
 20100f8:	10810014 	ori	r2,r2,1024
 20100fc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2010100:	e0bff917 	ldw	r2,-28(fp)
 2010104:	10000915 	stw	zero,36(r2)
 2010108:	00000a06 	br	2010134 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 201010c:	e0bff917 	ldw	r2,-28(fp)
 2010110:	10c00917 	ldw	r3,36(r2)
 2010114:	00a00034 	movhi	r2,32768
 2010118:	10bfff04 	addi	r2,r2,-4
 201011c:	10c00536 	bltu	r2,r3,2010134 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2010120:	e0bff917 	ldw	r2,-28(fp)
 2010124:	10800917 	ldw	r2,36(r2)
 2010128:	10c00044 	addi	r3,r2,1
 201012c:	e0bff917 	ldw	r2,-28(fp)
 2010130:	10c00915 	stw	r3,36(r2)
 2010134:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2010138:	e037883a 	mov	sp,fp
 201013c:	df000017 	ldw	fp,0(sp)
 2010140:	dec00104 	addi	sp,sp,4
 2010144:	f800283a 	ret

02010148 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2010148:	defffd04 	addi	sp,sp,-12
 201014c:	df000215 	stw	fp,8(sp)
 2010150:	df000204 	addi	fp,sp,8
 2010154:	e13ffe15 	stw	r4,-8(fp)
 2010158:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201015c:	00000506 	br	2010174 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2010160:	e0bfff17 	ldw	r2,-4(fp)
 2010164:	1090000c 	andi	r2,r2,16384
 2010168:	10000226 	beq	r2,zero,2010174 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 201016c:	00bffd44 	movi	r2,-11
 2010170:	00000b06 	br	20101a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2010174:	e0bffe17 	ldw	r2,-8(fp)
 2010178:	10c00d17 	ldw	r3,52(r2)
 201017c:	e0bffe17 	ldw	r2,-8(fp)
 2010180:	10800c17 	ldw	r2,48(r2)
 2010184:	18800526 	beq	r3,r2,201019c <altera_avalon_jtag_uart_close+0x54>
 2010188:	e0bffe17 	ldw	r2,-8(fp)
 201018c:	10c00917 	ldw	r3,36(r2)
 2010190:	e0bffe17 	ldw	r2,-8(fp)
 2010194:	10800117 	ldw	r2,4(r2)
 2010198:	18bff136 	bltu	r3,r2,2010160 <__alt_data_end+0xff010160>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 201019c:	0005883a 	mov	r2,zero
}
 20101a0:	e037883a 	mov	sp,fp
 20101a4:	df000017 	ldw	fp,0(sp)
 20101a8:	dec00104 	addi	sp,sp,4
 20101ac:	f800283a 	ret

020101b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20101b0:	defffa04 	addi	sp,sp,-24
 20101b4:	df000515 	stw	fp,20(sp)
 20101b8:	df000504 	addi	fp,sp,20
 20101bc:	e13ffd15 	stw	r4,-12(fp)
 20101c0:	e17ffe15 	stw	r5,-8(fp)
 20101c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20101c8:	00bff9c4 	movi	r2,-25
 20101cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20101d0:	e0bffe17 	ldw	r2,-8(fp)
 20101d4:	10da8060 	cmpeqi	r3,r2,27137
 20101d8:	1800031e 	bne	r3,zero,20101e8 <altera_avalon_jtag_uart_ioctl+0x38>
 20101dc:	109a80a0 	cmpeqi	r2,r2,27138
 20101e0:	1000181e 	bne	r2,zero,2010244 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 20101e4:	00002906 	br	201028c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20101e8:	e0bffd17 	ldw	r2,-12(fp)
 20101ec:	10c00117 	ldw	r3,4(r2)
 20101f0:	00a00034 	movhi	r2,32768
 20101f4:	10bfffc4 	addi	r2,r2,-1
 20101f8:	18802126 	beq	r3,r2,2010280 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 20101fc:	e0bfff17 	ldw	r2,-4(fp)
 2010200:	10800017 	ldw	r2,0(r2)
 2010204:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2010208:	e0bffc17 	ldw	r2,-16(fp)
 201020c:	10800090 	cmplti	r2,r2,2
 2010210:	1000061e 	bne	r2,zero,201022c <altera_avalon_jtag_uart_ioctl+0x7c>
 2010214:	e0fffc17 	ldw	r3,-16(fp)
 2010218:	00a00034 	movhi	r2,32768
 201021c:	10bfffc4 	addi	r2,r2,-1
 2010220:	18800226 	beq	r3,r2,201022c <altera_avalon_jtag_uart_ioctl+0x7c>
 2010224:	e0bffc17 	ldw	r2,-16(fp)
 2010228:	00000206 	br	2010234 <altera_avalon_jtag_uart_ioctl+0x84>
 201022c:	00a00034 	movhi	r2,32768
 2010230:	10bfff84 	addi	r2,r2,-2
 2010234:	e0fffd17 	ldw	r3,-12(fp)
 2010238:	18800115 	stw	r2,4(r3)
      rc = 0;
 201023c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2010240:	00000f06 	br	2010280 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2010244:	e0bffd17 	ldw	r2,-12(fp)
 2010248:	10c00117 	ldw	r3,4(r2)
 201024c:	00a00034 	movhi	r2,32768
 2010250:	10bfffc4 	addi	r2,r2,-1
 2010254:	18800c26 	beq	r3,r2,2010288 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2010258:	e0bffd17 	ldw	r2,-12(fp)
 201025c:	10c00917 	ldw	r3,36(r2)
 2010260:	e0bffd17 	ldw	r2,-12(fp)
 2010264:	10800117 	ldw	r2,4(r2)
 2010268:	1885803a 	cmpltu	r2,r3,r2
 201026c:	10c03fcc 	andi	r3,r2,255
 2010270:	e0bfff17 	ldw	r2,-4(fp)
 2010274:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2010278:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 201027c:	00000206 	br	2010288 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2010280:	0001883a 	nop
 2010284:	00000106 	br	201028c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2010288:	0001883a 	nop

  default:
    break;
  }

  return rc;
 201028c:	e0bffb17 	ldw	r2,-20(fp)
}
 2010290:	e037883a 	mov	sp,fp
 2010294:	df000017 	ldw	fp,0(sp)
 2010298:	dec00104 	addi	sp,sp,4
 201029c:	f800283a 	ret

020102a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20102a0:	defff304 	addi	sp,sp,-52
 20102a4:	dfc00c15 	stw	ra,48(sp)
 20102a8:	df000b15 	stw	fp,44(sp)
 20102ac:	df000b04 	addi	fp,sp,44
 20102b0:	e13ffc15 	stw	r4,-16(fp)
 20102b4:	e17ffd15 	stw	r5,-12(fp)
 20102b8:	e1bffe15 	stw	r6,-8(fp)
 20102bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20102c0:	e0bffd17 	ldw	r2,-12(fp)
 20102c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20102c8:	00004706 	br	20103e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20102cc:	e0bffc17 	ldw	r2,-16(fp)
 20102d0:	10800a17 	ldw	r2,40(r2)
 20102d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20102d8:	e0bffc17 	ldw	r2,-16(fp)
 20102dc:	10800b17 	ldw	r2,44(r2)
 20102e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20102e4:	e0fff717 	ldw	r3,-36(fp)
 20102e8:	e0bff817 	ldw	r2,-32(fp)
 20102ec:	18800536 	bltu	r3,r2,2010304 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20102f0:	e0fff717 	ldw	r3,-36(fp)
 20102f4:	e0bff817 	ldw	r2,-32(fp)
 20102f8:	1885c83a 	sub	r2,r3,r2
 20102fc:	e0bff615 	stw	r2,-40(fp)
 2010300:	00000406 	br	2010314 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2010304:	00c20004 	movi	r3,2048
 2010308:	e0bff817 	ldw	r2,-32(fp)
 201030c:	1885c83a 	sub	r2,r3,r2
 2010310:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2010314:	e0bff617 	ldw	r2,-40(fp)
 2010318:	10001e26 	beq	r2,zero,2010394 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 201031c:	e0fffe17 	ldw	r3,-8(fp)
 2010320:	e0bff617 	ldw	r2,-40(fp)
 2010324:	1880022e 	bgeu	r3,r2,2010330 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2010328:	e0bffe17 	ldw	r2,-8(fp)
 201032c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2010330:	e0bffc17 	ldw	r2,-16(fp)
 2010334:	10c00e04 	addi	r3,r2,56
 2010338:	e0bff817 	ldw	r2,-32(fp)
 201033c:	1885883a 	add	r2,r3,r2
 2010340:	e1bff617 	ldw	r6,-40(fp)
 2010344:	100b883a 	mov	r5,r2
 2010348:	e13ff517 	ldw	r4,-44(fp)
 201034c:	2007eb00 	call	2007eb0 <memcpy>
      ptr   += n;
 2010350:	e0fff517 	ldw	r3,-44(fp)
 2010354:	e0bff617 	ldw	r2,-40(fp)
 2010358:	1885883a 	add	r2,r3,r2
 201035c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2010360:	e0fffe17 	ldw	r3,-8(fp)
 2010364:	e0bff617 	ldw	r2,-40(fp)
 2010368:	1885c83a 	sub	r2,r3,r2
 201036c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2010370:	e0fff817 	ldw	r3,-32(fp)
 2010374:	e0bff617 	ldw	r2,-40(fp)
 2010378:	1885883a 	add	r2,r3,r2
 201037c:	10c1ffcc 	andi	r3,r2,2047
 2010380:	e0bffc17 	ldw	r2,-16(fp)
 2010384:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2010388:	e0bffe17 	ldw	r2,-8(fp)
 201038c:	00bfcf16 	blt	zero,r2,20102cc <__alt_data_end+0xff0102cc>
 2010390:	00000106 	br	2010398 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2010394:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2010398:	e0fff517 	ldw	r3,-44(fp)
 201039c:	e0bffd17 	ldw	r2,-12(fp)
 20103a0:	1880141e 	bne	r3,r2,20103f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20103a4:	e0bfff17 	ldw	r2,-4(fp)
 20103a8:	1090000c 	andi	r2,r2,16384
 20103ac:	1000131e 	bne	r2,zero,20103fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20103b0:	0001883a 	nop
 20103b4:	e0bffc17 	ldw	r2,-16(fp)
 20103b8:	10c00a17 	ldw	r3,40(r2)
 20103bc:	e0bff717 	ldw	r2,-36(fp)
 20103c0:	1880051e 	bne	r3,r2,20103d8 <altera_avalon_jtag_uart_read+0x138>
 20103c4:	e0bffc17 	ldw	r2,-16(fp)
 20103c8:	10c00917 	ldw	r3,36(r2)
 20103cc:	e0bffc17 	ldw	r2,-16(fp)
 20103d0:	10800117 	ldw	r2,4(r2)
 20103d4:	18bff736 	bltu	r3,r2,20103b4 <__alt_data_end+0xff0103b4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20103d8:	e0bffc17 	ldw	r2,-16(fp)
 20103dc:	10c00a17 	ldw	r3,40(r2)
 20103e0:	e0bff717 	ldw	r2,-36(fp)
 20103e4:	18800726 	beq	r3,r2,2010404 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20103e8:	e0bffe17 	ldw	r2,-8(fp)
 20103ec:	00bfb716 	blt	zero,r2,20102cc <__alt_data_end+0xff0102cc>
 20103f0:	00000506 	br	2010408 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 20103f4:	0001883a 	nop
 20103f8:	00000306 	br	2010408 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 20103fc:	0001883a 	nop
 2010400:	00000106 	br	2010408 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2010404:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2010408:	e0fff517 	ldw	r3,-44(fp)
 201040c:	e0bffd17 	ldw	r2,-12(fp)
 2010410:	18801826 	beq	r3,r2,2010474 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010414:	0005303a 	rdctl	r2,status
 2010418:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201041c:	e0fffb17 	ldw	r3,-20(fp)
 2010420:	00bfff84 	movi	r2,-2
 2010424:	1884703a 	and	r2,r3,r2
 2010428:	1001703a 	wrctl	status,r2
  
  return context;
 201042c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2010430:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2010434:	e0bffc17 	ldw	r2,-16(fp)
 2010438:	10800817 	ldw	r2,32(r2)
 201043c:	10c00054 	ori	r3,r2,1
 2010440:	e0bffc17 	ldw	r2,-16(fp)
 2010444:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2010448:	e0bffc17 	ldw	r2,-16(fp)
 201044c:	10800017 	ldw	r2,0(r2)
 2010450:	10800104 	addi	r2,r2,4
 2010454:	1007883a 	mov	r3,r2
 2010458:	e0bffc17 	ldw	r2,-16(fp)
 201045c:	10800817 	ldw	r2,32(r2)
 2010460:	18800035 	stwio	r2,0(r3)
 2010464:	e0bffa17 	ldw	r2,-24(fp)
 2010468:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201046c:	e0bff917 	ldw	r2,-28(fp)
 2010470:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2010474:	e0fff517 	ldw	r3,-44(fp)
 2010478:	e0bffd17 	ldw	r2,-12(fp)
 201047c:	18800426 	beq	r3,r2,2010490 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 2010480:	e0fff517 	ldw	r3,-44(fp)
 2010484:	e0bffd17 	ldw	r2,-12(fp)
 2010488:	1885c83a 	sub	r2,r3,r2
 201048c:	00000606 	br	20104a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 2010490:	e0bfff17 	ldw	r2,-4(fp)
 2010494:	1090000c 	andi	r2,r2,16384
 2010498:	10000226 	beq	r2,zero,20104a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 201049c:	00bffd44 	movi	r2,-11
 20104a0:	00000106 	br	20104a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 20104a4:	00bffec4 	movi	r2,-5
}
 20104a8:	e037883a 	mov	sp,fp
 20104ac:	dfc00117 	ldw	ra,4(sp)
 20104b0:	df000017 	ldw	fp,0(sp)
 20104b4:	dec00204 	addi	sp,sp,8
 20104b8:	f800283a 	ret

020104bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20104bc:	defff304 	addi	sp,sp,-52
 20104c0:	dfc00c15 	stw	ra,48(sp)
 20104c4:	df000b15 	stw	fp,44(sp)
 20104c8:	df000b04 	addi	fp,sp,44
 20104cc:	e13ffc15 	stw	r4,-16(fp)
 20104d0:	e17ffd15 	stw	r5,-12(fp)
 20104d4:	e1bffe15 	stw	r6,-8(fp)
 20104d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20104dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20104e0:	e0bffd17 	ldw	r2,-12(fp)
 20104e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20104e8:	00003706 	br	20105c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20104ec:	e0bffc17 	ldw	r2,-16(fp)
 20104f0:	10800c17 	ldw	r2,48(r2)
 20104f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 20104f8:	e0bffc17 	ldw	r2,-16(fp)
 20104fc:	10800d17 	ldw	r2,52(r2)
 2010500:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2010504:	e0fff917 	ldw	r3,-28(fp)
 2010508:	e0bff517 	ldw	r2,-44(fp)
 201050c:	1880062e 	bgeu	r3,r2,2010528 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2010510:	e0fff517 	ldw	r3,-44(fp)
 2010514:	e0bff917 	ldw	r2,-28(fp)
 2010518:	1885c83a 	sub	r2,r3,r2
 201051c:	10bfffc4 	addi	r2,r2,-1
 2010520:	e0bff615 	stw	r2,-40(fp)
 2010524:	00000b06 	br	2010554 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2010528:	e0bff517 	ldw	r2,-44(fp)
 201052c:	10000526 	beq	r2,zero,2010544 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2010530:	00c20004 	movi	r3,2048
 2010534:	e0bff917 	ldw	r2,-28(fp)
 2010538:	1885c83a 	sub	r2,r3,r2
 201053c:	e0bff615 	stw	r2,-40(fp)
 2010540:	00000406 	br	2010554 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2010544:	00c1ffc4 	movi	r3,2047
 2010548:	e0bff917 	ldw	r2,-28(fp)
 201054c:	1885c83a 	sub	r2,r3,r2
 2010550:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2010554:	e0bff617 	ldw	r2,-40(fp)
 2010558:	10001e26 	beq	r2,zero,20105d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 201055c:	e0fffe17 	ldw	r3,-8(fp)
 2010560:	e0bff617 	ldw	r2,-40(fp)
 2010564:	1880022e 	bgeu	r3,r2,2010570 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2010568:	e0bffe17 	ldw	r2,-8(fp)
 201056c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2010570:	e0bffc17 	ldw	r2,-16(fp)
 2010574:	10c20e04 	addi	r3,r2,2104
 2010578:	e0bff917 	ldw	r2,-28(fp)
 201057c:	1885883a 	add	r2,r3,r2
 2010580:	e1bff617 	ldw	r6,-40(fp)
 2010584:	e17ffd17 	ldw	r5,-12(fp)
 2010588:	1009883a 	mov	r4,r2
 201058c:	2007eb00 	call	2007eb0 <memcpy>
      ptr   += n;
 2010590:	e0fffd17 	ldw	r3,-12(fp)
 2010594:	e0bff617 	ldw	r2,-40(fp)
 2010598:	1885883a 	add	r2,r3,r2
 201059c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20105a0:	e0fffe17 	ldw	r3,-8(fp)
 20105a4:	e0bff617 	ldw	r2,-40(fp)
 20105a8:	1885c83a 	sub	r2,r3,r2
 20105ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20105b0:	e0fff917 	ldw	r3,-28(fp)
 20105b4:	e0bff617 	ldw	r2,-40(fp)
 20105b8:	1885883a 	add	r2,r3,r2
 20105bc:	10c1ffcc 	andi	r3,r2,2047
 20105c0:	e0bffc17 	ldw	r2,-16(fp)
 20105c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20105c8:	e0bffe17 	ldw	r2,-8(fp)
 20105cc:	00bfc716 	blt	zero,r2,20104ec <__alt_data_end+0xff0104ec>
 20105d0:	00000106 	br	20105d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 20105d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20105d8:	0005303a 	rdctl	r2,status
 20105dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20105e0:	e0fffb17 	ldw	r3,-20(fp)
 20105e4:	00bfff84 	movi	r2,-2
 20105e8:	1884703a 	and	r2,r3,r2
 20105ec:	1001703a 	wrctl	status,r2
  
  return context;
 20105f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 20105f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20105f8:	e0bffc17 	ldw	r2,-16(fp)
 20105fc:	10800817 	ldw	r2,32(r2)
 2010600:	10c00094 	ori	r3,r2,2
 2010604:	e0bffc17 	ldw	r2,-16(fp)
 2010608:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201060c:	e0bffc17 	ldw	r2,-16(fp)
 2010610:	10800017 	ldw	r2,0(r2)
 2010614:	10800104 	addi	r2,r2,4
 2010618:	1007883a 	mov	r3,r2
 201061c:	e0bffc17 	ldw	r2,-16(fp)
 2010620:	10800817 	ldw	r2,32(r2)
 2010624:	18800035 	stwio	r2,0(r3)
 2010628:	e0bffa17 	ldw	r2,-24(fp)
 201062c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010630:	e0bff817 	ldw	r2,-32(fp)
 2010634:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2010638:	e0bffe17 	ldw	r2,-8(fp)
 201063c:	0080100e 	bge	zero,r2,2010680 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2010640:	e0bfff17 	ldw	r2,-4(fp)
 2010644:	1090000c 	andi	r2,r2,16384
 2010648:	1000101e 	bne	r2,zero,201068c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 201064c:	0001883a 	nop
 2010650:	e0bffc17 	ldw	r2,-16(fp)
 2010654:	10c00d17 	ldw	r3,52(r2)
 2010658:	e0bff517 	ldw	r2,-44(fp)
 201065c:	1880051e 	bne	r3,r2,2010674 <altera_avalon_jtag_uart_write+0x1b8>
 2010660:	e0bffc17 	ldw	r2,-16(fp)
 2010664:	10c00917 	ldw	r3,36(r2)
 2010668:	e0bffc17 	ldw	r2,-16(fp)
 201066c:	10800117 	ldw	r2,4(r2)
 2010670:	18bff736 	bltu	r3,r2,2010650 <__alt_data_end+0xff010650>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2010674:	e0bffc17 	ldw	r2,-16(fp)
 2010678:	10800917 	ldw	r2,36(r2)
 201067c:	1000051e 	bne	r2,zero,2010694 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2010680:	e0bffe17 	ldw	r2,-8(fp)
 2010684:	00bfd016 	blt	zero,r2,20105c8 <__alt_data_end+0xff0105c8>
 2010688:	00000306 	br	2010698 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 201068c:	0001883a 	nop
 2010690:	00000106 	br	2010698 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2010694:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2010698:	e0fffd17 	ldw	r3,-12(fp)
 201069c:	e0bff717 	ldw	r2,-36(fp)
 20106a0:	18800426 	beq	r3,r2,20106b4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 20106a4:	e0fffd17 	ldw	r3,-12(fp)
 20106a8:	e0bff717 	ldw	r2,-36(fp)
 20106ac:	1885c83a 	sub	r2,r3,r2
 20106b0:	00000606 	br	20106cc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 20106b4:	e0bfff17 	ldw	r2,-4(fp)
 20106b8:	1090000c 	andi	r2,r2,16384
 20106bc:	10000226 	beq	r2,zero,20106c8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 20106c0:	00bffd44 	movi	r2,-11
 20106c4:	00000106 	br	20106cc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 20106c8:	00bffec4 	movi	r2,-5
}
 20106cc:	e037883a 	mov	sp,fp
 20106d0:	dfc00117 	ldw	ra,4(sp)
 20106d4:	df000017 	ldw	fp,0(sp)
 20106d8:	dec00204 	addi	sp,sp,8
 20106dc:	f800283a 	ret

020106e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20106e0:	defff504 	addi	sp,sp,-44
 20106e4:	df000a15 	stw	fp,40(sp)
 20106e8:	df000a04 	addi	fp,sp,40
 20106ec:	e13ffc15 	stw	r4,-16(fp)
 20106f0:	e17ffd15 	stw	r5,-12(fp)
 20106f4:	e1bffe15 	stw	r6,-8(fp)
 20106f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20106fc:	e03ff615 	stw	zero,-40(fp)
 2010700:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 2010704:	10003c26 	beq	r2,zero,20107f8 <alt_alarm_start+0x118>
  {
    if (alarm)
 2010708:	e0bffc17 	ldw	r2,-16(fp)
 201070c:	10003826 	beq	r2,zero,20107f0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2010710:	e0bffc17 	ldw	r2,-16(fp)
 2010714:	e0fffe17 	ldw	r3,-8(fp)
 2010718:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201071c:	e0bffc17 	ldw	r2,-16(fp)
 2010720:	e0ffff17 	ldw	r3,-4(fp)
 2010724:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010728:	0005303a 	rdctl	r2,status
 201072c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010730:	e0fff917 	ldw	r3,-28(fp)
 2010734:	00bfff84 	movi	r2,-2
 2010738:	1884703a 	and	r2,r3,r2
 201073c:	1001703a 	wrctl	status,r2
  
  return context;
 2010740:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2010744:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2010748:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 201074c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2010750:	e0fffd17 	ldw	r3,-12(fp)
 2010754:	e0bff617 	ldw	r2,-40(fp)
 2010758:	1885883a 	add	r2,r3,r2
 201075c:	10c00044 	addi	r3,r2,1
 2010760:	e0bffc17 	ldw	r2,-16(fp)
 2010764:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2010768:	e0bffc17 	ldw	r2,-16(fp)
 201076c:	10c00217 	ldw	r3,8(r2)
 2010770:	e0bff617 	ldw	r2,-40(fp)
 2010774:	1880042e 	bgeu	r3,r2,2010788 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2010778:	e0bffc17 	ldw	r2,-16(fp)
 201077c:	00c00044 	movi	r3,1
 2010780:	10c00405 	stb	r3,16(r2)
 2010784:	00000206 	br	2010790 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2010788:	e0bffc17 	ldw	r2,-16(fp)
 201078c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2010790:	e0bffc17 	ldw	r2,-16(fp)
 2010794:	d0e00e04 	addi	r3,gp,-32712
 2010798:	e0fffa15 	stw	r3,-24(fp)
 201079c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20107a0:	e0bffb17 	ldw	r2,-20(fp)
 20107a4:	e0fffa17 	ldw	r3,-24(fp)
 20107a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20107ac:	e0bffa17 	ldw	r2,-24(fp)
 20107b0:	10c00017 	ldw	r3,0(r2)
 20107b4:	e0bffb17 	ldw	r2,-20(fp)
 20107b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20107bc:	e0bffa17 	ldw	r2,-24(fp)
 20107c0:	10800017 	ldw	r2,0(r2)
 20107c4:	e0fffb17 	ldw	r3,-20(fp)
 20107c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20107cc:	e0bffa17 	ldw	r2,-24(fp)
 20107d0:	e0fffb17 	ldw	r3,-20(fp)
 20107d4:	10c00015 	stw	r3,0(r2)
 20107d8:	e0bff817 	ldw	r2,-32(fp)
 20107dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20107e0:	e0bff717 	ldw	r2,-36(fp)
 20107e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20107e8:	0005883a 	mov	r2,zero
 20107ec:	00000306 	br	20107fc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 20107f0:	00bffa84 	movi	r2,-22
 20107f4:	00000106 	br	20107fc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 20107f8:	00bfde84 	movi	r2,-134
  }
}
 20107fc:	e037883a 	mov	sp,fp
 2010800:	df000017 	ldw	fp,0(sp)
 2010804:	dec00104 	addi	sp,sp,4
 2010808:	f800283a 	ret

0201080c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 201080c:	defffa04 	addi	sp,sp,-24
 2010810:	dfc00515 	stw	ra,20(sp)
 2010814:	df000415 	stw	fp,16(sp)
 2010818:	df000404 	addi	fp,sp,16
 201081c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 2010820:	00800244 	movi	r2,9
 2010824:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 2010828:	014003f4 	movhi	r5,15
 201082c:	29509004 	addi	r5,r5,16960
 2010830:	e13ffd17 	ldw	r4,-12(fp)
 2010834:	200c9300 	call	200c930 <__mulsi3>
 2010838:	100b883a 	mov	r5,r2
 201083c:	0100bef4 	movhi	r4,763
 2010840:	213c2004 	addi	r4,r4,-3968
 2010844:	200c8740 	call	200c874 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2010848:	100b883a 	mov	r5,r2
 201084c:	01200034 	movhi	r4,32768
 2010850:	213fffc4 	addi	r4,r4,-1
 2010854:	200c8740 	call	200c874 <__udivsi3>
 2010858:	100b883a 	mov	r5,r2
 201085c:	e13fff17 	ldw	r4,-4(fp)
 2010860:	200c8740 	call	200c874 <__udivsi3>
 2010864:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2010868:	e0bffe17 	ldw	r2,-8(fp)
 201086c:	10002a26 	beq	r2,zero,2010918 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 2010870:	e03ffc15 	stw	zero,-16(fp)
 2010874:	00001706 	br	20108d4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2010878:	00a00034 	movhi	r2,32768
 201087c:	10bfffc4 	addi	r2,r2,-1
 2010880:	10bfffc4 	addi	r2,r2,-1
 2010884:	103ffe1e 	bne	r2,zero,2010880 <__alt_data_end+0xff010880>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 2010888:	014003f4 	movhi	r5,15
 201088c:	29509004 	addi	r5,r5,16960
 2010890:	e13ffd17 	ldw	r4,-12(fp)
 2010894:	200c9300 	call	200c930 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2010898:	100b883a 	mov	r5,r2
 201089c:	0100bef4 	movhi	r4,763
 20108a0:	213c2004 	addi	r4,r4,-3968
 20108a4:	200c8740 	call	200c874 <__udivsi3>
 20108a8:	100b883a 	mov	r5,r2
 20108ac:	01200034 	movhi	r4,32768
 20108b0:	213fffc4 	addi	r4,r4,-1
 20108b4:	200c8740 	call	200c874 <__udivsi3>
 20108b8:	1007883a 	mov	r3,r2
 20108bc:	e0bfff17 	ldw	r2,-4(fp)
 20108c0:	10c5c83a 	sub	r2,r2,r3
 20108c4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 20108c8:	e0bffc17 	ldw	r2,-16(fp)
 20108cc:	10800044 	addi	r2,r2,1
 20108d0:	e0bffc15 	stw	r2,-16(fp)
 20108d4:	e0fffc17 	ldw	r3,-16(fp)
 20108d8:	e0bffe17 	ldw	r2,-8(fp)
 20108dc:	18bfe616 	blt	r3,r2,2010878 <__alt_data_end+0xff010878>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 20108e0:	014003f4 	movhi	r5,15
 20108e4:	29509004 	addi	r5,r5,16960
 20108e8:	e13ffd17 	ldw	r4,-12(fp)
 20108ec:	200c9300 	call	200c930 <__mulsi3>
 20108f0:	100b883a 	mov	r5,r2
 20108f4:	0100bef4 	movhi	r4,763
 20108f8:	213c2004 	addi	r4,r4,-3968
 20108fc:	200c8740 	call	200c874 <__udivsi3>
 2010900:	e17fff17 	ldw	r5,-4(fp)
 2010904:	1009883a 	mov	r4,r2
 2010908:	200c9300 	call	200c930 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201090c:	10bfffc4 	addi	r2,r2,-1
 2010910:	103ffe1e 	bne	r2,zero,201090c <__alt_data_end+0xff01090c>
 2010914:	00000d06 	br	201094c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2010918:	014003f4 	movhi	r5,15
 201091c:	29509004 	addi	r5,r5,16960
 2010920:	e13ffd17 	ldw	r4,-12(fp)
 2010924:	200c9300 	call	200c930 <__mulsi3>
 2010928:	100b883a 	mov	r5,r2
 201092c:	0100bef4 	movhi	r4,763
 2010930:	213c2004 	addi	r4,r4,-3968
 2010934:	200c8740 	call	200c874 <__udivsi3>
 2010938:	e17fff17 	ldw	r5,-4(fp)
 201093c:	1009883a 	mov	r4,r2
 2010940:	200c9300 	call	200c930 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2010944:	10bfffc4 	addi	r2,r2,-1
 2010948:	00bffe16 	blt	zero,r2,2010944 <__alt_data_end+0xff010944>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 201094c:	0005883a 	mov	r2,zero
}
 2010950:	e037883a 	mov	sp,fp
 2010954:	dfc00117 	ldw	ra,4(sp)
 2010958:	df000017 	ldw	fp,0(sp)
 201095c:	dec00204 	addi	sp,sp,8
 2010960:	f800283a 	ret

02010964 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2010964:	deffff04 	addi	sp,sp,-4
 2010968:	df000015 	stw	fp,0(sp)
 201096c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2010970:	0001883a 	nop
 2010974:	e037883a 	mov	sp,fp
 2010978:	df000017 	ldw	fp,0(sp)
 201097c:	dec00104 	addi	sp,sp,4
 2010980:	f800283a 	ret

02010984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010984:	defffe04 	addi	sp,sp,-8
 2010988:	dfc00115 	stw	ra,4(sp)
 201098c:	df000015 	stw	fp,0(sp)
 2010990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010994:	d0a00b17 	ldw	r2,-32724(gp)
 2010998:	10000326 	beq	r2,zero,20109a8 <alt_get_errno+0x24>
 201099c:	d0a00b17 	ldw	r2,-32724(gp)
 20109a0:	103ee83a 	callr	r2
 20109a4:	00000106 	br	20109ac <alt_get_errno+0x28>
 20109a8:	d0a6d204 	addi	r2,gp,-25784
}
 20109ac:	e037883a 	mov	sp,fp
 20109b0:	dfc00117 	ldw	ra,4(sp)
 20109b4:	df000017 	ldw	fp,0(sp)
 20109b8:	dec00204 	addi	sp,sp,8
 20109bc:	f800283a 	ret

020109c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20109c0:	defffa04 	addi	sp,sp,-24
 20109c4:	dfc00515 	stw	ra,20(sp)
 20109c8:	df000415 	stw	fp,16(sp)
 20109cc:	df000404 	addi	fp,sp,16
 20109d0:	e13ffe15 	stw	r4,-8(fp)
 20109d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20109d8:	e0bffe17 	ldw	r2,-8(fp)
 20109dc:	10000326 	beq	r2,zero,20109ec <alt_dev_llist_insert+0x2c>
 20109e0:	e0bffe17 	ldw	r2,-8(fp)
 20109e4:	10800217 	ldw	r2,8(r2)
 20109e8:	1000061e 	bne	r2,zero,2010a04 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 20109ec:	20109840 	call	2010984 <alt_get_errno>
 20109f0:	1007883a 	mov	r3,r2
 20109f4:	00800584 	movi	r2,22
 20109f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20109fc:	00bffa84 	movi	r2,-22
 2010a00:	00001306 	br	2010a50 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2010a04:	e0bffe17 	ldw	r2,-8(fp)
 2010a08:	e0ffff17 	ldw	r3,-4(fp)
 2010a0c:	e0fffc15 	stw	r3,-16(fp)
 2010a10:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2010a14:	e0bffd17 	ldw	r2,-12(fp)
 2010a18:	e0fffc17 	ldw	r3,-16(fp)
 2010a1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2010a20:	e0bffc17 	ldw	r2,-16(fp)
 2010a24:	10c00017 	ldw	r3,0(r2)
 2010a28:	e0bffd17 	ldw	r2,-12(fp)
 2010a2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2010a30:	e0bffc17 	ldw	r2,-16(fp)
 2010a34:	10800017 	ldw	r2,0(r2)
 2010a38:	e0fffd17 	ldw	r3,-12(fp)
 2010a3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2010a40:	e0bffc17 	ldw	r2,-16(fp)
 2010a44:	e0fffd17 	ldw	r3,-12(fp)
 2010a48:	10c00015 	stw	r3,0(r2)

  return 0;  
 2010a4c:	0005883a 	mov	r2,zero
}
 2010a50:	e037883a 	mov	sp,fp
 2010a54:	dfc00117 	ldw	ra,4(sp)
 2010a58:	df000017 	ldw	fp,0(sp)
 2010a5c:	dec00204 	addi	sp,sp,8
 2010a60:	f800283a 	ret

02010a64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2010a64:	defffd04 	addi	sp,sp,-12
 2010a68:	dfc00215 	stw	ra,8(sp)
 2010a6c:	df000115 	stw	fp,4(sp)
 2010a70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010a74:	00808074 	movhi	r2,513
 2010a78:	10868604 	addi	r2,r2,6680
 2010a7c:	e0bfff15 	stw	r2,-4(fp)
 2010a80:	00000606 	br	2010a9c <_do_ctors+0x38>
        (*ctor) (); 
 2010a84:	e0bfff17 	ldw	r2,-4(fp)
 2010a88:	10800017 	ldw	r2,0(r2)
 2010a8c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010a90:	e0bfff17 	ldw	r2,-4(fp)
 2010a94:	10bfff04 	addi	r2,r2,-4
 2010a98:	e0bfff15 	stw	r2,-4(fp)
 2010a9c:	e0ffff17 	ldw	r3,-4(fp)
 2010aa0:	00808074 	movhi	r2,513
 2010aa4:	10868704 	addi	r2,r2,6684
 2010aa8:	18bff62e 	bgeu	r3,r2,2010a84 <__alt_data_end+0xff010a84>
        (*ctor) (); 
}
 2010aac:	0001883a 	nop
 2010ab0:	e037883a 	mov	sp,fp
 2010ab4:	dfc00117 	ldw	ra,4(sp)
 2010ab8:	df000017 	ldw	fp,0(sp)
 2010abc:	dec00204 	addi	sp,sp,8
 2010ac0:	f800283a 	ret

02010ac4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2010ac4:	defffd04 	addi	sp,sp,-12
 2010ac8:	dfc00215 	stw	ra,8(sp)
 2010acc:	df000115 	stw	fp,4(sp)
 2010ad0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010ad4:	00808074 	movhi	r2,513
 2010ad8:	10868604 	addi	r2,r2,6680
 2010adc:	e0bfff15 	stw	r2,-4(fp)
 2010ae0:	00000606 	br	2010afc <_do_dtors+0x38>
        (*dtor) (); 
 2010ae4:	e0bfff17 	ldw	r2,-4(fp)
 2010ae8:	10800017 	ldw	r2,0(r2)
 2010aec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010af0:	e0bfff17 	ldw	r2,-4(fp)
 2010af4:	10bfff04 	addi	r2,r2,-4
 2010af8:	e0bfff15 	stw	r2,-4(fp)
 2010afc:	e0ffff17 	ldw	r3,-4(fp)
 2010b00:	00808074 	movhi	r2,513
 2010b04:	10868704 	addi	r2,r2,6684
 2010b08:	18bff62e 	bgeu	r3,r2,2010ae4 <__alt_data_end+0xff010ae4>
        (*dtor) (); 
}
 2010b0c:	0001883a 	nop
 2010b10:	e037883a 	mov	sp,fp
 2010b14:	dfc00117 	ldw	ra,4(sp)
 2010b18:	df000017 	ldw	fp,0(sp)
 2010b1c:	dec00204 	addi	sp,sp,8
 2010b20:	f800283a 	ret

02010b24 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2010b24:	deffff04 	addi	sp,sp,-4
 2010b28:	df000015 	stw	fp,0(sp)
 2010b2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2010b30:	0001883a 	nop
 2010b34:	e037883a 	mov	sp,fp
 2010b38:	df000017 	ldw	fp,0(sp)
 2010b3c:	dec00104 	addi	sp,sp,4
 2010b40:	f800283a 	ret

02010b44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2010b44:	defff904 	addi	sp,sp,-28
 2010b48:	dfc00615 	stw	ra,24(sp)
 2010b4c:	df000515 	stw	fp,20(sp)
 2010b50:	df000504 	addi	fp,sp,20
 2010b54:	e13ffc15 	stw	r4,-16(fp)
 2010b58:	e17ffd15 	stw	r5,-12(fp)
 2010b5c:	e1bffe15 	stw	r6,-8(fp)
 2010b60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2010b64:	e0800217 	ldw	r2,8(fp)
 2010b68:	d8800015 	stw	r2,0(sp)
 2010b6c:	e1ffff17 	ldw	r7,-4(fp)
 2010b70:	e1bffe17 	ldw	r6,-8(fp)
 2010b74:	e17ffd17 	ldw	r5,-12(fp)
 2010b78:	e13ffc17 	ldw	r4,-16(fp)
 2010b7c:	2010cf40 	call	2010cf4 <alt_iic_isr_register>
}  
 2010b80:	e037883a 	mov	sp,fp
 2010b84:	dfc00117 	ldw	ra,4(sp)
 2010b88:	df000017 	ldw	fp,0(sp)
 2010b8c:	dec00204 	addi	sp,sp,8
 2010b90:	f800283a 	ret

02010b94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2010b94:	defff904 	addi	sp,sp,-28
 2010b98:	df000615 	stw	fp,24(sp)
 2010b9c:	df000604 	addi	fp,sp,24
 2010ba0:	e13ffe15 	stw	r4,-8(fp)
 2010ba4:	e17fff15 	stw	r5,-4(fp)
 2010ba8:	e0bfff17 	ldw	r2,-4(fp)
 2010bac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010bb0:	0005303a 	rdctl	r2,status
 2010bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010bb8:	e0fffb17 	ldw	r3,-20(fp)
 2010bbc:	00bfff84 	movi	r2,-2
 2010bc0:	1884703a 	and	r2,r3,r2
 2010bc4:	1001703a 	wrctl	status,r2
  
  return context;
 2010bc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010bcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2010bd0:	00c00044 	movi	r3,1
 2010bd4:	e0bffa17 	ldw	r2,-24(fp)
 2010bd8:	1884983a 	sll	r2,r3,r2
 2010bdc:	1007883a 	mov	r3,r2
 2010be0:	d0a6d617 	ldw	r2,-25768(gp)
 2010be4:	1884b03a 	or	r2,r3,r2
 2010be8:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010bec:	d0a6d617 	ldw	r2,-25768(gp)
 2010bf0:	100170fa 	wrctl	ienable,r2
 2010bf4:	e0bffc17 	ldw	r2,-16(fp)
 2010bf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010bfc:	e0bffd17 	ldw	r2,-12(fp)
 2010c00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010c04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2010c08:	0001883a 	nop
}
 2010c0c:	e037883a 	mov	sp,fp
 2010c10:	df000017 	ldw	fp,0(sp)
 2010c14:	dec00104 	addi	sp,sp,4
 2010c18:	f800283a 	ret

02010c1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2010c1c:	defff904 	addi	sp,sp,-28
 2010c20:	df000615 	stw	fp,24(sp)
 2010c24:	df000604 	addi	fp,sp,24
 2010c28:	e13ffe15 	stw	r4,-8(fp)
 2010c2c:	e17fff15 	stw	r5,-4(fp)
 2010c30:	e0bfff17 	ldw	r2,-4(fp)
 2010c34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010c38:	0005303a 	rdctl	r2,status
 2010c3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010c40:	e0fffb17 	ldw	r3,-20(fp)
 2010c44:	00bfff84 	movi	r2,-2
 2010c48:	1884703a 	and	r2,r3,r2
 2010c4c:	1001703a 	wrctl	status,r2
  
  return context;
 2010c50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010c54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2010c58:	00c00044 	movi	r3,1
 2010c5c:	e0bffa17 	ldw	r2,-24(fp)
 2010c60:	1884983a 	sll	r2,r3,r2
 2010c64:	0084303a 	nor	r2,zero,r2
 2010c68:	1007883a 	mov	r3,r2
 2010c6c:	d0a6d617 	ldw	r2,-25768(gp)
 2010c70:	1884703a 	and	r2,r3,r2
 2010c74:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010c78:	d0a6d617 	ldw	r2,-25768(gp)
 2010c7c:	100170fa 	wrctl	ienable,r2
 2010c80:	e0bffc17 	ldw	r2,-16(fp)
 2010c84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010c88:	e0bffd17 	ldw	r2,-12(fp)
 2010c8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010c90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2010c94:	0001883a 	nop
}
 2010c98:	e037883a 	mov	sp,fp
 2010c9c:	df000017 	ldw	fp,0(sp)
 2010ca0:	dec00104 	addi	sp,sp,4
 2010ca4:	f800283a 	ret

02010ca8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2010ca8:	defffc04 	addi	sp,sp,-16
 2010cac:	df000315 	stw	fp,12(sp)
 2010cb0:	df000304 	addi	fp,sp,12
 2010cb4:	e13ffe15 	stw	r4,-8(fp)
 2010cb8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2010cbc:	000530fa 	rdctl	r2,ienable
 2010cc0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2010cc4:	00c00044 	movi	r3,1
 2010cc8:	e0bfff17 	ldw	r2,-4(fp)
 2010ccc:	1884983a 	sll	r2,r3,r2
 2010cd0:	1007883a 	mov	r3,r2
 2010cd4:	e0bffd17 	ldw	r2,-12(fp)
 2010cd8:	1884703a 	and	r2,r3,r2
 2010cdc:	1004c03a 	cmpne	r2,r2,zero
 2010ce0:	10803fcc 	andi	r2,r2,255
}
 2010ce4:	e037883a 	mov	sp,fp
 2010ce8:	df000017 	ldw	fp,0(sp)
 2010cec:	dec00104 	addi	sp,sp,4
 2010cf0:	f800283a 	ret

02010cf4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2010cf4:	defff504 	addi	sp,sp,-44
 2010cf8:	dfc00a15 	stw	ra,40(sp)
 2010cfc:	df000915 	stw	fp,36(sp)
 2010d00:	df000904 	addi	fp,sp,36
 2010d04:	e13ffc15 	stw	r4,-16(fp)
 2010d08:	e17ffd15 	stw	r5,-12(fp)
 2010d0c:	e1bffe15 	stw	r6,-8(fp)
 2010d10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2010d14:	00bffa84 	movi	r2,-22
 2010d18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2010d1c:	e0bffd17 	ldw	r2,-12(fp)
 2010d20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2010d24:	e0bff817 	ldw	r2,-32(fp)
 2010d28:	10800808 	cmpgei	r2,r2,32
 2010d2c:	1000271e 	bne	r2,zero,2010dcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010d30:	0005303a 	rdctl	r2,status
 2010d34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010d38:	e0fffb17 	ldw	r3,-20(fp)
 2010d3c:	00bfff84 	movi	r2,-2
 2010d40:	1884703a 	and	r2,r3,r2
 2010d44:	1001703a 	wrctl	status,r2
  
  return context;
 2010d48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2010d4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2010d50:	00808074 	movhi	r2,513
 2010d54:	1096b504 	addi	r2,r2,23252
 2010d58:	e0fff817 	ldw	r3,-32(fp)
 2010d5c:	180690fa 	slli	r3,r3,3
 2010d60:	10c5883a 	add	r2,r2,r3
 2010d64:	e0fffe17 	ldw	r3,-8(fp)
 2010d68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2010d6c:	00808074 	movhi	r2,513
 2010d70:	1096b504 	addi	r2,r2,23252
 2010d74:	e0fff817 	ldw	r3,-32(fp)
 2010d78:	180690fa 	slli	r3,r3,3
 2010d7c:	10c5883a 	add	r2,r2,r3
 2010d80:	10800104 	addi	r2,r2,4
 2010d84:	e0ffff17 	ldw	r3,-4(fp)
 2010d88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2010d8c:	e0bffe17 	ldw	r2,-8(fp)
 2010d90:	10000526 	beq	r2,zero,2010da8 <alt_iic_isr_register+0xb4>
 2010d94:	e0bff817 	ldw	r2,-32(fp)
 2010d98:	100b883a 	mov	r5,r2
 2010d9c:	e13ffc17 	ldw	r4,-16(fp)
 2010da0:	2010b940 	call	2010b94 <alt_ic_irq_enable>
 2010da4:	00000406 	br	2010db8 <alt_iic_isr_register+0xc4>
 2010da8:	e0bff817 	ldw	r2,-32(fp)
 2010dac:	100b883a 	mov	r5,r2
 2010db0:	e13ffc17 	ldw	r4,-16(fp)
 2010db4:	2010c1c0 	call	2010c1c <alt_ic_irq_disable>
 2010db8:	e0bff715 	stw	r2,-36(fp)
 2010dbc:	e0bffa17 	ldw	r2,-24(fp)
 2010dc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010dc4:	e0bff917 	ldw	r2,-28(fp)
 2010dc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2010dcc:	e0bff717 	ldw	r2,-36(fp)
}
 2010dd0:	e037883a 	mov	sp,fp
 2010dd4:	dfc00117 	ldw	ra,4(sp)
 2010dd8:	df000017 	ldw	fp,0(sp)
 2010ddc:	dec00204 	addi	sp,sp,8
 2010de0:	f800283a 	ret

02010de4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2010de4:	defff804 	addi	sp,sp,-32
 2010de8:	dfc00715 	stw	ra,28(sp)
 2010dec:	df000615 	stw	fp,24(sp)
 2010df0:	dc000515 	stw	r16,20(sp)
 2010df4:	df000604 	addi	fp,sp,24
 2010df8:	e13ffb15 	stw	r4,-20(fp)
 2010dfc:	e17ffc15 	stw	r5,-16(fp)
 2010e00:	e1bffd15 	stw	r6,-12(fp)
 2010e04:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2010e08:	e1bffe17 	ldw	r6,-8(fp)
 2010e0c:	e17ffd17 	ldw	r5,-12(fp)
 2010e10:	e13ffc17 	ldw	r4,-16(fp)
 2010e14:	201106c0 	call	201106c <open>
 2010e18:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2010e1c:	e0bffa17 	ldw	r2,-24(fp)
 2010e20:	10002216 	blt	r2,zero,2010eac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2010e24:	04008074 	movhi	r16,513
 2010e28:	840b5904 	addi	r16,r16,11620
 2010e2c:	e0bffa17 	ldw	r2,-24(fp)
 2010e30:	01400304 	movi	r5,12
 2010e34:	1009883a 	mov	r4,r2
 2010e38:	200c9300 	call	200c930 <__mulsi3>
 2010e3c:	8085883a 	add	r2,r16,r2
 2010e40:	10c00017 	ldw	r3,0(r2)
 2010e44:	e0bffb17 	ldw	r2,-20(fp)
 2010e48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2010e4c:	04008074 	movhi	r16,513
 2010e50:	840b5904 	addi	r16,r16,11620
 2010e54:	e0bffa17 	ldw	r2,-24(fp)
 2010e58:	01400304 	movi	r5,12
 2010e5c:	1009883a 	mov	r4,r2
 2010e60:	200c9300 	call	200c930 <__mulsi3>
 2010e64:	8085883a 	add	r2,r16,r2
 2010e68:	10800104 	addi	r2,r2,4
 2010e6c:	10c00017 	ldw	r3,0(r2)
 2010e70:	e0bffb17 	ldw	r2,-20(fp)
 2010e74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2010e78:	04008074 	movhi	r16,513
 2010e7c:	840b5904 	addi	r16,r16,11620
 2010e80:	e0bffa17 	ldw	r2,-24(fp)
 2010e84:	01400304 	movi	r5,12
 2010e88:	1009883a 	mov	r4,r2
 2010e8c:	200c9300 	call	200c930 <__mulsi3>
 2010e90:	8085883a 	add	r2,r16,r2
 2010e94:	10800204 	addi	r2,r2,8
 2010e98:	10c00017 	ldw	r3,0(r2)
 2010e9c:	e0bffb17 	ldw	r2,-20(fp)
 2010ea0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2010ea4:	e13ffa17 	ldw	r4,-24(fp)
 2010ea8:	200f9200 	call	200f920 <alt_release_fd>
  }
} 
 2010eac:	0001883a 	nop
 2010eb0:	e6ffff04 	addi	sp,fp,-4
 2010eb4:	dfc00217 	ldw	ra,8(sp)
 2010eb8:	df000117 	ldw	fp,4(sp)
 2010ebc:	dc000017 	ldw	r16,0(sp)
 2010ec0:	dec00304 	addi	sp,sp,12
 2010ec4:	f800283a 	ret

02010ec8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2010ec8:	defffb04 	addi	sp,sp,-20
 2010ecc:	dfc00415 	stw	ra,16(sp)
 2010ed0:	df000315 	stw	fp,12(sp)
 2010ed4:	df000304 	addi	fp,sp,12
 2010ed8:	e13ffd15 	stw	r4,-12(fp)
 2010edc:	e17ffe15 	stw	r5,-8(fp)
 2010ee0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2010ee4:	01c07fc4 	movi	r7,511
 2010ee8:	01800044 	movi	r6,1
 2010eec:	e17ffd17 	ldw	r5,-12(fp)
 2010ef0:	01008074 	movhi	r4,513
 2010ef4:	210b5c04 	addi	r4,r4,11632
 2010ef8:	2010de40 	call	2010de4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2010efc:	01c07fc4 	movi	r7,511
 2010f00:	000d883a 	mov	r6,zero
 2010f04:	e17ffe17 	ldw	r5,-8(fp)
 2010f08:	01008074 	movhi	r4,513
 2010f0c:	210b5904 	addi	r4,r4,11620
 2010f10:	2010de40 	call	2010de4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2010f14:	01c07fc4 	movi	r7,511
 2010f18:	01800044 	movi	r6,1
 2010f1c:	e17fff17 	ldw	r5,-4(fp)
 2010f20:	01008074 	movhi	r4,513
 2010f24:	210b5f04 	addi	r4,r4,11644
 2010f28:	2010de40 	call	2010de4 <alt_open_fd>
}  
 2010f2c:	0001883a 	nop
 2010f30:	e037883a 	mov	sp,fp
 2010f34:	dfc00117 	ldw	ra,4(sp)
 2010f38:	df000017 	ldw	fp,0(sp)
 2010f3c:	dec00204 	addi	sp,sp,8
 2010f40:	f800283a 	ret

02010f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010f44:	defffe04 	addi	sp,sp,-8
 2010f48:	dfc00115 	stw	ra,4(sp)
 2010f4c:	df000015 	stw	fp,0(sp)
 2010f50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010f54:	d0a00b17 	ldw	r2,-32724(gp)
 2010f58:	10000326 	beq	r2,zero,2010f68 <alt_get_errno+0x24>
 2010f5c:	d0a00b17 	ldw	r2,-32724(gp)
 2010f60:	103ee83a 	callr	r2
 2010f64:	00000106 	br	2010f6c <alt_get_errno+0x28>
 2010f68:	d0a6d204 	addi	r2,gp,-25784
}
 2010f6c:	e037883a 	mov	sp,fp
 2010f70:	dfc00117 	ldw	ra,4(sp)
 2010f74:	df000017 	ldw	fp,0(sp)
 2010f78:	dec00204 	addi	sp,sp,8
 2010f7c:	f800283a 	ret

02010f80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2010f80:	defffb04 	addi	sp,sp,-20
 2010f84:	dfc00415 	stw	ra,16(sp)
 2010f88:	df000315 	stw	fp,12(sp)
 2010f8c:	dc000215 	stw	r16,8(sp)
 2010f90:	df000304 	addi	fp,sp,12
 2010f94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2010f98:	e0bffe17 	ldw	r2,-8(fp)
 2010f9c:	10800217 	ldw	r2,8(r2)
 2010fa0:	10d00034 	orhi	r3,r2,16384
 2010fa4:	e0bffe17 	ldw	r2,-8(fp)
 2010fa8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2010fac:	e03ffd15 	stw	zero,-12(fp)
 2010fb0:	00002306 	br	2011040 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2010fb4:	04008074 	movhi	r16,513
 2010fb8:	840b5904 	addi	r16,r16,11620
 2010fbc:	e0bffd17 	ldw	r2,-12(fp)
 2010fc0:	01400304 	movi	r5,12
 2010fc4:	1009883a 	mov	r4,r2
 2010fc8:	200c9300 	call	200c930 <__mulsi3>
 2010fcc:	8085883a 	add	r2,r16,r2
 2010fd0:	10c00017 	ldw	r3,0(r2)
 2010fd4:	e0bffe17 	ldw	r2,-8(fp)
 2010fd8:	10800017 	ldw	r2,0(r2)
 2010fdc:	1880151e 	bne	r3,r2,2011034 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2010fe0:	04008074 	movhi	r16,513
 2010fe4:	840b5904 	addi	r16,r16,11620
 2010fe8:	e0bffd17 	ldw	r2,-12(fp)
 2010fec:	01400304 	movi	r5,12
 2010ff0:	1009883a 	mov	r4,r2
 2010ff4:	200c9300 	call	200c930 <__mulsi3>
 2010ff8:	8085883a 	add	r2,r16,r2
 2010ffc:	10800204 	addi	r2,r2,8
 2011000:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2011004:	10000b0e 	bge	r2,zero,2011034 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2011008:	01400304 	movi	r5,12
 201100c:	e13ffd17 	ldw	r4,-12(fp)
 2011010:	200c9300 	call	200c930 <__mulsi3>
 2011014:	1007883a 	mov	r3,r2
 2011018:	00808074 	movhi	r2,513
 201101c:	108b5904 	addi	r2,r2,11620
 2011020:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2011024:	e0bffe17 	ldw	r2,-8(fp)
 2011028:	18800226 	beq	r3,r2,2011034 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201102c:	00bffcc4 	movi	r2,-13
 2011030:	00000806 	br	2011054 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2011034:	e0bffd17 	ldw	r2,-12(fp)
 2011038:	10800044 	addi	r2,r2,1
 201103c:	e0bffd15 	stw	r2,-12(fp)
 2011040:	d0a00a17 	ldw	r2,-32728(gp)
 2011044:	1007883a 	mov	r3,r2
 2011048:	e0bffd17 	ldw	r2,-12(fp)
 201104c:	18bfd92e 	bgeu	r3,r2,2010fb4 <__alt_data_end+0xff010fb4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2011050:	0005883a 	mov	r2,zero
}
 2011054:	e6ffff04 	addi	sp,fp,-4
 2011058:	dfc00217 	ldw	ra,8(sp)
 201105c:	df000117 	ldw	fp,4(sp)
 2011060:	dc000017 	ldw	r16,0(sp)
 2011064:	dec00304 	addi	sp,sp,12
 2011068:	f800283a 	ret

0201106c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201106c:	defff604 	addi	sp,sp,-40
 2011070:	dfc00915 	stw	ra,36(sp)
 2011074:	df000815 	stw	fp,32(sp)
 2011078:	df000804 	addi	fp,sp,32
 201107c:	e13ffd15 	stw	r4,-12(fp)
 2011080:	e17ffe15 	stw	r5,-8(fp)
 2011084:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2011088:	00bfffc4 	movi	r2,-1
 201108c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2011090:	00bffb44 	movi	r2,-19
 2011094:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2011098:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201109c:	d1600804 	addi	r5,gp,-32736
 20110a0:	e13ffd17 	ldw	r4,-12(fp)
 20110a4:	20113900 	call	2011390 <alt_find_dev>
 20110a8:	e0bff815 	stw	r2,-32(fp)
 20110ac:	e0bff817 	ldw	r2,-32(fp)
 20110b0:	1000051e 	bne	r2,zero,20110c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 20110b4:	e13ffd17 	ldw	r4,-12(fp)
 20110b8:	20114200 	call	2011420 <alt_find_file>
 20110bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 20110c0:	00800044 	movi	r2,1
 20110c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 20110c8:	e0bff817 	ldw	r2,-32(fp)
 20110cc:	10002b26 	beq	r2,zero,201117c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 20110d0:	e13ff817 	ldw	r4,-32(fp)
 20110d4:	20115280 	call	2011528 <alt_get_fd>
 20110d8:	e0bff915 	stw	r2,-28(fp)
 20110dc:	e0bff917 	ldw	r2,-28(fp)
 20110e0:	1000030e 	bge	r2,zero,20110f0 <open+0x84>
    {
      status = index;
 20110e4:	e0bff917 	ldw	r2,-28(fp)
 20110e8:	e0bffa15 	stw	r2,-24(fp)
 20110ec:	00002506 	br	2011184 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 20110f0:	01400304 	movi	r5,12
 20110f4:	e13ff917 	ldw	r4,-28(fp)
 20110f8:	200c9300 	call	200c930 <__mulsi3>
 20110fc:	1007883a 	mov	r3,r2
 2011100:	00808074 	movhi	r2,513
 2011104:	108b5904 	addi	r2,r2,11620
 2011108:	1885883a 	add	r2,r3,r2
 201110c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2011110:	e0fffe17 	ldw	r3,-8(fp)
 2011114:	00900034 	movhi	r2,16384
 2011118:	10bfffc4 	addi	r2,r2,-1
 201111c:	1886703a 	and	r3,r3,r2
 2011120:	e0bffc17 	ldw	r2,-16(fp)
 2011124:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2011128:	e0bffb17 	ldw	r2,-20(fp)
 201112c:	1000051e 	bne	r2,zero,2011144 <open+0xd8>
 2011130:	e13ffc17 	ldw	r4,-16(fp)
 2011134:	2010f800 	call	2010f80 <alt_file_locked>
 2011138:	e0bffa15 	stw	r2,-24(fp)
 201113c:	e0bffa17 	ldw	r2,-24(fp)
 2011140:	10001016 	blt	r2,zero,2011184 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2011144:	e0bff817 	ldw	r2,-32(fp)
 2011148:	10800317 	ldw	r2,12(r2)
 201114c:	10000826 	beq	r2,zero,2011170 <open+0x104>
 2011150:	e0bff817 	ldw	r2,-32(fp)
 2011154:	10800317 	ldw	r2,12(r2)
 2011158:	e1ffff17 	ldw	r7,-4(fp)
 201115c:	e1bffe17 	ldw	r6,-8(fp)
 2011160:	e17ffd17 	ldw	r5,-12(fp)
 2011164:	e13ffc17 	ldw	r4,-16(fp)
 2011168:	103ee83a 	callr	r2
 201116c:	00000106 	br	2011174 <open+0x108>
 2011170:	0005883a 	mov	r2,zero
 2011174:	e0bffa15 	stw	r2,-24(fp)
 2011178:	00000206 	br	2011184 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201117c:	00bffb44 	movi	r2,-19
 2011180:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2011184:	e0bffa17 	ldw	r2,-24(fp)
 2011188:	1000090e 	bge	r2,zero,20111b0 <open+0x144>
  {
    alt_release_fd (index);  
 201118c:	e13ff917 	ldw	r4,-28(fp)
 2011190:	200f9200 	call	200f920 <alt_release_fd>
    ALT_ERRNO = -status;
 2011194:	2010f440 	call	2010f44 <alt_get_errno>
 2011198:	1007883a 	mov	r3,r2
 201119c:	e0bffa17 	ldw	r2,-24(fp)
 20111a0:	0085c83a 	sub	r2,zero,r2
 20111a4:	18800015 	stw	r2,0(r3)
    return -1;
 20111a8:	00bfffc4 	movi	r2,-1
 20111ac:	00000106 	br	20111b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 20111b0:	e0bff917 	ldw	r2,-28(fp)
}
 20111b4:	e037883a 	mov	sp,fp
 20111b8:	dfc00117 	ldw	ra,4(sp)
 20111bc:	df000017 	ldw	fp,0(sp)
 20111c0:	dec00204 	addi	sp,sp,8
 20111c4:	f800283a 	ret

020111c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20111c8:	defffa04 	addi	sp,sp,-24
 20111cc:	df000515 	stw	fp,20(sp)
 20111d0:	df000504 	addi	fp,sp,20
 20111d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20111d8:	0005303a 	rdctl	r2,status
 20111dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20111e0:	e0fffc17 	ldw	r3,-16(fp)
 20111e4:	00bfff84 	movi	r2,-2
 20111e8:	1884703a 	and	r2,r3,r2
 20111ec:	1001703a 	wrctl	status,r2
  
  return context;
 20111f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20111f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20111f8:	e0bfff17 	ldw	r2,-4(fp)
 20111fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2011200:	e0bffd17 	ldw	r2,-12(fp)
 2011204:	10800017 	ldw	r2,0(r2)
 2011208:	e0fffd17 	ldw	r3,-12(fp)
 201120c:	18c00117 	ldw	r3,4(r3)
 2011210:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2011214:	e0bffd17 	ldw	r2,-12(fp)
 2011218:	10800117 	ldw	r2,4(r2)
 201121c:	e0fffd17 	ldw	r3,-12(fp)
 2011220:	18c00017 	ldw	r3,0(r3)
 2011224:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2011228:	e0bffd17 	ldw	r2,-12(fp)
 201122c:	e0fffd17 	ldw	r3,-12(fp)
 2011230:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2011234:	e0bffd17 	ldw	r2,-12(fp)
 2011238:	e0fffd17 	ldw	r3,-12(fp)
 201123c:	10c00015 	stw	r3,0(r2)
 2011240:	e0bffb17 	ldw	r2,-20(fp)
 2011244:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011248:	e0bffe17 	ldw	r2,-8(fp)
 201124c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2011250:	0001883a 	nop
 2011254:	e037883a 	mov	sp,fp
 2011258:	df000017 	ldw	fp,0(sp)
 201125c:	dec00104 	addi	sp,sp,4
 2011260:	f800283a 	ret

02011264 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2011264:	defffb04 	addi	sp,sp,-20
 2011268:	dfc00415 	stw	ra,16(sp)
 201126c:	df000315 	stw	fp,12(sp)
 2011270:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2011274:	d0a00e17 	ldw	r2,-32712(gp)
 2011278:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201127c:	d0a6d817 	ldw	r2,-25760(gp)
 2011280:	10800044 	addi	r2,r2,1
 2011284:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2011288:	00002e06 	br	2011344 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201128c:	e0bffd17 	ldw	r2,-12(fp)
 2011290:	10800017 	ldw	r2,0(r2)
 2011294:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2011298:	e0bffd17 	ldw	r2,-12(fp)
 201129c:	10800403 	ldbu	r2,16(r2)
 20112a0:	10803fcc 	andi	r2,r2,255
 20112a4:	10000426 	beq	r2,zero,20112b8 <alt_tick+0x54>
 20112a8:	d0a6d817 	ldw	r2,-25760(gp)
 20112ac:	1000021e 	bne	r2,zero,20112b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 20112b0:	e0bffd17 	ldw	r2,-12(fp)
 20112b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20112b8:	e0bffd17 	ldw	r2,-12(fp)
 20112bc:	10800217 	ldw	r2,8(r2)
 20112c0:	d0e6d817 	ldw	r3,-25760(gp)
 20112c4:	18801d36 	bltu	r3,r2,201133c <alt_tick+0xd8>
 20112c8:	e0bffd17 	ldw	r2,-12(fp)
 20112cc:	10800403 	ldbu	r2,16(r2)
 20112d0:	10803fcc 	andi	r2,r2,255
 20112d4:	1000191e 	bne	r2,zero,201133c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 20112d8:	e0bffd17 	ldw	r2,-12(fp)
 20112dc:	10800317 	ldw	r2,12(r2)
 20112e0:	e0fffd17 	ldw	r3,-12(fp)
 20112e4:	18c00517 	ldw	r3,20(r3)
 20112e8:	1809883a 	mov	r4,r3
 20112ec:	103ee83a 	callr	r2
 20112f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20112f4:	e0bfff17 	ldw	r2,-4(fp)
 20112f8:	1000031e 	bne	r2,zero,2011308 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 20112fc:	e13ffd17 	ldw	r4,-12(fp)
 2011300:	20111c80 	call	20111c8 <alt_alarm_stop>
 2011304:	00000d06 	br	201133c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2011308:	e0bffd17 	ldw	r2,-12(fp)
 201130c:	10c00217 	ldw	r3,8(r2)
 2011310:	e0bfff17 	ldw	r2,-4(fp)
 2011314:	1887883a 	add	r3,r3,r2
 2011318:	e0bffd17 	ldw	r2,-12(fp)
 201131c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2011320:	e0bffd17 	ldw	r2,-12(fp)
 2011324:	10c00217 	ldw	r3,8(r2)
 2011328:	d0a6d817 	ldw	r2,-25760(gp)
 201132c:	1880032e 	bgeu	r3,r2,201133c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2011330:	e0bffd17 	ldw	r2,-12(fp)
 2011334:	00c00044 	movi	r3,1
 2011338:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201133c:	e0bffe17 	ldw	r2,-8(fp)
 2011340:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2011344:	e0fffd17 	ldw	r3,-12(fp)
 2011348:	d0a00e04 	addi	r2,gp,-32712
 201134c:	18bfcf1e 	bne	r3,r2,201128c <__alt_data_end+0xff01128c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2011350:	0001883a 	nop
}
 2011354:	0001883a 	nop
 2011358:	e037883a 	mov	sp,fp
 201135c:	dfc00117 	ldw	ra,4(sp)
 2011360:	df000017 	ldw	fp,0(sp)
 2011364:	dec00204 	addi	sp,sp,8
 2011368:	f800283a 	ret

0201136c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 201136c:	deffff04 	addi	sp,sp,-4
 2011370:	df000015 	stw	fp,0(sp)
 2011374:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2011378:	000170fa 	wrctl	ienable,zero
}
 201137c:	0001883a 	nop
 2011380:	e037883a 	mov	sp,fp
 2011384:	df000017 	ldw	fp,0(sp)
 2011388:	dec00104 	addi	sp,sp,4
 201138c:	f800283a 	ret

02011390 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2011390:	defffa04 	addi	sp,sp,-24
 2011394:	dfc00515 	stw	ra,20(sp)
 2011398:	df000415 	stw	fp,16(sp)
 201139c:	df000404 	addi	fp,sp,16
 20113a0:	e13ffe15 	stw	r4,-8(fp)
 20113a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20113a8:	e0bfff17 	ldw	r2,-4(fp)
 20113ac:	10800017 	ldw	r2,0(r2)
 20113b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20113b4:	e13ffe17 	ldw	r4,-8(fp)
 20113b8:	20023fc0 	call	20023fc <strlen>
 20113bc:	10800044 	addi	r2,r2,1
 20113c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20113c4:	00000d06 	br	20113fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20113c8:	e0bffc17 	ldw	r2,-16(fp)
 20113cc:	10800217 	ldw	r2,8(r2)
 20113d0:	e0fffd17 	ldw	r3,-12(fp)
 20113d4:	180d883a 	mov	r6,r3
 20113d8:	e17ffe17 	ldw	r5,-8(fp)
 20113dc:	1009883a 	mov	r4,r2
 20113e0:	20116d40 	call	20116d4 <memcmp>
 20113e4:	1000021e 	bne	r2,zero,20113f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20113e8:	e0bffc17 	ldw	r2,-16(fp)
 20113ec:	00000706 	br	201140c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20113f0:	e0bffc17 	ldw	r2,-16(fp)
 20113f4:	10800017 	ldw	r2,0(r2)
 20113f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20113fc:	e0fffc17 	ldw	r3,-16(fp)
 2011400:	e0bfff17 	ldw	r2,-4(fp)
 2011404:	18bff01e 	bne	r3,r2,20113c8 <__alt_data_end+0xff0113c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2011408:	0005883a 	mov	r2,zero
}
 201140c:	e037883a 	mov	sp,fp
 2011410:	dfc00117 	ldw	ra,4(sp)
 2011414:	df000017 	ldw	fp,0(sp)
 2011418:	dec00204 	addi	sp,sp,8
 201141c:	f800283a 	ret

02011420 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2011420:	defffb04 	addi	sp,sp,-20
 2011424:	dfc00415 	stw	ra,16(sp)
 2011428:	df000315 	stw	fp,12(sp)
 201142c:	df000304 	addi	fp,sp,12
 2011430:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2011434:	d0a00617 	ldw	r2,-32744(gp)
 2011438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201143c:	00003106 	br	2011504 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2011440:	e0bffd17 	ldw	r2,-12(fp)
 2011444:	10800217 	ldw	r2,8(r2)
 2011448:	1009883a 	mov	r4,r2
 201144c:	20023fc0 	call	20023fc <strlen>
 2011450:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2011454:	e0bffd17 	ldw	r2,-12(fp)
 2011458:	10c00217 	ldw	r3,8(r2)
 201145c:	e0bffe17 	ldw	r2,-8(fp)
 2011460:	10bfffc4 	addi	r2,r2,-1
 2011464:	1885883a 	add	r2,r3,r2
 2011468:	10800003 	ldbu	r2,0(r2)
 201146c:	10803fcc 	andi	r2,r2,255
 2011470:	1080201c 	xori	r2,r2,128
 2011474:	10bfe004 	addi	r2,r2,-128
 2011478:	10800bd8 	cmpnei	r2,r2,47
 201147c:	1000031e 	bne	r2,zero,201148c <alt_find_file+0x6c>
    {
      len -= 1;
 2011480:	e0bffe17 	ldw	r2,-8(fp)
 2011484:	10bfffc4 	addi	r2,r2,-1
 2011488:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201148c:	e0bffe17 	ldw	r2,-8(fp)
 2011490:	e0ffff17 	ldw	r3,-4(fp)
 2011494:	1885883a 	add	r2,r3,r2
 2011498:	10800003 	ldbu	r2,0(r2)
 201149c:	10803fcc 	andi	r2,r2,255
 20114a0:	1080201c 	xori	r2,r2,128
 20114a4:	10bfe004 	addi	r2,r2,-128
 20114a8:	10800be0 	cmpeqi	r2,r2,47
 20114ac:	1000081e 	bne	r2,zero,20114d0 <alt_find_file+0xb0>
 20114b0:	e0bffe17 	ldw	r2,-8(fp)
 20114b4:	e0ffff17 	ldw	r3,-4(fp)
 20114b8:	1885883a 	add	r2,r3,r2
 20114bc:	10800003 	ldbu	r2,0(r2)
 20114c0:	10803fcc 	andi	r2,r2,255
 20114c4:	1080201c 	xori	r2,r2,128
 20114c8:	10bfe004 	addi	r2,r2,-128
 20114cc:	10000a1e 	bne	r2,zero,20114f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 20114d0:	e0bffd17 	ldw	r2,-12(fp)
 20114d4:	10800217 	ldw	r2,8(r2)
 20114d8:	e0fffe17 	ldw	r3,-8(fp)
 20114dc:	180d883a 	mov	r6,r3
 20114e0:	e17fff17 	ldw	r5,-4(fp)
 20114e4:	1009883a 	mov	r4,r2
 20114e8:	20116d40 	call	20116d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20114ec:	1000021e 	bne	r2,zero,20114f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20114f0:	e0bffd17 	ldw	r2,-12(fp)
 20114f4:	00000706 	br	2011514 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 20114f8:	e0bffd17 	ldw	r2,-12(fp)
 20114fc:	10800017 	ldw	r2,0(r2)
 2011500:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2011504:	e0fffd17 	ldw	r3,-12(fp)
 2011508:	d0a00604 	addi	r2,gp,-32744
 201150c:	18bfcc1e 	bne	r3,r2,2011440 <__alt_data_end+0xff011440>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2011510:	0005883a 	mov	r2,zero
}
 2011514:	e037883a 	mov	sp,fp
 2011518:	dfc00117 	ldw	ra,4(sp)
 201151c:	df000017 	ldw	fp,0(sp)
 2011520:	dec00204 	addi	sp,sp,8
 2011524:	f800283a 	ret

02011528 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2011528:	defffa04 	addi	sp,sp,-24
 201152c:	dfc00515 	stw	ra,20(sp)
 2011530:	df000415 	stw	fp,16(sp)
 2011534:	dc000315 	stw	r16,12(sp)
 2011538:	df000404 	addi	fp,sp,16
 201153c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2011540:	00bffa04 	movi	r2,-24
 2011544:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2011548:	e03ffc15 	stw	zero,-16(fp)
 201154c:	00001d06 	br	20115c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 2011550:	04008074 	movhi	r16,513
 2011554:	840b5904 	addi	r16,r16,11620
 2011558:	e0bffc17 	ldw	r2,-16(fp)
 201155c:	01400304 	movi	r5,12
 2011560:	1009883a 	mov	r4,r2
 2011564:	200c9300 	call	200c930 <__mulsi3>
 2011568:	8085883a 	add	r2,r16,r2
 201156c:	10800017 	ldw	r2,0(r2)
 2011570:	1000111e 	bne	r2,zero,20115b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 2011574:	04008074 	movhi	r16,513
 2011578:	840b5904 	addi	r16,r16,11620
 201157c:	e0bffc17 	ldw	r2,-16(fp)
 2011580:	01400304 	movi	r5,12
 2011584:	1009883a 	mov	r4,r2
 2011588:	200c9300 	call	200c930 <__mulsi3>
 201158c:	8085883a 	add	r2,r16,r2
 2011590:	e0fffe17 	ldw	r3,-8(fp)
 2011594:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2011598:	d0e00a17 	ldw	r3,-32728(gp)
 201159c:	e0bffc17 	ldw	r2,-16(fp)
 20115a0:	1880020e 	bge	r3,r2,20115ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 20115a4:	e0bffc17 	ldw	r2,-16(fp)
 20115a8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 20115ac:	e0bffc17 	ldw	r2,-16(fp)
 20115b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 20115b4:	00000606 	br	20115d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20115b8:	e0bffc17 	ldw	r2,-16(fp)
 20115bc:	10800044 	addi	r2,r2,1
 20115c0:	e0bffc15 	stw	r2,-16(fp)
 20115c4:	e0bffc17 	ldw	r2,-16(fp)
 20115c8:	10800810 	cmplti	r2,r2,32
 20115cc:	103fe01e 	bne	r2,zero,2011550 <__alt_data_end+0xff011550>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20115d0:	e0bffd17 	ldw	r2,-12(fp)
}
 20115d4:	e6ffff04 	addi	sp,fp,-4
 20115d8:	dfc00217 	ldw	ra,8(sp)
 20115dc:	df000117 	ldw	fp,4(sp)
 20115e0:	dc000017 	ldw	r16,0(sp)
 20115e4:	dec00304 	addi	sp,sp,12
 20115e8:	f800283a 	ret

020115ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 20115ec:	defffe04 	addi	sp,sp,-8
 20115f0:	df000115 	stw	fp,4(sp)
 20115f4:	df000104 	addi	fp,sp,4
 20115f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 20115fc:	e0bfff17 	ldw	r2,-4(fp)
 2011600:	10bffe84 	addi	r2,r2,-6
 2011604:	10c00428 	cmpgeui	r3,r2,16
 2011608:	18001a1e 	bne	r3,zero,2011674 <alt_exception_cause_generated_bad_addr+0x88>
 201160c:	100690ba 	slli	r3,r2,2
 2011610:	00808074 	movhi	r2,513
 2011614:	10858904 	addi	r2,r2,5668
 2011618:	1885883a 	add	r2,r3,r2
 201161c:	10800017 	ldw	r2,0(r2)
 2011620:	1000683a 	jmp	r2
 2011624:	02011664 	muli	r8,zero,1113
 2011628:	02011664 	muli	r8,zero,1113
 201162c:	02011674 	movhi	r8,1113
 2011630:	02011674 	movhi	r8,1113
 2011634:	02011674 	movhi	r8,1113
 2011638:	02011664 	muli	r8,zero,1113
 201163c:	0201166c 	andhi	r8,zero,1113
 2011640:	02011674 	movhi	r8,1113
 2011644:	02011664 	muli	r8,zero,1113
 2011648:	02011664 	muli	r8,zero,1113
 201164c:	02011674 	movhi	r8,1113
 2011650:	02011664 	muli	r8,zero,1113
 2011654:	0201166c 	andhi	r8,zero,1113
 2011658:	02011674 	movhi	r8,1113
 201165c:	02011674 	movhi	r8,1113
 2011660:	02011664 	muli	r8,zero,1113
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2011664:	00800044 	movi	r2,1
 2011668:	00000306 	br	2011678 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201166c:	0005883a 	mov	r2,zero
 2011670:	00000106 	br	2011678 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2011674:	0005883a 	mov	r2,zero
  }
}
 2011678:	e037883a 	mov	sp,fp
 201167c:	df000017 	ldw	fp,0(sp)
 2011680:	dec00104 	addi	sp,sp,4
 2011684:	f800283a 	ret

02011688 <atexit>:
 2011688:	200b883a 	mov	r5,r4
 201168c:	000f883a 	mov	r7,zero
 2011690:	000d883a 	mov	r6,zero
 2011694:	0009883a 	mov	r4,zero
 2011698:	20117501 	jmpi	2011750 <__register_exitproc>

0201169c <exit>:
 201169c:	defffe04 	addi	sp,sp,-8
 20116a0:	000b883a 	mov	r5,zero
 20116a4:	dc000015 	stw	r16,0(sp)
 20116a8:	dfc00115 	stw	ra,4(sp)
 20116ac:	2021883a 	mov	r16,r4
 20116b0:	20118680 	call	2011868 <__call_exitprocs>
 20116b4:	00808074 	movhi	r2,513
 20116b8:	108fd104 	addi	r2,r2,16196
 20116bc:	11000017 	ldw	r4,0(r2)
 20116c0:	20800f17 	ldw	r2,60(r4)
 20116c4:	10000126 	beq	r2,zero,20116cc <exit+0x30>
 20116c8:	103ee83a 	callr	r2
 20116cc:	8009883a 	mov	r4,r16
 20116d0:	20119e80 	call	20119e8 <_exit>

020116d4 <memcmp>:
 20116d4:	01c000c4 	movi	r7,3
 20116d8:	3980192e 	bgeu	r7,r6,2011740 <memcmp+0x6c>
 20116dc:	2144b03a 	or	r2,r4,r5
 20116e0:	11c4703a 	and	r2,r2,r7
 20116e4:	10000f26 	beq	r2,zero,2011724 <memcmp+0x50>
 20116e8:	20800003 	ldbu	r2,0(r4)
 20116ec:	28c00003 	ldbu	r3,0(r5)
 20116f0:	10c0151e 	bne	r2,r3,2011748 <memcmp+0x74>
 20116f4:	31bfff84 	addi	r6,r6,-2
 20116f8:	01ffffc4 	movi	r7,-1
 20116fc:	00000406 	br	2011710 <memcmp+0x3c>
 2011700:	20800003 	ldbu	r2,0(r4)
 2011704:	28c00003 	ldbu	r3,0(r5)
 2011708:	31bfffc4 	addi	r6,r6,-1
 201170c:	10c00e1e 	bne	r2,r3,2011748 <memcmp+0x74>
 2011710:	21000044 	addi	r4,r4,1
 2011714:	29400044 	addi	r5,r5,1
 2011718:	31fff91e 	bne	r6,r7,2011700 <__alt_data_end+0xff011700>
 201171c:	0005883a 	mov	r2,zero
 2011720:	f800283a 	ret
 2011724:	20c00017 	ldw	r3,0(r4)
 2011728:	28800017 	ldw	r2,0(r5)
 201172c:	18bfee1e 	bne	r3,r2,20116e8 <__alt_data_end+0xff0116e8>
 2011730:	31bfff04 	addi	r6,r6,-4
 2011734:	21000104 	addi	r4,r4,4
 2011738:	29400104 	addi	r5,r5,4
 201173c:	39bff936 	bltu	r7,r6,2011724 <__alt_data_end+0xff011724>
 2011740:	303fe91e 	bne	r6,zero,20116e8 <__alt_data_end+0xff0116e8>
 2011744:	003ff506 	br	201171c <__alt_data_end+0xff01171c>
 2011748:	10c5c83a 	sub	r2,r2,r3
 201174c:	f800283a 	ret

02011750 <__register_exitproc>:
 2011750:	defffa04 	addi	sp,sp,-24
 2011754:	dc000315 	stw	r16,12(sp)
 2011758:	04008074 	movhi	r16,513
 201175c:	840fd104 	addi	r16,r16,16196
 2011760:	80c00017 	ldw	r3,0(r16)
 2011764:	dc400415 	stw	r17,16(sp)
 2011768:	dfc00515 	stw	ra,20(sp)
 201176c:	18805217 	ldw	r2,328(r3)
 2011770:	2023883a 	mov	r17,r4
 2011774:	10003726 	beq	r2,zero,2011854 <__register_exitproc+0x104>
 2011778:	10c00117 	ldw	r3,4(r2)
 201177c:	010007c4 	movi	r4,31
 2011780:	20c00e16 	blt	r4,r3,20117bc <__register_exitproc+0x6c>
 2011784:	1a000044 	addi	r8,r3,1
 2011788:	8800221e 	bne	r17,zero,2011814 <__register_exitproc+0xc4>
 201178c:	18c00084 	addi	r3,r3,2
 2011790:	18c7883a 	add	r3,r3,r3
 2011794:	18c7883a 	add	r3,r3,r3
 2011798:	12000115 	stw	r8,4(r2)
 201179c:	10c7883a 	add	r3,r2,r3
 20117a0:	19400015 	stw	r5,0(r3)
 20117a4:	0005883a 	mov	r2,zero
 20117a8:	dfc00517 	ldw	ra,20(sp)
 20117ac:	dc400417 	ldw	r17,16(sp)
 20117b0:	dc000317 	ldw	r16,12(sp)
 20117b4:	dec00604 	addi	sp,sp,24
 20117b8:	f800283a 	ret
 20117bc:	00800034 	movhi	r2,0
 20117c0:	10800004 	addi	r2,r2,0
 20117c4:	10002626 	beq	r2,zero,2011860 <__register_exitproc+0x110>
 20117c8:	01006404 	movi	r4,400
 20117cc:	d9400015 	stw	r5,0(sp)
 20117d0:	d9800115 	stw	r6,4(sp)
 20117d4:	d9c00215 	stw	r7,8(sp)
 20117d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 20117dc:	d9400017 	ldw	r5,0(sp)
 20117e0:	d9800117 	ldw	r6,4(sp)
 20117e4:	d9c00217 	ldw	r7,8(sp)
 20117e8:	10001d26 	beq	r2,zero,2011860 <__register_exitproc+0x110>
 20117ec:	81000017 	ldw	r4,0(r16)
 20117f0:	10000115 	stw	zero,4(r2)
 20117f4:	02000044 	movi	r8,1
 20117f8:	22405217 	ldw	r9,328(r4)
 20117fc:	0007883a 	mov	r3,zero
 2011800:	12400015 	stw	r9,0(r2)
 2011804:	20805215 	stw	r2,328(r4)
 2011808:	10006215 	stw	zero,392(r2)
 201180c:	10006315 	stw	zero,396(r2)
 2011810:	883fde26 	beq	r17,zero,201178c <__alt_data_end+0xff01178c>
 2011814:	18c9883a 	add	r4,r3,r3
 2011818:	2109883a 	add	r4,r4,r4
 201181c:	1109883a 	add	r4,r2,r4
 2011820:	21802215 	stw	r6,136(r4)
 2011824:	01800044 	movi	r6,1
 2011828:	12406217 	ldw	r9,392(r2)
 201182c:	30cc983a 	sll	r6,r6,r3
 2011830:	4992b03a 	or	r9,r9,r6
 2011834:	12406215 	stw	r9,392(r2)
 2011838:	21c04215 	stw	r7,264(r4)
 201183c:	01000084 	movi	r4,2
 2011840:	893fd21e 	bne	r17,r4,201178c <__alt_data_end+0xff01178c>
 2011844:	11006317 	ldw	r4,396(r2)
 2011848:	218cb03a 	or	r6,r4,r6
 201184c:	11806315 	stw	r6,396(r2)
 2011850:	003fce06 	br	201178c <__alt_data_end+0xff01178c>
 2011854:	18805304 	addi	r2,r3,332
 2011858:	18805215 	stw	r2,328(r3)
 201185c:	003fc606 	br	2011778 <__alt_data_end+0xff011778>
 2011860:	00bfffc4 	movi	r2,-1
 2011864:	003fd006 	br	20117a8 <__alt_data_end+0xff0117a8>

02011868 <__call_exitprocs>:
 2011868:	defff504 	addi	sp,sp,-44
 201186c:	df000915 	stw	fp,36(sp)
 2011870:	dd400615 	stw	r21,24(sp)
 2011874:	dc800315 	stw	r18,12(sp)
 2011878:	dfc00a15 	stw	ra,40(sp)
 201187c:	ddc00815 	stw	r23,32(sp)
 2011880:	dd800715 	stw	r22,28(sp)
 2011884:	dd000515 	stw	r20,20(sp)
 2011888:	dcc00415 	stw	r19,16(sp)
 201188c:	dc400215 	stw	r17,8(sp)
 2011890:	dc000115 	stw	r16,4(sp)
 2011894:	d9000015 	stw	r4,0(sp)
 2011898:	2839883a 	mov	fp,r5
 201189c:	04800044 	movi	r18,1
 20118a0:	057fffc4 	movi	r21,-1
 20118a4:	00808074 	movhi	r2,513
 20118a8:	108fd104 	addi	r2,r2,16196
 20118ac:	12000017 	ldw	r8,0(r2)
 20118b0:	45005217 	ldw	r20,328(r8)
 20118b4:	44c05204 	addi	r19,r8,328
 20118b8:	a0001c26 	beq	r20,zero,201192c <__call_exitprocs+0xc4>
 20118bc:	a0800117 	ldw	r2,4(r20)
 20118c0:	15ffffc4 	addi	r23,r2,-1
 20118c4:	b8000d16 	blt	r23,zero,20118fc <__call_exitprocs+0x94>
 20118c8:	14000044 	addi	r16,r2,1
 20118cc:	8421883a 	add	r16,r16,r16
 20118d0:	8421883a 	add	r16,r16,r16
 20118d4:	84402004 	addi	r17,r16,128
 20118d8:	a463883a 	add	r17,r20,r17
 20118dc:	a421883a 	add	r16,r20,r16
 20118e0:	e0001e26 	beq	fp,zero,201195c <__call_exitprocs+0xf4>
 20118e4:	80804017 	ldw	r2,256(r16)
 20118e8:	e0801c26 	beq	fp,r2,201195c <__call_exitprocs+0xf4>
 20118ec:	bdffffc4 	addi	r23,r23,-1
 20118f0:	843fff04 	addi	r16,r16,-4
 20118f4:	8c7fff04 	addi	r17,r17,-4
 20118f8:	bd7ff91e 	bne	r23,r21,20118e0 <__alt_data_end+0xff0118e0>
 20118fc:	00800034 	movhi	r2,0
 2011900:	10800004 	addi	r2,r2,0
 2011904:	10000926 	beq	r2,zero,201192c <__call_exitprocs+0xc4>
 2011908:	a0800117 	ldw	r2,4(r20)
 201190c:	1000301e 	bne	r2,zero,20119d0 <__call_exitprocs+0x168>
 2011910:	a0800017 	ldw	r2,0(r20)
 2011914:	10003226 	beq	r2,zero,20119e0 <__call_exitprocs+0x178>
 2011918:	a009883a 	mov	r4,r20
 201191c:	98800015 	stw	r2,0(r19)
 2011920:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 2011924:	9d000017 	ldw	r20,0(r19)
 2011928:	a03fe41e 	bne	r20,zero,20118bc <__alt_data_end+0xff0118bc>
 201192c:	dfc00a17 	ldw	ra,40(sp)
 2011930:	df000917 	ldw	fp,36(sp)
 2011934:	ddc00817 	ldw	r23,32(sp)
 2011938:	dd800717 	ldw	r22,28(sp)
 201193c:	dd400617 	ldw	r21,24(sp)
 2011940:	dd000517 	ldw	r20,20(sp)
 2011944:	dcc00417 	ldw	r19,16(sp)
 2011948:	dc800317 	ldw	r18,12(sp)
 201194c:	dc400217 	ldw	r17,8(sp)
 2011950:	dc000117 	ldw	r16,4(sp)
 2011954:	dec00b04 	addi	sp,sp,44
 2011958:	f800283a 	ret
 201195c:	a0800117 	ldw	r2,4(r20)
 2011960:	80c00017 	ldw	r3,0(r16)
 2011964:	10bfffc4 	addi	r2,r2,-1
 2011968:	15c01426 	beq	r2,r23,20119bc <__call_exitprocs+0x154>
 201196c:	80000015 	stw	zero,0(r16)
 2011970:	183fde26 	beq	r3,zero,20118ec <__alt_data_end+0xff0118ec>
 2011974:	95c8983a 	sll	r4,r18,r23
 2011978:	a0806217 	ldw	r2,392(r20)
 201197c:	a5800117 	ldw	r22,4(r20)
 2011980:	2084703a 	and	r2,r4,r2
 2011984:	10000b26 	beq	r2,zero,20119b4 <__call_exitprocs+0x14c>
 2011988:	a0806317 	ldw	r2,396(r20)
 201198c:	2088703a 	and	r4,r4,r2
 2011990:	20000c1e 	bne	r4,zero,20119c4 <__call_exitprocs+0x15c>
 2011994:	89400017 	ldw	r5,0(r17)
 2011998:	d9000017 	ldw	r4,0(sp)
 201199c:	183ee83a 	callr	r3
 20119a0:	a0800117 	ldw	r2,4(r20)
 20119a4:	15bfbf1e 	bne	r2,r22,20118a4 <__alt_data_end+0xff0118a4>
 20119a8:	98800017 	ldw	r2,0(r19)
 20119ac:	153fcf26 	beq	r2,r20,20118ec <__alt_data_end+0xff0118ec>
 20119b0:	003fbc06 	br	20118a4 <__alt_data_end+0xff0118a4>
 20119b4:	183ee83a 	callr	r3
 20119b8:	003ff906 	br	20119a0 <__alt_data_end+0xff0119a0>
 20119bc:	a5c00115 	stw	r23,4(r20)
 20119c0:	003feb06 	br	2011970 <__alt_data_end+0xff011970>
 20119c4:	89000017 	ldw	r4,0(r17)
 20119c8:	183ee83a 	callr	r3
 20119cc:	003ff406 	br	20119a0 <__alt_data_end+0xff0119a0>
 20119d0:	a0800017 	ldw	r2,0(r20)
 20119d4:	a027883a 	mov	r19,r20
 20119d8:	1029883a 	mov	r20,r2
 20119dc:	003fb606 	br	20118b8 <__alt_data_end+0xff0118b8>
 20119e0:	0005883a 	mov	r2,zero
 20119e4:	003ffb06 	br	20119d4 <__alt_data_end+0xff0119d4>

020119e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20119e8:	defffd04 	addi	sp,sp,-12
 20119ec:	df000215 	stw	fp,8(sp)
 20119f0:	df000204 	addi	fp,sp,8
 20119f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20119f8:	0001883a 	nop
 20119fc:	e0bfff17 	ldw	r2,-4(fp)
 2011a00:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2011a04:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2011a08:	10000226 	beq	r2,zero,2011a14 <_exit+0x2c>
    ALT_SIM_FAIL();
 2011a0c:	002af070 	cmpltui	zero,zero,43969
 2011a10:	00000106 	br	2011a18 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2011a14:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2011a18:	003fff06 	br	2011a18 <__alt_data_end+0xff011a18>
