// module paletteToRGB(  input logic [3:0] colorIdx, backcolorIdx,
//                       input logic isBackground,
//                       output logic [7:0] R, G, B
//                       );
//   assign Idx = ((4'd0 == colorIdx) && (isBackground==0)) ? backcolorIdx : colorIdx;
  module paletteToRGB(  input logic [3:0] colorIdx,
                        output logic [7:0] R, G, B
                        );
  always_comb begin
    unique case (Idx)
      4'd0: begin
          R = ;
          G = ;
          B = ;
        end
      4'd1: begin
          R = ;
          G = ;
          B = ;
        end
      4'd2: begin
          R = ;
          G = ;
          B = ;
        end
      4'd3: begin
          R = ;
          G = ;
          B = ;
        end
      4'd4: begin
          R = ;
          G = ;
          B = ;
        end
      4'd5: begin
          R = ;
          G = ;
          B = ;
        end
      4'd6: begin
          R = ;
          G = ;
          B = ;
        end
      4'd7: begin
          R = ;
          G = ;
          B = ;
        end
      4'd8: begin
          R = ;
          G = ;
          B = ;
        end
      4'd9: begin
          R = ;
          G = ;
          B = ;
        end
      4'd10: begin
          R = ;
          G = ;
          B = ;
        end
      4'd11: begin
          R = ;
          G = ;
          B = ;
        end
      4'd12: begin
          R = ;
          G = ;
          B = ;
        end
      4'd13: begin
          R = ;
          G = ;
          B = ;
        end
      4'd14: begin
          R = ;
          G = ;
          B = ;
        end
      4'd15: begin
          R = ;
          G = ;
          B = ;
        end
    endcase
  end

endmodule
