module datapath (	input logic Clk,
										LD_MAR,
										LD_MDR,
										LD_IR,
										LD_BEN,
										LD_CC,
										LD_REG,
										LD_PC,
										LD_LED,
										GatePC,
										GateMDR,
										GateALU,
										GateMARMUX,
										MIO_EN,
										Reset,
						input logic[1:0] PCMUX,ADDR2MUX, ALUK,
						input logic DRMUX, SR1MUX, SR2MUX, ADDR1MUX,
						// above FSM's output
						input logic[15:0]	MDR_In,



						output logic [15:0]	PC,
													MAR,
													IR,
													MDR,
						output logic BEN
						);

						// FSM MemIO Tristate are given
						// send signal to use them
						// changing MDR MAR is control by this module
						// pyhical mem interaction happens here
	logic [15:0] BUS, PC_out_PCMUX, MDR_out_MUX;

	always_comb begin // BUS MUX // In : GateSig controlled PC/ALU/MDR/MAR; Out: BUS
	unique case({GatePC, GateMDR, GateALU, GateMARMUX})
		4'b1000:
		// MAR <- PC
			BUS = PC;
		4'b0100:
		// IR <- MDR
			BUS = MDR; // BUG: MDR_In
		4'b0010:
			BUS = 16'h0000; // week2
		4'b0001:
			BUS = 16'h0000; // week2
		default:
			BUS = 16'bXXXXXXXXXXXXXXXX;
		endcase
	end


	always_comb begin // MDR MUX In: BUS, Data_to_CPU = MDR_In; Out = MUX out
	if (MIO_EN)
		MDR_out_MUX = MDR_In;
	else
		MDR_out_MUX = 16'h0000; // week2
	end

	bit16Reg reg_PC  (.Clk, .Reset, .LdEn(LD_PC),  .In(PC_out_PCMUX), .Out(PC));
	bit16Reg reg_IR  (.Clk, .Reset, .LdEn(LD_IR),  .In(BUS), 			.Out(IR));
	bit16Reg reg_MDR (.Clk, .Reset, .LdEn(LD_MDR), .In(MDR_out_MUX),	.Out(MDR));
	bit16Reg reg_MAR (.Clk, .Reset, .LdEn(LD_MAR), .In(BUS), 			.Out(MAR));

	// Start of (Blue) Reg File
			logic [2:0] DRMUX_Out;
			// implied DRMUX
			always_comb begin
				case (DRMUX)
					1'b0:
						DRMUX_Out = IR[11:9];
					0'b0:
						DRMUX_Out = 3'b111;
			end

			logic [2:0] SR1MUX_Out;
			// implied SR1MUX
			always_comb begin
				case (SR1MUX)
					1'b0:
						SR1MUX_Out = IR[8:6];
					1'b1:
						SR1MUX_Out = IR[11:9];
			end

			logic [15:0] SR1_Out, SR1_Out; // output of regfile, use this
			// SR1_Out _yes_; SR2_Out __
			RegFile REGFILE_inst(.LD_REG, .CLk, .Reset, .Reg_In(BUS), .DRMUX_Out, .SR2(IR[2:0]), .SR1MUX_Out, .SR1_Out, .SR2_Out );
	// End of (Blue) Reg File


	// Start of (Pink) PCGen
			PCGenerator PC_inst(.PCMUX, .PC_in_PCMUX(PC), .PC_out_PCMUX); //week2
	// End of (Pink) PCGen


	// Start of (Green) AddrGen
			logic [15:0] AddrGen_Out; // output of addrgen, use this
			AddrGenerator Addr_inst(.*);
	// End of (Green) AddrGen



	// Start of (Purple) setCC
			logic N, Z, P;
			setCC setCC_inst(.*, .basis(BUS));
			always_ff @ (posedge Clk) begin
				if(LD_BEN) begin
					BEN = (IR[11] & N) | (IR[10] & Z) | (IR[9] & P);
				end
				else begin
					// empty
				end
			end

	// End of (Purple) setCC


endmodule
